begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.integrity
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_class
DECL|class|BracketChecker
specifier|public
class|class
name|BracketChecker
implements|implements
name|ValueChecker
block|{
annotation|@
name|Override
DECL|method|checkValue (String value)
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|checkValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|// metaphor: integer-based stack (push + / pop -)
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|a
range|:
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|==
literal|'{'
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|==
literal|'}'
condition|)
block|{
if|if
condition|(
name|counter
operator|==
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"unexpected closing curly bracket"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|counter
operator|--
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"unexpected opening curly bracket"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

