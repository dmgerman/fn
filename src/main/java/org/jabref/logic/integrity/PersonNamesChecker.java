begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.integrity
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|integrity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
operator|.
name|RemoveBrackets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|AuthorList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_class
DECL|class|PersonNamesChecker
specifier|public
class|class
name|PersonNamesChecker
implements|implements
name|ValueChecker
block|{
DECL|field|bibMode
specifier|private
specifier|final
name|BibDatabaseMode
name|bibMode
decl_stmt|;
DECL|method|PersonNamesChecker (BibDatabaseContext databaseContext)
specifier|public
name|PersonNamesChecker
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|)
block|{
name|this
operator|.
name|bibMode
operator|=
name|databaseContext
operator|.
name|getMode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|checkValue (String value)
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|checkValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
name|valueTrimmedAndLowerCase
init|=
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueTrimmedAndLowerCase
operator|.
name|startsWith
argument_list|(
literal|"and "
argument_list|)
operator|||
name|valueTrimmedAndLowerCase
operator|.
name|startsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should start with a name"
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|valueTrimmedAndLowerCase
operator|.
name|endsWith
argument_list|(
literal|" and"
argument_list|)
operator|||
name|valueTrimmedAndLowerCase
operator|.
name|endsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"should end with a name"
argument_list|)
argument_list|)
return|;
block|}
comment|// Remove all brackets to handle corporate names correctly, e.g., {JabRef}
name|value
operator|=
operator|new
name|RemoveBrackets
argument_list|()
operator|.
name|format
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// Check that the value is in one of the two standard BibTeX formats:
comment|//  Last, First and ...
comment|//  First Last and ...
name|AuthorList
name|authorList
init|=
name|AuthorList
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authorList
operator|.
name|getAsLastFirstNamesWithAnd
argument_list|(
literal|false
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|&&
operator|!
name|authorList
operator|.
name|getAsFirstLastNamesWithAnd
argument_list|()
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Names are not in the standard %0 format."
argument_list|,
name|bibMode
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

