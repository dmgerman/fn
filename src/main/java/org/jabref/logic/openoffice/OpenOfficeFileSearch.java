begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_class
DECL|class|OpenOfficeFileSearch
specifier|public
class|class
name|OpenOfficeFileSearch
block|{
comment|/**      * Detects existing installation of OpenOffice and LibreOffice.      *      * @return a list of detected installation paths      */
DECL|method|detectInstallations ()
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|detectInstallations
parameter_list|()
block|{
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|programDirs
init|=
name|findWindowsOpenOfficeDirs
argument_list|()
decl_stmt|;
return|return
name|programDirs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|dir
lambda|->
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|WINDOWS_EXECUTABLE
argument_list|,
name|dir
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|programDirs
init|=
name|findOSXOpenOfficeDirs
argument_list|()
decl_stmt|;
return|return
name|programDirs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|dir
lambda|->
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|OSX_EXECUTABLE
argument_list|,
name|dir
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|LINUX
condition|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|programDirs
init|=
name|findLinuxOpenOfficeDirs
argument_list|()
decl_stmt|;
return|return
name|programDirs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|dir
lambda|->
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|LINUX_EXECUTABLE
argument_list|,
name|dir
argument_list|)
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|findOpenOfficeDirectories (List<Path> programDirectories)
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|findOpenOfficeDirectories
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|programDirectories
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|programDir
range|:
name|programDirectories
control|)
block|{
name|File
index|[]
name|subDirs
init|=
name|programDir
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|(
name|File
operator|::
name|isDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|subDirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|subDirs
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"openoffice"
argument_list|)
operator|||
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"libreoffice"
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|dir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|findWindowsOpenOfficeDirs ()
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|findWindowsOpenOfficeDirs
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sourceList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 64-bit program directory
name|String
name|progFiles
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles"
argument_list|)
decl_stmt|;
if|if
condition|(
name|progFiles
operator|!=
literal|null
condition|)
block|{
name|sourceList
operator|.
name|add
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|progFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 32-bit program directory
name|progFiles
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles(x86)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|progFiles
operator|!=
literal|null
condition|)
block|{
name|sourceList
operator|.
name|add
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|progFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|findOpenOfficeDirectories
argument_list|(
name|sourceList
argument_list|)
return|;
block|}
DECL|method|findOSXOpenOfficeDirs ()
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|findOSXOpenOfficeDirs
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sourceList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/Applications"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|findOpenOfficeDirectories
argument_list|(
name|sourceList
argument_list|)
return|;
block|}
DECL|method|findLinuxOpenOfficeDirs ()
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|findLinuxOpenOfficeDirs
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|sourceList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/usr/lib"
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
literal|"/usr/lib64"
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
literal|"/opt"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|findOpenOfficeDirectories
argument_list|(
name|sourceList
argument_list|)
return|;
block|}
block|}
end_class

end_unit

