begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_class
DECL|class|OpenOfficeFileSearch
specifier|public
class|class
name|OpenOfficeFileSearch
block|{
comment|/**      * Search for Program files directory.      * @return the File pointing to the Program files directory, or null if not found.      *   Since we are not including a library for Windows integration, this method can't      *   find the Program files dir in localized Windows installations.      */
DECL|method|findWindowsOpenOfficeDirs ()
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|findWindowsOpenOfficeDirs
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sourceList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Check default 64-bits program directory
name|String
name|progFiles
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles"
argument_list|)
decl_stmt|;
if|if
condition|(
name|progFiles
operator|!=
literal|null
condition|)
block|{
name|sourceList
operator|.
name|add
argument_list|(
name|progFiles
argument_list|)
expr_stmt|;
block|}
comment|// Check default 64-bits program directory
name|progFiles
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"ProgramFiles(x86)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|progFiles
operator|!=
literal|null
condition|)
block|{
name|sourceList
operator|.
name|add
argument_list|(
name|progFiles
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|rootPath
range|:
name|sourceList
control|)
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|File
index|[]
name|dirs
init|=
name|root
operator|.
name|listFiles
argument_list|(
name|File
operator|::
name|isDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"OpenOffice"
argument_list|)
operator|||
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"LibreOffice"
argument_list|)
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
name|dir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|dirList
return|;
block|}
comment|/**      * Search for Program files directory.      * @return the File pointing to the Program files directory, or null if not found.      *   Since we are not including a library for Windows integration, this method can't      *   find the Program files dir in localized Windows installations.      */
DECL|method|findOSXOpenOfficeDirs ()
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|findOSXOpenOfficeDirs
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|rootDir
init|=
operator|new
name|File
argument_list|(
literal|"/Applications"
argument_list|)
decl_stmt|;
name|File
index|[]
name|dirs
init|=
name|rootDir
operator|.
name|listFiles
argument_list|(
name|File
operator|::
name|isDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
literal|"OpenOffice.org.app"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"LibreOffice.app"
operator|.
name|equals
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
name|dir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dirList
return|;
block|}
DECL|method|findLinuxOpenOfficeDirs ()
specifier|public
name|List
argument_list|<
name|Path
argument_list|>
name|findLinuxOpenOfficeDirs
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|dirList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sourceList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|sourceList
operator|.
name|add
argument_list|(
literal|"/usr/lib"
argument_list|)
expr_stmt|;
name|sourceList
operator|.
name|add
argument_list|(
literal|"/usr/lib64"
argument_list|)
expr_stmt|;
name|sourceList
operator|.
name|add
argument_list|(
literal|"/opt"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rootPath
range|:
name|sourceList
control|)
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|File
index|[]
name|dirs
init|=
name|root
operator|.
name|listFiles
argument_list|(
name|File
operator|::
name|isDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"openoffice"
argument_list|)
operator|||
name|dir
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"libreoffice"
argument_list|)
condition|)
block|{
name|dirList
operator|.
name|add
argument_list|(
name|dir
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|dirList
return|;
block|}
block|}
end_class

end_unit

