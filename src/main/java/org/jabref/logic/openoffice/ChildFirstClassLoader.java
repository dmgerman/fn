begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_class
DECL|class|ChildFirstClassLoader
specifier|public
class|class
name|ChildFirstClassLoader
extends|extends
name|URLClassLoader
block|{
DECL|method|ChildFirstClassLoader (URL[] urls, ClassLoader parent)
specifier|public
name|ChildFirstClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadClass (String name, boolean resolve)
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resolve
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|// has the class loaded already?
name|Class
argument_list|<
name|?
argument_list|>
name|loadedClass
init|=
name|findLoadedClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadedClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// find the class from given jar urls
name|loadedClass
operator|=
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Hmmm... class does not exist in the given urls.
comment|// Let's try finding it in our parent classloader.
comment|// this'll throw ClassNotFoundException in failure.
name|loadedClass
operator|=
name|super
operator|.
name|loadClass
argument_list|(
name|name
argument_list|,
name|resolve
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolve
condition|)
block|{
comment|// marked to resolve
name|resolveClass
argument_list|(
name|loadedClass
argument_list|)
expr_stmt|;
block|}
return|return
name|loadedClass
return|;
block|}
block|}
end_class

end_unit

