begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.logic.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|OpenOfficePreferences
specifier|public
class|class
name|OpenOfficePreferences
block|{
DECL|field|DEFAULT_WINDOWS_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_WINDOWS_PATH
init|=
literal|"C:\\Program Files\\LibreOffice 5"
decl_stmt|;
DECL|field|DEFAULT_WIN_EXEC_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_WIN_EXEC_PATH
init|=
literal|"C:\\Program Files\\LibreOffice 5\\program"
decl_stmt|;
DECL|field|WINDOWS_EXECUTABLE
specifier|public
specifier|static
specifier|final
name|String
name|WINDOWS_EXECUTABLE
init|=
literal|"soffice.exe"
decl_stmt|;
DECL|field|DEFAULT_OSX_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OSX_PATH
init|=
literal|"/Applications/OpenOffice.org.app"
decl_stmt|;
DECL|field|DEFAULT_OSX_EXEC_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OSX_EXEC_PATH
init|=
literal|"/Applications/OpenOffice.org.app/Contents/MacOS/soffice"
decl_stmt|;
DECL|field|OSX_EXECUTABLE
specifier|public
specifier|static
specifier|final
name|String
name|OSX_EXECUTABLE
init|=
literal|"soffice"
decl_stmt|;
DECL|field|DEFAULT_LINUX_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LINUX_PATH
init|=
literal|"/usr/lib/libreoffice"
decl_stmt|;
DECL|field|DEFAULT_LINUX_EXEC_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_LINUX_EXEC_PATH
init|=
literal|"/usr/lib/libreoffice/program/soffice"
decl_stmt|;
DECL|field|LINUX_EXECUTABLE
specifier|public
specifier|static
specifier|final
name|String
name|LINUX_EXECUTABLE
init|=
literal|"soffice"
decl_stmt|;
DECL|field|OO_JARS
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|OO_JARS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"unoil.jar"
argument_list|,
literal|"jurt.jar"
argument_list|,
literal|"juh.jar"
argument_list|,
literal|"ridl.jar"
argument_list|)
decl_stmt|;
DECL|field|executablePath
specifier|private
name|String
name|executablePath
decl_stmt|;
DECL|field|installationPath
specifier|private
name|String
name|installationPath
decl_stmt|;
DECL|field|useAllDatabases
specifier|private
name|Boolean
name|useAllDatabases
decl_stmt|;
DECL|field|syncWhenCiting
specifier|private
name|Boolean
name|syncWhenCiting
decl_stmt|;
DECL|field|showPanel
specifier|private
name|Boolean
name|showPanel
decl_stmt|;
DECL|field|externalStyles
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|externalStyles
decl_stmt|;
DECL|field|currentStyle
specifier|private
name|String
name|currentStyle
decl_stmt|;
DECL|field|jarsPath
specifier|private
name|String
name|jarsPath
decl_stmt|;
DECL|method|OpenOfficePreferences ( String jarsPath, String executablePath, String installationPath, Boolean useAllDatabases, Boolean syncWhenCiting, Boolean showPanel, List<String> externalStyles, String currentStyle )
specifier|public
name|OpenOfficePreferences
parameter_list|(
name|String
name|jarsPath
parameter_list|,
name|String
name|executablePath
parameter_list|,
name|String
name|installationPath
parameter_list|,
name|Boolean
name|useAllDatabases
parameter_list|,
name|Boolean
name|syncWhenCiting
parameter_list|,
name|Boolean
name|showPanel
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|externalStyles
parameter_list|,
name|String
name|currentStyle
parameter_list|)
block|{
name|this
operator|.
name|jarsPath
operator|=
name|jarsPath
expr_stmt|;
name|this
operator|.
name|executablePath
operator|=
name|executablePath
expr_stmt|;
name|this
operator|.
name|installationPath
operator|=
name|installationPath
expr_stmt|;
name|this
operator|.
name|useAllDatabases
operator|=
name|useAllDatabases
expr_stmt|;
name|this
operator|.
name|syncWhenCiting
operator|=
name|syncWhenCiting
expr_stmt|;
name|this
operator|.
name|showPanel
operator|=
name|showPanel
expr_stmt|;
name|this
operator|.
name|externalStyles
operator|=
name|externalStyles
expr_stmt|;
name|this
operator|.
name|currentStyle
operator|=
name|currentStyle
expr_stmt|;
block|}
DECL|method|clearCurrentStyle ()
specifier|public
name|void
name|clearCurrentStyle
parameter_list|()
block|{
name|this
operator|.
name|currentStyle
operator|=
literal|null
expr_stmt|;
comment|// TODO: sync to prefs
block|}
comment|/**      * path to soffice-file      */
DECL|method|getExecutablePath ()
specifier|public
name|String
name|getExecutablePath
parameter_list|()
block|{
return|return
name|executablePath
return|;
block|}
DECL|method|setExecutablePath (String executablePath)
specifier|public
name|void
name|setExecutablePath
parameter_list|(
name|String
name|executablePath
parameter_list|)
block|{
name|this
operator|.
name|executablePath
operator|=
name|executablePath
expr_stmt|;
block|}
comment|/**      * main directory for OO/LO installation, used to detect location on Win/OS X when using manual connect      */
DECL|method|getInstallationPath ()
specifier|public
name|String
name|getInstallationPath
parameter_list|()
block|{
return|return
name|installationPath
return|;
block|}
DECL|method|setInstallationPath (String installationPath)
specifier|public
name|void
name|setInstallationPath
parameter_list|(
name|String
name|installationPath
parameter_list|)
block|{
name|this
operator|.
name|installationPath
operator|=
name|installationPath
expr_stmt|;
block|}
comment|/**      * true if all databases should be used when citing      */
DECL|method|getUseAllDatabases ()
specifier|public
name|Boolean
name|getUseAllDatabases
parameter_list|()
block|{
return|return
name|useAllDatabases
return|;
block|}
DECL|method|setUseAllDatabases (Boolean useAllDatabases)
specifier|public
name|void
name|setUseAllDatabases
parameter_list|(
name|Boolean
name|useAllDatabases
parameter_list|)
block|{
name|this
operator|.
name|useAllDatabases
operator|=
name|useAllDatabases
expr_stmt|;
block|}
comment|/**      * true if the reference list is updated when adding a new citation      */
DECL|method|getSyncWhenCiting ()
specifier|public
name|Boolean
name|getSyncWhenCiting
parameter_list|()
block|{
return|return
name|syncWhenCiting
return|;
block|}
DECL|method|setSyncWhenCiting (Boolean syncWhenCiting)
specifier|public
name|void
name|setSyncWhenCiting
parameter_list|(
name|Boolean
name|syncWhenCiting
parameter_list|)
block|{
name|this
operator|.
name|syncWhenCiting
operator|=
name|syncWhenCiting
expr_stmt|;
block|}
comment|/**      * true if the OO panel is shown on startup      */
DECL|method|getShowPanel ()
specifier|public
name|Boolean
name|getShowPanel
parameter_list|()
block|{
return|return
name|showPanel
return|;
block|}
DECL|method|setShowPanel (Boolean showPanel)
specifier|public
name|void
name|setShowPanel
parameter_list|(
name|Boolean
name|showPanel
parameter_list|)
block|{
name|this
operator|.
name|showPanel
operator|=
name|showPanel
expr_stmt|;
block|}
comment|/**      * list with paths to external style files      */
DECL|method|getExternalStyles ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExternalStyles
parameter_list|()
block|{
return|return
name|externalStyles
return|;
block|}
DECL|method|setExternalStyles (List<String> externalStyles)
specifier|public
name|void
name|setExternalStyles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|externalStyles
parameter_list|)
block|{
name|this
operator|.
name|externalStyles
operator|=
name|externalStyles
expr_stmt|;
block|}
comment|/**      * path to the used style file      */
DECL|method|getCurrentStyle ()
specifier|public
name|String
name|getCurrentStyle
parameter_list|()
block|{
return|return
name|currentStyle
return|;
block|}
DECL|method|setCurrentStyle (String currentStyle)
specifier|public
name|void
name|setCurrentStyle
parameter_list|(
name|String
name|currentStyle
parameter_list|)
block|{
name|this
operator|.
name|currentStyle
operator|=
name|currentStyle
expr_stmt|;
block|}
comment|/**      * directory that contains juh.jar, jurt.jar, ridl.jar, unoil.jar      */
DECL|method|getJarsPath ()
specifier|public
name|String
name|getJarsPath
parameter_list|()
block|{
return|return
name|jarsPath
return|;
block|}
DECL|method|setJarsPath (String jarsPath)
specifier|public
name|void
name|setJarsPath
parameter_list|(
name|String
name|jarsPath
parameter_list|)
block|{
name|this
operator|.
name|jarsPath
operator|=
name|jarsPath
expr_stmt|;
block|}
DECL|method|updateConnectionParams (String ooPath, String execPath, String jarsPath)
specifier|public
name|void
name|updateConnectionParams
parameter_list|(
name|String
name|ooPath
parameter_list|,
name|String
name|execPath
parameter_list|,
name|String
name|jarsPath
parameter_list|)
block|{
name|setInstallationPath
argument_list|(
name|ooPath
argument_list|)
expr_stmt|;
name|setExecutablePath
argument_list|(
name|execPath
argument_list|)
expr_stmt|;
name|setJarsPath
argument_list|(
name|jarsPath
argument_list|)
expr_stmt|;
block|}
DECL|method|clearConnectionSettings ()
specifier|public
name|void
name|clearConnectionSettings
parameter_list|()
block|{
name|this
operator|.
name|installationPath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|executablePath
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|jarsPath
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

