begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2014, 2015, ControlsFX  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  * * Redistributions of source code must retain the above copyright  * notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above copyright  * notice, this list of conditions and the following disclaimer in the  * documentation and/or other materials provided with the distribution.  * * Neither the name of ControlsFX, any associated website, nor the  * names of its contributors may be used to endorse or promote products  * derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL CONTROLSFX BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
DECL|package|org.jabref.gui.autocompleter
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextInputControl
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|controlsfx
operator|.
name|control
operator|.
name|textfield
operator|.
name|AutoCompletionBinding
import|;
end_import

begin_comment
comment|/**  * Represents a binding between a text input control and a auto-completion popup  * This class is a slightly modified version of {@link impl.org.controlsfx.autocompletion.AutoCompletionTextFieldBinding}  * that works with general text input controls instead of just text fields.  * @param<T>  *  */
end_comment

begin_class
DECL|class|AutoCompletionTextInputBinding
specifier|public
class|class
name|AutoCompletionTextInputBinding
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AutoCompletionBinding
argument_list|<
name|T
argument_list|>
block|{
comment|/**      * String converter to be used to convert suggestions to strings.      */
DECL|field|converter
specifier|private
name|StringConverter
argument_list|<
name|T
argument_list|>
name|converter
decl_stmt|;
DECL|field|inputAnalyzer
specifier|private
name|AutoCompletionStrategy
name|inputAnalyzer
decl_stmt|;
DECL|field|textChangeListener
specifier|private
specifier|final
name|ChangeListener
argument_list|<
name|String
argument_list|>
name|textChangeListener
init|=
parameter_list|(
name|obs
parameter_list|,
name|oldText
parameter_list|,
name|newText
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|getCompletionTarget
argument_list|()
operator|.
name|isFocused
argument_list|()
condition|)
block|{
name|setUserInputText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|showOnFocus
specifier|private
name|boolean
name|showOnFocus
decl_stmt|;
DECL|field|focusChangedListener
specifier|private
specifier|final
name|ChangeListener
argument_list|<
name|Boolean
argument_list|>
name|focusChangedListener
init|=
parameter_list|(
name|obs
parameter_list|,
name|oldFocused
parameter_list|,
name|newFocused
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|newFocused
condition|)
block|{
if|if
condition|(
name|showOnFocus
condition|)
block|{
name|setUserInputText
argument_list|(
name|getCompletionTarget
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|hidePopup
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**      * Creates a new auto-completion binding between the given textInputControl      * and the given suggestion provider.      */
DECL|method|AutoCompletionTextInputBinding (final TextInputControl textInputControl, Callback<ISuggestionRequest, Collection<T>> suggestionProvider)
specifier|private
name|AutoCompletionTextInputBinding
parameter_list|(
specifier|final
name|TextInputControl
name|textInputControl
parameter_list|,
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|)
block|{
name|this
argument_list|(
name|textInputControl
argument_list|,
name|suggestionProvider
argument_list|,
name|AutoCompletionTextInputBinding
operator|.
name|defaultStringConverter
argument_list|()
argument_list|,
operator|new
name|ReplaceStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|AutoCompletionTextInputBinding (final TextInputControl textInputControl, final Callback<ISuggestionRequest, Collection<T>> suggestionProvider, final StringConverter<T> converter)
specifier|private
name|AutoCompletionTextInputBinding
parameter_list|(
specifier|final
name|TextInputControl
name|textInputControl
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|,
specifier|final
name|StringConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
name|this
argument_list|(
name|textInputControl
argument_list|,
name|suggestionProvider
argument_list|,
name|converter
argument_list|,
operator|new
name|ReplaceStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|AutoCompletionTextInputBinding (final TextInputControl textInputControl, final Callback<ISuggestionRequest, Collection<T>> suggestionProvider, final StringConverter<T> converter, final AutoCompletionStrategy inputAnalyzer)
specifier|private
name|AutoCompletionTextInputBinding
parameter_list|(
specifier|final
name|TextInputControl
name|textInputControl
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|,
specifier|final
name|StringConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|,
specifier|final
name|AutoCompletionStrategy
name|inputAnalyzer
parameter_list|)
block|{
name|super
argument_list|(
name|textInputControl
argument_list|,
name|suggestionProvider
argument_list|,
name|converter
argument_list|)
expr_stmt|;
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
name|this
operator|.
name|inputAnalyzer
operator|=
name|inputAnalyzer
expr_stmt|;
name|getCompletionTarget
argument_list|()
operator|.
name|textProperty
argument_list|()
operator|.
name|addListener
argument_list|(
name|textChangeListener
argument_list|)
expr_stmt|;
name|getCompletionTarget
argument_list|()
operator|.
name|focusedProperty
argument_list|()
operator|.
name|addListener
argument_list|(
name|focusChangedListener
argument_list|)
expr_stmt|;
block|}
DECL|method|defaultStringConverter ()
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|StringConverter
argument_list|<
name|T
argument_list|>
name|defaultStringConverter
parameter_list|()
block|{
return|return
operator|new
name|StringConverter
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|T
name|t
parameter_list|)
block|{
return|return
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|T
name|fromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|string
return|;
block|}
block|}
return|;
block|}
DECL|method|autoComplete (TextInputControl textArea, Callback<ISuggestionRequest, Collection<T>> suggestionProvider)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|autoComplete
parameter_list|(
name|TextInputControl
name|textArea
parameter_list|,
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|)
block|{
operator|new
name|AutoCompletionTextInputBinding
argument_list|<>
argument_list|(
name|textArea
argument_list|,
name|suggestionProvider
argument_list|)
expr_stmt|;
block|}
DECL|method|autoComplete (TextInputControl textArea, Callback<ISuggestionRequest, Collection<T>> suggestionProvider, StringConverter<T> converter)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|autoComplete
parameter_list|(
name|TextInputControl
name|textArea
parameter_list|,
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|,
name|StringConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|)
block|{
operator|new
name|AutoCompletionTextInputBinding
argument_list|<>
argument_list|(
name|textArea
argument_list|,
name|suggestionProvider
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
DECL|method|autoComplete (TextInputControl textArea, Callback<ISuggestionRequest, Collection<T>> suggestionProvider, StringConverter<T> converter, AutoCompletionStrategy inputAnalyzer)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|AutoCompletionTextInputBinding
argument_list|<
name|T
argument_list|>
name|autoComplete
parameter_list|(
name|TextInputControl
name|textArea
parameter_list|,
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|,
name|StringConverter
argument_list|<
name|T
argument_list|>
name|converter
parameter_list|,
name|AutoCompletionStrategy
name|inputAnalyzer
parameter_list|)
block|{
return|return
operator|new
name|AutoCompletionTextInputBinding
argument_list|<>
argument_list|(
name|textArea
argument_list|,
name|suggestionProvider
argument_list|,
name|converter
argument_list|,
name|inputAnalyzer
argument_list|)
return|;
block|}
DECL|method|autoComplete (TextInputControl textArea, Callback<ISuggestionRequest, Collection<T>> suggestionProvider, AutoCompletionStrategy inputAnalyzer)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|AutoCompletionTextInputBinding
argument_list|<
name|T
argument_list|>
name|autoComplete
parameter_list|(
name|TextInputControl
name|textArea
parameter_list|,
name|Callback
argument_list|<
name|ISuggestionRequest
argument_list|,
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|suggestionProvider
parameter_list|,
name|AutoCompletionStrategy
name|inputAnalyzer
parameter_list|)
block|{
return|return
name|autoComplete
argument_list|(
name|textArea
argument_list|,
name|suggestionProvider
argument_list|,
name|AutoCompletionTextInputBinding
operator|.
name|defaultStringConverter
argument_list|()
argument_list|,
name|inputAnalyzer
argument_list|)
return|;
block|}
DECL|method|setUserInputText (String newText)
specifier|private
name|void
name|setUserInputText
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
if|if
condition|(
name|newText
operator|==
literal|null
condition|)
block|{
name|newText
operator|=
literal|""
expr_stmt|;
block|}
name|AutoCompletionInput
name|input
init|=
name|inputAnalyzer
operator|.
name|analyze
argument_list|(
name|newText
argument_list|)
decl_stmt|;
name|setUserInput
argument_list|(
name|input
operator|.
name|getUnfinishedPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCompletionTarget ()
specifier|public
name|TextInputControl
name|getCompletionTarget
parameter_list|()
block|{
return|return
operator|(
name|TextInputControl
operator|)
name|super
operator|.
name|getCompletionTarget
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|getCompletionTarget
argument_list|()
operator|.
name|textProperty
argument_list|()
operator|.
name|removeListener
argument_list|(
name|textChangeListener
argument_list|)
expr_stmt|;
name|getCompletionTarget
argument_list|()
operator|.
name|focusedProperty
argument_list|()
operator|.
name|removeListener
argument_list|(
name|focusChangedListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|completeUserInput (T completion)
specifier|protected
name|void
name|completeUserInput
parameter_list|(
name|T
name|completion
parameter_list|)
block|{
name|String
name|completionText
init|=
name|converter
operator|.
name|toString
argument_list|(
name|completion
argument_list|)
decl_stmt|;
name|String
name|inputText
init|=
name|getCompletionTarget
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputText
operator|==
literal|null
condition|)
block|{
name|inputText
operator|=
literal|""
expr_stmt|;
block|}
name|AutoCompletionInput
name|input
init|=
name|inputAnalyzer
operator|.
name|analyze
argument_list|(
name|inputText
argument_list|)
decl_stmt|;
name|String
name|newText
init|=
name|input
operator|.
name|getPrefix
argument_list|()
operator|+
name|completionText
decl_stmt|;
name|getCompletionTarget
argument_list|()
operator|.
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
name|getCompletionTarget
argument_list|()
operator|.
name|positionCaret
argument_list|(
name|newText
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setShowOnFocus (boolean showOnFocus)
specifier|public
name|void
name|setShowOnFocus
parameter_list|(
name|boolean
name|showOnFocus
parameter_list|)
block|{
name|this
operator|.
name|showOnFocus
operator|=
name|showOnFocus
expr_stmt|;
block|}
block|}
end_class

end_unit

