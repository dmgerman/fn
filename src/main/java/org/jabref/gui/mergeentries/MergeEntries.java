begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.mergeentries
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ComboBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToggleGroup
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|ColumnConstraints
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|TextFlow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ViewModelListCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|DiffHighlightingTextPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|formatter
operator|.
name|casechanger
operator|.
name|SentenceCaseFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_class
DECL|class|MergeEntries
specifier|public
class|class
name|MergeEntries
extends|extends
name|BorderPane
block|{
DECL|field|diffMode
specifier|private
specifier|final
name|ComboBox
argument_list|<
name|DiffMode
argument_list|>
name|diffMode
init|=
operator|new
name|ComboBox
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Headings
DECL|field|columnHeadings
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnHeadings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Left entry"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Left"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"None"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Right"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Right entry"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|identicalFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|identicalFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|differentFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|differentFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mergedEntry
specifier|private
specifier|final
name|BibEntry
name|mergedEntry
init|=
operator|new
name|BibEntry
argument_list|()
decl_stmt|;
DECL|field|leftEntry
specifier|private
specifier|final
name|BibEntry
name|leftEntry
decl_stmt|;
DECL|field|rightEntry
specifier|private
specifier|final
name|BibEntry
name|rightEntry
decl_stmt|;
DECL|field|leftTextPanes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TextFlow
argument_list|>
name|leftTextPanes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|allFields
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rightTextPanes
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TextFlow
argument_list|>
name|rightTextPanes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|radioButtons
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RadioButton
argument_list|>
argument_list|>
name|radioButtons
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|identicalTypes
specifier|private
name|Boolean
name|identicalTypes
decl_stmt|;
DECL|field|typeRadioButtons
specifier|private
name|List
argument_list|<
name|RadioButton
argument_list|>
name|typeRadioButtons
decl_stmt|;
comment|/**      * Constructor with optional column captions for the two entries      *      * @param entryLeft    Left entry      * @param entryRight   Right entry      * @param headingLeft  Heading for left entry      * @param headingRight Heading for right entry      * @param type         Bib database mode      */
DECL|method|MergeEntries (BibEntry entryLeft, BibEntry entryRight, String headingLeft, String headingRight, BibDatabaseMode type)
specifier|public
name|MergeEntries
parameter_list|(
name|BibEntry
name|entryLeft
parameter_list|,
name|BibEntry
name|entryRight
parameter_list|,
name|String
name|headingLeft
parameter_list|,
name|String
name|headingRight
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
block|{
name|this
operator|.
name|leftEntry
operator|=
name|entryLeft
expr_stmt|;
name|this
operator|.
name|rightEntry
operator|=
name|entryRight
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
name|setLeftHeaderText
argument_list|(
name|headingLeft
argument_list|)
expr_stmt|;
name|setRightHeaderText
argument_list|(
name|headingRight
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor taking two entries      *      * @param entryLeft Left entry      * @param entryRight Right entry      * @param type Bib database mode      */
DECL|method|MergeEntries (BibEntry entryLeft, BibEntry entryRight, BibDatabaseMode type)
specifier|public
name|MergeEntries
parameter_list|(
name|BibEntry
name|entryLeft
parameter_list|,
name|BibEntry
name|entryRight
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
block|{
name|leftEntry
operator|=
name|entryLeft
expr_stmt|;
name|rightEntry
operator|=
name|entryRight
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
DECL|method|getDisplayText (DiffMode mode)
specifier|private
specifier|static
name|String
name|getDisplayText
parameter_list|(
name|DiffMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|PLAIN
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Plain text"
argument_list|)
return|;
case|case
name|WORD
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"word"
argument_list|)
return|;
case|case
name|CHARACTER
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"character"
argument_list|)
return|;
case|case
name|WORD_SYMMETRIC
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show symmetric diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"word"
argument_list|)
return|;
case|case
name|CHARACTER_SYMMETRIC
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show symmetric diff"
argument_list|)
operator|+
literal|" - "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"character"
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented: "
operator|+
name|mode
argument_list|)
throw|;
block|}
block|}
comment|/**      * Main function for building the merge entry JPanel      */
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|setPrefWidth
argument_list|(
literal|800
argument_list|)
expr_stmt|;
name|setupFields
argument_list|()
expr_stmt|;
name|fillDiffModes
argument_list|()
expr_stmt|;
name|GridPane
name|mergePanel
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
name|mergePanel
operator|.
name|setVgap
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|setHgap
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|ColumnConstraints
name|columnLabel
init|=
operator|new
name|ColumnConstraints
argument_list|()
decl_stmt|;
name|columnLabel
operator|.
name|setHgrow
argument_list|(
name|Priority
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|ColumnConstraints
name|columnValues
init|=
operator|new
name|ColumnConstraints
argument_list|()
decl_stmt|;
name|columnValues
operator|.
name|setHgrow
argument_list|(
name|Priority
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|columnValues
operator|.
name|setPercentWidth
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|ColumnConstraints
name|columnSelect
init|=
operator|new
name|ColumnConstraints
argument_list|()
decl_stmt|;
name|columnSelect
operator|.
name|setHgrow
argument_list|(
name|Priority
operator|.
name|NEVER
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|getColumnConstraints
argument_list|()
operator|.
name|setAll
argument_list|(
name|columnLabel
argument_list|,
name|columnValues
argument_list|,
name|columnSelect
argument_list|,
name|columnSelect
argument_list|,
name|columnSelect
argument_list|,
name|columnValues
argument_list|)
expr_stmt|;
name|setupHeadingRows
argument_list|(
name|mergePanel
argument_list|)
expr_stmt|;
name|setupEntryTypeRow
argument_list|(
name|mergePanel
argument_list|)
expr_stmt|;
name|setupFieldRows
argument_list|(
name|mergePanel
argument_list|)
expr_stmt|;
name|ScrollPane
name|scrollPane
init|=
operator|new
name|ScrollPane
argument_list|(
name|mergePanel
argument_list|)
decl_stmt|;
name|scrollPane
operator|.
name|setFitToWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setCenter
argument_list|(
name|scrollPane
argument_list|)
expr_stmt|;
name|updateFieldValues
argument_list|(
name|allFields
argument_list|)
expr_stmt|;
name|updateMergedEntry
argument_list|()
expr_stmt|;
name|getStylesheets
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|MergeEntries
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"MergeEntries.css"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupFieldRows (GridPane mergePanel)
specifier|private
name|void
name|setupFieldRows
parameter_list|(
name|GridPane
name|mergePanel
parameter_list|)
block|{
comment|// For all fields in joint add a row and possibly radio buttons
name|int
name|row
init|=
literal|2
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|allFields
control|)
block|{
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
operator|new
name|SentenceCaseFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|field
argument_list|)
argument_list|)
decl_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|label
argument_list|,
literal|0
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|leftString
init|=
name|leftEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|rightString
init|=
name|rightEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftString
operator|.
name|equals
argument_list|(
name|rightString
argument_list|)
condition|)
block|{
name|identicalFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|differentFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Left text pane
if|if
condition|(
name|leftString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|TextFlow
name|tf
init|=
operator|new
name|DiffHighlightingTextPane
argument_list|()
decl_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|tf
argument_list|,
literal|1
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|leftTextPanes
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
comment|// Add radio buttons if the two entries do not have identical fields
if|if
condition|(
name|identicalFields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|mergedEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|leftString
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will only happen if both entries have the field and the content is identical
block|}
else|else
block|{
name|ToggleGroup
name|group
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RadioButton
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|++
control|)
block|{
name|RadioButton
name|button
init|=
operator|new
name|RadioButton
argument_list|()
decl_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|button
operator|.
name|selectedProperty
argument_list|()
argument_list|,
name|selected
lambda|->
name|updateMergedEntry
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|getToggles
argument_list|()
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|button
argument_list|,
literal|2
operator|+
name|k
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
name|radioButtons
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|list
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rightString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Right text pane
if|if
condition|(
name|rightString
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|TextFlow
name|tf
init|=
operator|new
name|DiffHighlightingTextPane
argument_list|()
decl_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|tf
argument_list|,
literal|5
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|rightTextPanes
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
name|row
operator|++
expr_stmt|;
block|}
block|}
DECL|method|setupEntryTypeRow (GridPane mergePanel)
specifier|private
name|void
name|setupEntryTypeRow
parameter_list|(
name|GridPane
name|mergePanel
parameter_list|)
block|{
comment|// Start with entry type
name|mergePanel
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry type"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftEntry
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|rightEntry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|mergePanel
operator|.
name|add
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
name|leftEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
name|rightEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|identicalTypes
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mergePanel
operator|.
name|add
argument_list|(
name|DiffHighlighting
operator|.
name|forChanged
argument_list|(
name|leftEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|DiffHighlighting
operator|.
name|forChanged
argument_list|(
name|rightEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|identicalTypes
operator|=
literal|false
expr_stmt|;
name|ToggleGroup
name|group
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|typeRadioButtons
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|3
condition|;
name|k
operator|+=
literal|2
control|)
block|{
name|RadioButton
name|button
init|=
operator|new
name|RadioButton
argument_list|()
decl_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|button
operator|.
name|selectedProperty
argument_list|()
argument_list|,
name|selected
lambda|->
name|updateMergedEntry
argument_list|()
argument_list|)
expr_stmt|;
name|typeRadioButtons
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|group
operator|.
name|getToggles
argument_list|()
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|mergePanel
operator|.
name|add
argument_list|(
name|button
argument_list|,
literal|2
operator|+
name|k
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|typeRadioButtons
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupHeadingRows (GridPane mergePanel)
specifier|private
name|void
name|setupHeadingRows
parameter_list|(
name|GridPane
name|mergePanel
parameter_list|)
block|{
comment|// Set headings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|mergePanel
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|columnHeadings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fillDiffModes ()
specifier|private
name|void
name|fillDiffModes
parameter_list|()
block|{
name|diffMode
operator|.
name|setItems
argument_list|(
name|FXCollections
operator|.
name|observableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DiffMode
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ViewModelListCellFactory
argument_list|<
name|DiffMode
argument_list|>
argument_list|()
operator|.
name|withText
argument_list|(
name|MergeEntries
operator|::
name|getDisplayText
argument_list|)
operator|.
name|install
argument_list|(
name|diffMode
argument_list|)
expr_stmt|;
name|DiffMode
name|diffModePref
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAsOptional
argument_list|(
name|JabRefPreferences
operator|.
name|MERGE_ENTRIES_DIFF_MODE
argument_list|)
operator|.
name|flatMap
argument_list|(
name|DiffMode
operator|::
name|parse
argument_list|)
operator|.
name|orElse
argument_list|(
name|DiffMode
operator|.
name|WORD
argument_list|)
decl_stmt|;
name|diffMode
operator|.
name|setValue
argument_list|(
name|diffModePref
argument_list|)
expr_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|this
operator|.
name|diffMode
operator|.
name|valueProperty
argument_list|()
argument_list|,
name|mode
lambda|->
block|{
name|updateFieldValues
argument_list|(
name|differentFields
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|MERGE_ENTRIES_DIFF_MODE
argument_list|,
name|mode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|HBox
name|heading
init|=
operator|new
name|HBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|heading
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|this
operator|.
name|diffMode
argument_list|)
expr_stmt|;
name|setTop
argument_list|(
name|heading
argument_list|)
expr_stmt|;
name|BorderPane
operator|.
name|setMargin
argument_list|(
name|heading
argument_list|,
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupFields ()
specifier|private
name|void
name|setupFields
parameter_list|()
block|{
name|allFields
operator|.
name|addAll
argument_list|(
name|leftEntry
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|rightEntry
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do not show internal fields
name|Set
argument_list|<
name|String
argument_list|>
name|internalFields
init|=
name|allFields
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|InternalBibtexFields
operator|::
name|isInternalField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|allFields
operator|.
name|removeAll
argument_list|(
name|internalFields
argument_list|)
expr_stmt|;
block|}
DECL|method|updateFieldValues (Collection<String> fields)
specifier|private
name|void
name|updateFieldValues
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|String
name|leftString
init|=
name|leftEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|rightString
init|=
name|rightEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|leftText
init|=
name|leftString
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
name|leftString
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|rightText
init|=
name|rightString
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Collections
operator|.
name|singletonList
argument_list|(
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
name|rightString
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|diffMode
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|PLAIN
case|:
break|break;
case|case
name|WORD
case|:
name|rightText
operator|=
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTER
case|:
name|rightText
operator|=
name|DiffHighlighting
operator|.
name|generateDiffHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
break|break;
case|case
name|WORD_SYMMETRIC
case|:
name|leftText
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|rightText
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|rightString
argument_list|,
name|leftString
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHARACTER_SYMMETRIC
case|:
name|leftText
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rightText
operator|=
name|DiffHighlighting
operator|.
name|generateSymmetricHighlighting
argument_list|(
name|rightString
argument_list|,
name|leftString
argument_list|,
literal|""
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented "
operator|+
name|diffMode
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|leftText
operator|.
name|isEmpty
argument_list|()
operator|&&
name|leftTextPanes
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|leftTextPanes
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|leftText
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rightText
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rightTextPanes
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|rightTextPanes
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|rightText
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return Merged BibEntry      */
DECL|method|getMergeEntry ()
specifier|public
name|BibEntry
name|getMergeEntry
parameter_list|()
block|{
return|return
name|mergedEntry
return|;
block|}
comment|/**      * Update the merged entry      */
DECL|method|updateMergedEntry ()
specifier|private
name|void
name|updateMergedEntry
parameter_list|()
block|{
comment|// Check if the type has changed
if|if
condition|(
operator|!
name|identicalTypes
operator|&&
operator|!
name|typeRadioButtons
operator|.
name|isEmpty
argument_list|()
operator|&&
name|typeRadioButtons
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|mergedEntry
operator|.
name|setType
argument_list|(
name|leftEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergedEntry
operator|.
name|setType
argument_list|(
name|rightEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the potentially different fields
for|for
control|(
name|String
name|field
range|:
name|differentFields
control|)
block|{
if|if
condition|(
operator|!
name|radioButtons
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
comment|// May happen during initialization -> just ignore
continue|continue;
block|}
if|if
condition|(
name|radioButtons
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|mergedEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|leftEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will only happen if field exists
block|}
elseif|else
if|if
condition|(
name|radioButtons
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|mergedEntry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|rightEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will only happen if field exists
block|}
else|else
block|{
name|mergedEntry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setLeftHeaderText (String leftHeaderText)
specifier|public
name|void
name|setLeftHeaderText
parameter_list|(
name|String
name|leftHeaderText
parameter_list|)
block|{
name|columnHeadings
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|leftHeaderText
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
DECL|method|setRightHeaderText (String rightHeaderText)
specifier|public
name|void
name|setRightHeaderText
parameter_list|(
name|String
name|rightHeaderText
parameter_list|)
block|{
name|columnHeadings
operator|.
name|set
argument_list|(
literal|5
argument_list|,
name|rightHeaderText
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
DECL|enum|DiffMode
specifier|public
enum|enum
name|DiffMode
block|{
DECL|enumConstant|PLAIN
name|PLAIN
block|,
DECL|enumConstant|WORD
name|WORD
block|,
DECL|enumConstant|CHARACTER
name|CHARACTER
block|,
DECL|enumConstant|WORD_SYMMETRIC
name|WORD_SYMMETRIC
block|,
DECL|enumConstant|CHARACTER_SYMMETRIC
name|CHARACTER_SYMMETRIC
block|;
DECL|method|parse (String name)
specifier|public
specifier|static
name|Optional
argument_list|<
name|DiffMode
argument_list|>
name|parse
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|DiffMode
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

