begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.mergeentries
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|difflib
operator|.
name|DiffUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|difflib
operator|.
name|algorithm
operator|.
name|DiffException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|difflib
operator|.
name|patch
operator|.
name|AbstractDelta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DiffHighlighting
specifier|public
class|class
name|DiffHighlighting
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DiffHighlighting
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DiffHighlighting ()
specifier|private
name|DiffHighlighting
parameter_list|()
block|{     }
DECL|method|generateDiffHighlighting (String baseString, String modifiedString, String separator)
specifier|public
specifier|static
name|List
argument_list|<
name|Text
argument_list|>
name|generateDiffHighlighting
parameter_list|(
name|String
name|baseString
parameter_list|,
name|String
name|modifiedString
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|baseString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|result
init|=
name|stringList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DiffHighlighting
operator|::
name|forUnchanged
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AbstractDelta
argument_list|<
name|String
argument_list|>
argument_list|>
name|deltaList
decl_stmt|;
try|try
block|{
name|deltaList
operator|=
name|DiffUtils
operator|.
name|diff
argument_list|(
name|stringList
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|modifiedString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDeltas
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiffException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while generating diff of "
operator|+
name|baseString
operator|+
literal|" and "
operator|+
name|modifiedString
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|deltaList
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractDelta
argument_list|<
name|String
argument_list|>
name|delta
range|:
name|deltaList
control|)
block|{
name|int
name|startPos
init|=
name|delta
operator|.
name|getSource
argument_list|()
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|delta
operator|.
name|getSource
argument_list|()
operator|.
name|getLines
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|delta
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CHANGE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
name|forRemoved
argument_list|(
name|line
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
name|result
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
operator|-
literal|1
argument_list|,
name|forRemoved
argument_list|(
name|stringList
operator|.
name|get
argument_list|(
operator|(
name|startPos
operator|+
name|offset
operator|)
operator|-
literal|1
argument_list|)
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
name|forAdded
argument_list|(
name|String
operator|.
name|join
argument_list|(
name|separator
argument_list|,
name|delta
operator|.
name|getTarget
argument_list|()
operator|.
name|getLines
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
name|forRemoved
argument_list|(
name|line
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
break|break;
case|case
name|INSERT
case|:
name|result
operator|.
name|add
argument_list|(
name|delta
operator|.
name|getSource
argument_list|()
operator|.
name|getPosition
argument_list|()
argument_list|,
name|forAdded
argument_list|(
name|String
operator|.
name|join
argument_list|(
name|separator
argument_list|,
name|delta
operator|.
name|getTarget
argument_list|()
operator|.
name|getLines
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|forChanged (String text)
specifier|public
specifier|static
name|Text
name|forChanged
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Text
name|node
init|=
operator|new
name|Text
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|node
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-changed"
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|forUnchanged (String text)
specifier|public
specifier|static
name|Text
name|forUnchanged
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Text
name|node
init|=
operator|new
name|Text
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|node
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-unchanged"
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|forAdded (String text)
specifier|public
specifier|static
name|Text
name|forAdded
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Text
name|node
init|=
operator|new
name|Text
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|node
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-added"
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|forRemoved (String text)
specifier|public
specifier|static
name|Text
name|forRemoved
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Text
name|node
init|=
operator|new
name|Text
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|node
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-removed"
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|generateSymmetricHighlighting (String baseString, String modifiedString, String separator)
specifier|public
specifier|static
name|List
argument_list|<
name|Text
argument_list|>
name|generateSymmetricHighlighting
parameter_list|(
name|String
name|baseString
parameter_list|,
name|String
name|modifiedString
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|baseString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Text
argument_list|>
name|result
init|=
name|stringList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|text
lambda|->
name|DiffHighlighting
operator|.
name|forUnchanged
argument_list|(
name|text
operator|+
name|separator
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AbstractDelta
argument_list|<
name|String
argument_list|>
argument_list|>
name|deltaList
decl_stmt|;
try|try
block|{
name|deltaList
operator|=
name|DiffUtils
operator|.
name|diff
argument_list|(
name|stringList
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|modifiedString
operator|.
name|split
argument_list|(
name|separator
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getDeltas
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DiffException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while generating diff of "
operator|+
name|baseString
operator|+
literal|" and "
operator|+
name|modifiedString
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|deltaList
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractDelta
argument_list|<
name|String
argument_list|>
name|delta
range|:
name|deltaList
control|)
block|{
name|int
name|startPos
init|=
name|delta
operator|.
name|getSource
argument_list|()
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|delta
operator|.
name|getSource
argument_list|()
operator|.
name|getLines
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|delta
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CHANGE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
name|forChanged
argument_list|(
name|line
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
break|break;
case|case
name|DELETE
case|:
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|startPos
operator|+
name|offset
argument_list|,
name|forAdded
argument_list|(
name|line
operator|+
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
break|break;
case|case
name|INSERT
case|:
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

