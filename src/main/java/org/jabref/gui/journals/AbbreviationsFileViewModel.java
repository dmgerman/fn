begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.journals
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ReadOnlyBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|Abbreviation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|AbbreviationWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_comment
comment|/**  * This class provides a model for abbreviation files.  * It actually doesn't save the files as objects but rather saves  * their paths. This also allows to specify pseudo files as placeholder objects.  */
end_comment

begin_class
DECL|class|AbbreviationsFileViewModel
specifier|public
class|class
name|AbbreviationsFileViewModel
block|{
DECL|field|abbreviations
specifier|private
specifier|final
name|SimpleListProperty
argument_list|<
name|AbbreviationViewModel
argument_list|>
name|abbreviations
init|=
operator|new
name|SimpleListProperty
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|isBuiltInList
specifier|private
specifier|final
name|ReadOnlyBooleanProperty
name|isBuiltInList
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|path
decl_stmt|;
DECL|method|AbbreviationsFileViewModel (Path filePath)
specifier|public
name|AbbreviationsFileViewModel
parameter_list|(
name|Path
name|filePath
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|path
operator|.
name|get
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|isBuiltInList
operator|=
operator|new
name|SimpleBooleanProperty
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|abbreviations
operator|.
name|add
argument_list|(
operator|new
name|AbbreviationViewModel
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This constructor should only be called to create a pseudo abbreviation file for built in lists.      * This means it is a placeholder and it's path will be null meaning it has no place on the filesystem.      * It's isPseudoFile property will therefore be set to true.      */
DECL|method|AbbreviationsFileViewModel (List<AbbreviationViewModel> abbreviations, String name)
specifier|public
name|AbbreviationsFileViewModel
parameter_list|(
name|List
argument_list|<
name|AbbreviationViewModel
argument_list|>
name|abbreviations
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|abbreviations
operator|.
name|addAll
argument_list|(
name|abbreviations
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|this
operator|.
name|isBuiltInList
operator|=
operator|new
name|SimpleBooleanProperty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|readAbbreviations ()
specifier|public
name|void
name|readAbbreviations
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|path
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Abbreviation
argument_list|>
name|abbreviationList
init|=
name|JournalAbbreviationLoader
operator|.
name|readJournalListFromFile
argument_list|(
name|path
operator|.
name|get
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|abbreviationList
operator|.
name|forEach
argument_list|(
name|abbreviation
lambda|->
name|abbreviations
operator|.
name|addAll
argument_list|(
operator|new
name|AbbreviationViewModel
argument_list|(
name|abbreviation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|()
throw|;
block|}
block|}
comment|/**      * This method will write all abbreviations of this abbreviation file to the file on the file system.      * It essentially will check if the current file is a built in list and if not it will call      * {@link AbbreviationWriter#writeOrCreate()}.      */
DECL|method|writeOrCreate ()
specifier|public
name|void
name|writeOrCreate
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isBuiltInList
operator|.
name|get
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Abbreviation
argument_list|>
name|actualAbbreviations
init|=
name|abbreviations
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|abb
lambda|->
operator|!
name|abb
operator|.
name|isPseudoAbbreviation
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|abb
lambda|->
name|abb
operator|.
name|getAbbreviationObject
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|AbbreviationWriter
operator|.
name|writeOrCreate
argument_list|(
name|path
operator|.
name|get
argument_list|()
argument_list|,
name|actualAbbreviations
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abbreviationsProperty ()
specifier|public
name|SimpleListProperty
argument_list|<
name|AbbreviationViewModel
argument_list|>
name|abbreviationsProperty
parameter_list|()
block|{
return|return
name|this
operator|.
name|abbreviations
return|;
block|}
DECL|method|exists ()
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|path
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|path
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getAbsolutePath ()
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|getAbsolutePath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|isBuiltInListProperty ()
specifier|public
name|ReadOnlyBooleanProperty
name|isBuiltInListProperty
parameter_list|()
block|{
return|return
name|this
operator|.
name|isBuiltInList
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|AbbreviationsFileViewModel
condition|)
block|{
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|,
operator|(
operator|(
name|AbbreviationsFileViewModel
operator|)
name|obj
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

