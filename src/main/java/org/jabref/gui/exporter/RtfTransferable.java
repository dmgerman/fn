begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.exporter
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|RtfTransferable
specifier|public
class|class
name|RtfTransferable
implements|implements
name|Transferable
block|{
DECL|field|RTF_FLAVOR
specifier|private
specifier|static
specifier|final
name|DataFlavor
name|RTF_FLAVOR
init|=
operator|new
name|DataFlavor
argument_list|(
literal|"text/rtf; class=java.io.InputStream"
argument_list|,
literal|"RTF Format"
argument_list|)
decl_stmt|;
DECL|field|TEXT_FLAVOR
specifier|private
specifier|static
specifier|final
name|DataFlavor
name|TEXT_FLAVOR
init|=
name|DataFlavor
operator|.
name|stringFlavor
decl_stmt|;
DECL|field|ALL_FLAVORS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|DataFlavor
argument_list|>
name|ALL_FLAVORS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RTF_FLAVOR
argument_list|,
name|TEXT_FLAVOR
argument_list|)
decl_stmt|;
DECL|field|rtfText
specifier|private
specifier|final
name|String
name|rtfText
decl_stmt|;
DECL|field|plainText
specifier|private
specifier|final
name|String
name|plainText
decl_stmt|;
DECL|method|RtfTransferable (String text)
specifier|public
name|RtfTransferable
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|rtfText
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|plainText
operator|=
name|text
expr_stmt|;
block|}
DECL|method|RtfTransferable (String rtfText, String plainText)
specifier|public
name|RtfTransferable
parameter_list|(
name|String
name|rtfText
parameter_list|,
name|String
name|plainText
parameter_list|)
block|{
name|this
operator|.
name|rtfText
operator|=
name|rtfText
expr_stmt|;
name|this
operator|.
name|plainText
operator|=
name|plainText
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTransferDataFlavors ()
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
name|ALL_FLAVORS
operator|.
name|toArray
argument_list|(
operator|new
name|DataFlavor
index|[
name|ALL_FLAVORS
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDataFlavorSupported (DataFlavor flavor)
specifier|public
name|boolean
name|isDataFlavorSupported
parameter_list|(
name|DataFlavor
name|flavor
parameter_list|)
block|{
return|return
name|ALL_FLAVORS
operator|.
name|parallelStream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|flavor
operator|::
name|equals
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTransferData (DataFlavor flavor)
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|flavor
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
if|if
condition|(
name|flavor
operator|.
name|equals
argument_list|(
name|RTF_FLAVOR
argument_list|)
condition|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|rtfText
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|flavor
operator|.
name|equals
argument_list|(
name|TEXT_FLAVOR
argument_list|)
condition|)
block|{
return|return
name|plainText
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedFlavorException
argument_list|(
name|flavor
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

