begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.protectedterms
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|protectedterms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|StandardFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|OptionalUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreferencesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ManageProtectedTermsViewModel
specifier|public
class|class
name|ManageProtectedTermsViewModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManageProtectedTermsViewModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|termsLoader
specifier|private
specifier|final
name|ProtectedTermsLoader
name|termsLoader
decl_stmt|;
DECL|field|termsFiles
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|ProtectedTermsList
argument_list|>
name|termsFiles
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|PreferencesService
name|preferences
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|method|ManageProtectedTermsViewModel (ProtectedTermsLoader termsLoader, DialogService dialogService, PreferencesService preferences)
specifier|public
name|ManageProtectedTermsViewModel
parameter_list|(
name|ProtectedTermsLoader
name|termsLoader
parameter_list|,
name|DialogService
name|dialogService
parameter_list|,
name|PreferencesService
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|termsLoader
operator|=
name|termsLoader
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|this
operator|.
name|termsFiles
operator|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|termsLoader
operator|.
name|getProtectedTermsLists
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
block|}
DECL|method|getTermsFiles ()
specifier|public
name|ObservableList
argument_list|<
name|ProtectedTermsList
argument_list|>
name|getTermsFiles
parameter_list|()
block|{
return|return
name|termsFiles
return|;
block|}
DECL|method|save ()
specifier|public
name|void
name|save
parameter_list|()
block|{
name|preferences
operator|.
name|setProtectedTermsPreferences
argument_list|(
name|termsLoader
argument_list|)
expr_stmt|;
block|}
DECL|method|addFile ()
specifier|public
name|void
name|addFile
parameter_list|()
block|{
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|addExtensionFilter
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Protected terms file"
argument_list|)
argument_list|,
name|StandardFileType
operator|.
name|TERMS
argument_list|)
operator|.
name|withDefaultExtension
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Protected terms file"
argument_list|)
argument_list|,
name|StandardFileType
operator|.
name|TERMS
argument_list|)
operator|.
name|withInitialDirectory
argument_list|(
name|preferences
operator|.
name|getWorkingDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dialogService
operator|.
name|showFileOpenDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|file
lambda|->
name|termsLoader
operator|.
name|addProtectedTermsListFromFile
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFile (ProtectedTermsList list)
specifier|public
name|void
name|removeFile
parameter_list|(
name|ProtectedTermsList
name|list
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|isInternalList
argument_list|()
operator|&&
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove protected terms file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Are you sure you want to remove the protected terms file?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove protected terms file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|termsLoader
operator|.
name|removeProtectedTermsList
argument_list|(
name|list
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Problem removing protected terms file"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createNewFile ()
specifier|public
name|void
name|createNewFile
parameter_list|()
block|{
name|NewProtectedTermsFileDialog
name|newDialog
init|=
operator|new
name|NewProtectedTermsFileDialog
argument_list|(
name|termsLoader
argument_list|,
name|dialogService
argument_list|)
decl_stmt|;
name|newDialog
operator|.
name|showAndWait
argument_list|()
expr_stmt|;
block|}
DECL|method|edit (ProtectedTermsList file)
specifier|public
name|void
name|edit
parameter_list|(
name|ProtectedTermsList
name|file
parameter_list|)
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|termsFileType
init|=
name|OptionalUtil
operator|.
expr|<
name|ExternalFileType
operator|>
name|orElse
argument_list|(
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByExt
argument_list|(
literal|"terms"
argument_list|)
argument_list|,
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByExt
argument_list|(
literal|"txt"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|file
operator|.
name|getLocation
argument_list|()
decl_stmt|;
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
operator|new
name|BibDatabaseContext
argument_list|()
argument_list|,
name|fileName
argument_list|,
name|termsFileType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem open protected terms file editor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|displayContent (ProtectedTermsList list)
specifier|public
name|void
name|displayContent
parameter_list|(
name|ProtectedTermsList
name|list
parameter_list|)
block|{
name|dialogService
operator|.
name|showInformationDialogAndWait
argument_list|(
name|list
operator|.
name|getDescription
argument_list|()
operator|+
literal|" - "
operator|+
name|list
operator|.
name|getLocation
argument_list|()
argument_list|,
name|list
operator|.
name|getTermListing
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|reloadFile (ProtectedTermsList file)
specifier|public
name|void
name|reloadFile
parameter_list|(
name|ProtectedTermsList
name|file
parameter_list|)
block|{
name|termsLoader
operator|.
name|reloadProtectedTermsList
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

