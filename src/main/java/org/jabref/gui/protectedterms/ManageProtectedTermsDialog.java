begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.protectedterms
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|protectedterms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ContextMenu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|CheckBoxTableCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BaseDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BindingsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ValueTableCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ViewModelTableRowFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|protectedterms
operator|.
name|ProtectedTermsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreferencesService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|airhacks
operator|.
name|afterburner
operator|.
name|views
operator|.
name|ViewLoader
import|;
end_import

begin_comment
comment|/**  * Dialog for managing term list files.  */
end_comment

begin_class
DECL|class|ManageProtectedTermsDialog
specifier|public
class|class
name|ManageProtectedTermsDialog
extends|extends
name|BaseDialog
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|filesTable
annotation|@
name|FXML
specifier|private
name|TableView
argument_list|<
name|ProtectedTermsList
argument_list|>
name|filesTable
decl_stmt|;
DECL|field|filesTableEnabledColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|ProtectedTermsList
argument_list|,
name|Boolean
argument_list|>
name|filesTableEnabledColumn
decl_stmt|;
DECL|field|filesTableDescriptionColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|ProtectedTermsList
argument_list|,
name|String
argument_list|>
name|filesTableDescriptionColumn
decl_stmt|;
DECL|field|filesTableFileColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|ProtectedTermsList
argument_list|,
name|String
argument_list|>
name|filesTableFileColumn
decl_stmt|;
DECL|field|filesTableEditColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|ProtectedTermsList
argument_list|,
name|Boolean
argument_list|>
name|filesTableEditColumn
decl_stmt|;
DECL|field|filesTableDeleteColumn
annotation|@
name|FXML
specifier|private
name|TableColumn
argument_list|<
name|ProtectedTermsList
argument_list|,
name|Boolean
argument_list|>
name|filesTableDeleteColumn
decl_stmt|;
DECL|field|termsLoader
annotation|@
name|Inject
specifier|private
name|ProtectedTermsLoader
name|termsLoader
decl_stmt|;
DECL|field|dialogService
annotation|@
name|Inject
specifier|private
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|preferences
annotation|@
name|Inject
specifier|private
name|PreferencesService
name|preferences
decl_stmt|;
DECL|field|viewModel
specifier|private
name|ManageProtectedTermsViewModel
name|viewModel
decl_stmt|;
DECL|method|ManageProtectedTermsDialog ()
specifier|public
name|ManageProtectedTermsDialog
parameter_list|()
block|{
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manage protected terms files"
argument_list|)
argument_list|)
expr_stmt|;
name|ViewLoader
operator|.
name|view
argument_list|(
name|this
argument_list|)
operator|.
name|load
argument_list|()
operator|.
name|setAsDialogPane
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setResultConverter
argument_list|(
name|button
lambda|->
block|{
if|if
condition|(
name|button
operator|==
name|ButtonType
operator|.
name|APPLY
condition|)
block|{
name|viewModel
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|viewModel
operator|=
operator|new
name|ManageProtectedTermsViewModel
argument_list|(
name|termsLoader
argument_list|,
name|dialogService
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|filesTable
operator|.
name|setItems
argument_list|(
name|viewModel
operator|.
name|getTermsFiles
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|ViewModelTableRowFactory
argument_list|<
name|ProtectedTermsList
argument_list|>
argument_list|()
operator|.
name|withContextMenu
argument_list|(
name|this
operator|::
name|createContextMenu
argument_list|)
operator|.
name|install
argument_list|(
name|filesTable
argument_list|)
expr_stmt|;
name|filesTableEnabledColumn
operator|.
name|setCellValueFactory
argument_list|(
name|data
lambda|->
name|BindingsHelper
operator|.
name|constantOf
argument_list|(
name|data
operator|.
name|getValue
argument_list|()
operator|.
name|isEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filesTableEnabledColumn
operator|.
name|setCellFactory
argument_list|(
name|CheckBoxTableCell
operator|.
name|forTableColumn
argument_list|(
name|filesTableEnabledColumn
argument_list|)
argument_list|)
expr_stmt|;
name|filesTableDescriptionColumn
operator|.
name|setCellValueFactory
argument_list|(
name|data
lambda|->
name|BindingsHelper
operator|.
name|constantOf
argument_list|(
name|data
operator|.
name|getValue
argument_list|()
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filesTableFileColumn
operator|.
name|setCellValueFactory
argument_list|(
name|data
lambda|->
block|{
name|ProtectedTermsList
name|list
init|=
name|data
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isInternalList
argument_list|()
condition|)
block|{
return|return
name|BindingsHelper
operator|.
name|constantOf
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Internal list"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|BindingsHelper
operator|.
name|constantOf
argument_list|(
name|data
operator|.
name|getValue
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|filesTableEditColumn
operator|.
name|setCellValueFactory
argument_list|(
name|data
lambda|->
name|BindingsHelper
operator|.
name|constantOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|filesTableDeleteColumn
operator|.
name|setCellValueFactory
argument_list|(
name|data
lambda|->
name|BindingsHelper
operator|.
name|constantOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ValueTableCellFactory
argument_list|<
name|ProtectedTermsList
argument_list|,
name|Boolean
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|none
lambda|->
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|EDIT
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
operator|.
name|withOnMouseClickedEvent
argument_list|(
parameter_list|(
name|file
parameter_list|,
name|none
parameter_list|)
lambda|->
name|event
lambda|->
name|viewModel
operator|.
name|edit
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|install
argument_list|(
name|filesTableEditColumn
argument_list|)
expr_stmt|;
operator|new
name|ValueTableCellFactory
argument_list|<
name|ProtectedTermsList
argument_list|,
name|Boolean
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|none
lambda|->
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|REMOVE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
operator|.
name|withTooltip
argument_list|(
name|none
lambda|->
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove protected terms file"
argument_list|)
argument_list|)
operator|.
name|withOnMouseClickedEvent
argument_list|(
parameter_list|(
name|file
parameter_list|,
name|none
parameter_list|)
lambda|->
name|event
lambda|->
name|viewModel
operator|.
name|removeFile
argument_list|(
name|file
argument_list|)
argument_list|)
operator|.
name|install
argument_list|(
name|filesTableDeleteColumn
argument_list|)
expr_stmt|;
block|}
DECL|method|createContextMenu (ProtectedTermsList file)
specifier|private
name|ContextMenu
name|createContextMenu
parameter_list|(
name|ProtectedTermsList
name|file
parameter_list|)
block|{
name|MenuItem
name|edit
init|=
operator|new
name|MenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit"
argument_list|)
argument_list|)
decl_stmt|;
name|edit
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
name|viewModel
operator|.
name|edit
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|MenuItem
name|show
init|=
operator|new
name|MenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"View"
argument_list|)
argument_list|)
decl_stmt|;
name|show
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
name|viewModel
operator|.
name|displayContent
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|MenuItem
name|remove
init|=
operator|new
name|MenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove"
argument_list|)
argument_list|)
decl_stmt|;
name|remove
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
name|viewModel
operator|.
name|removeFile
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|MenuItem
name|reload
init|=
operator|new
name|MenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Reload"
argument_list|)
argument_list|)
decl_stmt|;
name|reload
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
name|viewModel
operator|.
name|reloadFile
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable/disable context menu items
if|if
condition|(
name|file
operator|.
name|isInternalList
argument_list|()
condition|)
block|{
name|edit
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|show
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reload
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edit
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|show
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reload
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ContextMenu
name|contextMenu
init|=
operator|new
name|ContextMenu
argument_list|()
decl_stmt|;
name|contextMenu
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|edit
argument_list|,
name|show
argument_list|,
name|remove
argument_list|,
name|reload
argument_list|)
expr_stmt|;
return|return
name|contextMenu
return|;
block|}
annotation|@
name|FXML
DECL|method|addFile ()
specifier|private
name|void
name|addFile
parameter_list|()
block|{
name|viewModel
operator|.
name|addFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|createNewFile ()
specifier|private
name|void
name|createNewFile
parameter_list|()
block|{
name|viewModel
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

