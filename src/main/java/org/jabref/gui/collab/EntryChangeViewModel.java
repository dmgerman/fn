begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.collab
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|DuplicateCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|EntryChangeViewModel
class|class
name|EntryChangeViewModel
extends|extends
name|DatabaseChangeViewModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntryChangeViewModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fieldChanges
specifier|private
specifier|final
name|List
argument_list|<
name|FieldChangeViewModel
argument_list|>
name|fieldChanges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|EntryChangeViewModel (BibEntry memEntry, BibEntry tmpEntry, BibEntry diskEntry)
specifier|public
name|EntryChangeViewModel
parameter_list|(
name|BibEntry
name|memEntry
parameter_list|,
name|BibEntry
name|tmpEntry
parameter_list|,
name|BibEntry
name|diskEntry
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|name
operator|=
name|tmpEntry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|map
argument_list|(
name|key
lambda|->
name|Localization
operator|.
name|lang
argument_list|(
literal|"Modified entry"
argument_list|)
operator|+
literal|": '"
operator|+
name|key
operator|+
literal|'\''
argument_list|)
operator|.
name|orElse
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Modified entry"
argument_list|)
argument_list|)
expr_stmt|;
comment|// We know that tmpEntry is not equal to diskEntry. Check if it has been modified
comment|// locally as well, since last tempfile was saved.
name|boolean
name|isModifiedLocally
init|=
operator|(
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|memEntry
argument_list|,
name|tmpEntry
argument_list|)
operator|<=
literal|1
operator|)
decl_stmt|;
comment|// Another (unlikely?) possibility is that both disk and mem version has been modified
comment|// in the same way. Check for this, too.
name|boolean
name|modificationsAgree
init|=
operator|(
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|memEntry
argument_list|,
name|diskEntry
argument_list|)
operator|>
literal|1
operator|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Modified entry: "
operator|+
name|memEntry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"<no BibTeX key set>"
argument_list|)
operator|+
literal|"\n Modified locally: "
operator|+
name|isModifiedLocally
operator|+
literal|" Modifications agree: "
operator|+
name|modificationsAgree
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Field
argument_list|>
name|allFields
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
argument_list|)
decl_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|memEntry
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|tmpEntry
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|allFields
operator|.
name|addAll
argument_list|(
name|diskEntry
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|allFields
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|mem
init|=
name|memEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|tmp
init|=
name|tmpEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|disk
init|=
name|diskEntry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|tmp
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|(
name|disk
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|tmp
operator|.
name|equals
argument_list|(
name|disk
argument_list|)
condition|)
block|{
comment|// Modified externally.
name|fieldChanges
operator|.
name|add
argument_list|(
operator|new
name|FieldChangeViewModel
argument_list|(
name|field
argument_list|,
name|memEntry
argument_list|,
name|tmpEntry
argument_list|,
name|mem
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|tmp
operator|.
name|get
argument_list|()
argument_list|,
name|disk
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
operator|!
name|tmp
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|(
name|disk
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|disk
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|(
operator|!
name|disk
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|(
name|tmp
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|tmp
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|mem
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|mem
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// Added externally.
name|fieldChanges
operator|.
name|add
argument_list|(
operator|new
name|FieldChangeViewModel
argument_list|(
name|field
argument_list|,
name|memEntry
argument_list|,
name|tmpEntry
argument_list|,
name|mem
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|tmp
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|disk
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|makeChange (BibDatabaseContext database, NamedCompound undoEdit)
specifier|public
name|void
name|makeChange
parameter_list|(
name|BibDatabaseContext
name|database
parameter_list|,
name|NamedCompound
name|undoEdit
parameter_list|)
block|{
for|for
control|(
name|DatabaseChangeViewModel
name|c
range|:
name|fieldChanges
control|)
block|{
if|if
condition|(
name|c
operator|.
name|isAccepted
argument_list|()
condition|)
block|{
name|c
operator|.
name|makeChange
argument_list|(
name|database
argument_list|,
name|undoEdit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|description ()
specifier|public
name|Node
name|description
parameter_list|()
block|{
name|VBox
name|container
init|=
operator|new
name|VBox
argument_list|()
decl_stmt|;
name|Label
name|header
init|=
operator|new
name|Label
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|header
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"sectionHeader"
argument_list|)
expr_stmt|;
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldChangeViewModel
name|change
range|:
name|fieldChanges
control|)
block|{
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|change
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
DECL|class|FieldChangeViewModel
specifier|static
class|class
name|FieldChangeViewModel
extends|extends
name|DatabaseChangeViewModel
block|{
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|tmpEntry
specifier|private
specifier|final
name|BibEntry
name|tmpEntry
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|Field
name|field
decl_stmt|;
DECL|field|inMem
specifier|private
specifier|final
name|String
name|inMem
decl_stmt|;
DECL|field|onTmp
specifier|private
specifier|final
name|String
name|onTmp
decl_stmt|;
DECL|field|onDisk
specifier|private
specifier|final
name|String
name|onDisk
decl_stmt|;
DECL|method|FieldChangeViewModel (Field field, BibEntry memEntry, BibEntry tmpEntry, String inMem, String onTmp, String onDisk)
specifier|public
name|FieldChangeViewModel
parameter_list|(
name|Field
name|field
parameter_list|,
name|BibEntry
name|memEntry
parameter_list|,
name|BibEntry
name|tmpEntry
parameter_list|,
name|String
name|inMem
parameter_list|,
name|String
name|onTmp
parameter_list|,
name|String
name|onDisk
parameter_list|)
block|{
name|super
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|=
name|memEntry
expr_stmt|;
name|this
operator|.
name|tmpEntry
operator|=
name|tmpEntry
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|inMem
operator|=
name|inMem
expr_stmt|;
name|this
operator|.
name|onTmp
operator|=
name|onTmp
expr_stmt|;
name|this
operator|.
name|onDisk
operator|=
name|onDisk
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeChange (BibDatabaseContext database, NamedCompound undoEdit)
specifier|public
name|void
name|makeChange
parameter_list|(
name|BibDatabaseContext
name|database
parameter_list|,
name|NamedCompound
name|undoEdit
parameter_list|)
block|{
if|if
condition|(
name|onDisk
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|onDisk
argument_list|)
expr_stmt|;
block|}
name|undoEdit
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|inMem
argument_list|,
name|onDisk
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description ()
specifier|public
name|Node
name|description
parameter_list|()
block|{
name|VBox
name|container
init|=
operator|new
name|VBox
argument_list|()
decl_stmt|;
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Modification of field"
argument_list|)
operator|+
literal|" "
operator|+
name|field
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|onDisk
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|onDisk
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Value set externally"
argument_list|)
operator|+
literal|": "
operator|+
name|onDisk
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Value cleared externally"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|inMem
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|inMem
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Current value"
argument_list|)
operator|+
literal|": "
operator|+
name|inMem
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|onTmp
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|onTmp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Current tmp value"
argument_list|)
operator|+
literal|": "
operator|+
name|onTmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
block|}
block|}
end_class

end_unit

