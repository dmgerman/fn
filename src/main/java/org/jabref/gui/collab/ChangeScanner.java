begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.collab
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|DuplicateCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|BibDatabaseDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|BibEntryDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|BibStringDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|OpenDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_class
DECL|class|ChangeScanner
specifier|public
class|class
name|ChangeScanner
block|{
DECL|field|referenceFile
specifier|private
specifier|final
name|Path
name|referenceFile
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|BibDatabaseContext
name|database
decl_stmt|;
DECL|field|changes
specifier|private
specifier|final
name|List
argument_list|<
name|DatabaseChangeViewModel
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|referenceDatabase
specifier|private
name|BibDatabaseContext
name|referenceDatabase
decl_stmt|;
DECL|method|ChangeScanner (BibDatabaseContext database, Path referenceFile)
specifier|public
name|ChangeScanner
parameter_list|(
name|BibDatabaseContext
name|database
parameter_list|,
name|Path
name|referenceFile
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
name|this
operator|.
name|referenceFile
operator|=
name|referenceFile
expr_stmt|;
block|}
comment|/**      * Finds the entry in the list best fitting the specified entry. Even if no entries get a score above zero, an entry      * is still returned.      */
DECL|method|bestFit (BibEntry targetEntry, List<BibEntry> entries)
specifier|private
specifier|static
name|BibEntry
name|bestFit
parameter_list|(
name|BibEntry
name|targetEntry
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
return|return
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|max
argument_list|(
name|Comparator
operator|.
name|comparingDouble
argument_list|(
name|candidate
lambda|->
name|DuplicateCheck
operator|.
name|compareEntriesStrictly
argument_list|(
name|targetEntry
argument_list|,
name|candidate
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|scanForChanges ()
specifier|public
name|List
argument_list|<
name|DatabaseChangeViewModel
argument_list|>
name|scanForChanges
parameter_list|()
block|{
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|diskdb
lambda|->
block|{
comment|// Parse the temporary file.
name|ImportFormatPreferences
name|importFormatPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
decl_stmt|;
name|ParserResult
name|result
init|=
name|OpenDatabase
operator|.
name|loadDatabase
argument_list|(
name|referenceFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|importFormatPreferences
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|)
decl_stmt|;
name|referenceDatabase
operator|=
name|result
operator|.
name|getDatabaseContext
argument_list|()
expr_stmt|;
comment|// Parse the modified file.
name|result
operator|=
name|OpenDatabase
operator|.
name|loadDatabase
argument_list|(
name|diskdb
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|importFormatPreferences
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|databaseOnDisk
init|=
name|result
operator|.
name|getDatabaseContext
argument_list|()
decl_stmt|;
comment|// Start looking at changes.
name|BibDatabaseDiff
name|differences
init|=
name|BibDatabaseDiff
operator|.
name|compare
argument_list|(
name|referenceDatabase
argument_list|,
name|databaseOnDisk
argument_list|)
decl_stmt|;
name|differences
operator|.
name|getMetaDataDifferences
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|diff
lambda|->
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|MetaDataChangeViewModel
argument_list|(
name|diff
argument_list|)
argument_list|)
expr_stmt|;
name|diff
operator|.
name|getGroupDifferences
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|groupDiff
lambda|->
name|changes
operator|.
name|add
argument_list|(
operator|new
name|GroupChangeViewModel
argument_list|(
name|groupDiff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|differences
operator|.
name|getPreambleDifferences
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|diff
lambda|->
name|changes
operator|.
name|add
argument_list|(
operator|new
name|PreambleChangeViewModel
argument_list|(
name|diff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|differences
operator|.
name|getBibStringDifferences
argument_list|()
operator|.
name|forEach
argument_list|(
name|diff
lambda|->
name|changes
operator|.
name|add
argument_list|(
name|createBibStringDiff
argument_list|(
name|diff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|differences
operator|.
name|getEntryDifferences
argument_list|()
operator|.
name|forEach
argument_list|(
name|diff
lambda|->
name|changes
operator|.
name|add
argument_list|(
name|createBibEntryDiff
argument_list|(
name|diff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|changes
return|;
block|}
DECL|method|createBibStringDiff (BibStringDiff diff)
specifier|private
name|DatabaseChangeViewModel
name|createBibStringDiff
parameter_list|(
name|BibStringDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|diff
operator|.
name|getOriginalString
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|StringAddChangeViewModel
argument_list|(
name|diff
operator|.
name|getNewString
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|diff
operator|.
name|getNewString
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Optional
argument_list|<
name|BibtexString
argument_list|>
name|current
init|=
name|database
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringByName
argument_list|(
name|diff
operator|.
name|getOriginalString
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringRemoveChangeViewModel
argument_list|(
name|diff
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|current
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|diff
operator|.
name|getOriginalString
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|diff
operator|.
name|getNewString
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|BibtexString
argument_list|>
name|current
init|=
name|database
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringByName
argument_list|(
name|diff
operator|.
name|getOriginalString
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringChangeViewModel
argument_list|(
name|current
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|diff
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|diff
operator|.
name|getNewString
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
name|Optional
argument_list|<
name|BibtexString
argument_list|>
name|current
init|=
name|database
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringByName
argument_list|(
name|diff
operator|.
name|getOriginalString
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringNameChangeViewModel
argument_list|(
name|current
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|diff
operator|.
name|getOriginalString
argument_list|()
argument_list|,
name|current
operator|.
name|map
argument_list|(
name|BibtexString
operator|::
name|getName
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|,
name|diff
operator|.
name|getNewString
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createBibEntryDiff (BibEntryDiff diff)
specifier|private
name|DatabaseChangeViewModel
name|createBibEntryDiff
parameter_list|(
name|BibEntryDiff
name|diff
parameter_list|)
block|{
if|if
condition|(
name|diff
operator|.
name|getOriginalEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|EntryAddChangeViewModel
argument_list|(
name|diff
operator|.
name|getNewEntry
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|diff
operator|.
name|getNewEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|EntryDeleteChangeViewModel
argument_list|(
name|bestFit
argument_list|(
name|diff
operator|.
name|getOriginalEntry
argument_list|()
argument_list|,
name|database
operator|.
name|getEntries
argument_list|()
argument_list|)
argument_list|,
name|diff
operator|.
name|getOriginalEntry
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|EntryChangeViewModel
argument_list|(
name|bestFit
argument_list|(
name|diff
operator|.
name|getOriginalEntry
argument_list|()
argument_list|,
name|database
operator|.
name|getEntries
argument_list|()
argument_list|)
argument_list|,
name|diff
operator|.
name|getOriginalEntry
argument_list|()
argument_list|,
name|diff
operator|.
name|getNewEntry
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

