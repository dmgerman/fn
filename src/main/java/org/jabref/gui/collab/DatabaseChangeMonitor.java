begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.collab
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileUpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DatabaseChangeMonitor
specifier|public
class|class
name|DatabaseChangeMonitor
implements|implements
name|FileUpdateListener
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DatabaseChangeMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|BibDatabaseContext
name|database
decl_stmt|;
DECL|field|fileMonitor
specifier|private
specifier|final
name|FileUpdateMonitor
name|fileMonitor
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|DatabaseChangeListener
argument_list|>
name|listeners
decl_stmt|;
DECL|field|referenceFile
specifier|private
name|Path
name|referenceFile
decl_stmt|;
DECL|field|taskExecutor
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|method|DatabaseChangeMonitor (BibDatabaseContext database, FileUpdateMonitor fileMonitor, TaskExecutor taskExecutor)
specifier|public
name|DatabaseChangeMonitor
parameter_list|(
name|BibDatabaseContext
name|database
parameter_list|,
name|FileUpdateMonitor
name|fileMonitor
parameter_list|,
name|TaskExecutor
name|taskExecutor
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
name|this
operator|.
name|fileMonitor
operator|=
name|fileMonitor
expr_stmt|;
name|this
operator|.
name|taskExecutor
operator|=
name|taskExecutor
expr_stmt|;
name|this
operator|.
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|path
lambda|->
block|{
try|try
block|{
name|fileMonitor
operator|.
name|addListenerForFile
argument_list|(
name|path
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|referenceFile
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"jabref"
argument_list|,
literal|".bib"
argument_list|)
expr_stmt|;
name|referenceFile
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|setAsReference
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while trying to monitor "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fileUpdated ()
specifier|public
name|void
name|fileUpdated
parameter_list|()
block|{
comment|// File on disk has changed, thus look for notable changes and notify listeners in case there are such changes
name|ChangeScanner
name|scanner
init|=
operator|new
name|ChangeScanner
argument_list|(
name|database
argument_list|,
name|referenceFile
argument_list|)
decl_stmt|;
name|BackgroundTask
operator|.
name|wrap
argument_list|(
name|scanner
operator|::
name|scanForChanges
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|changes
lambda|->
block|{
if|if
condition|(
operator|!
name|changes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|databaseChanged
argument_list|(
name|changes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|executeWith
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
DECL|method|addListener (DatabaseChangeListener listener)
specifier|public
name|void
name|addListener
parameter_list|(
name|DatabaseChangeListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|unregister ()
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|file
lambda|->
name|fileMonitor
operator|.
name|removeListener
argument_list|(
name|file
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|markExternalChangesAsResolved ()
specifier|public
name|void
name|markExternalChangesAsResolved
parameter_list|()
block|{
name|markAsSaved
argument_list|()
expr_stmt|;
block|}
DECL|method|markAsSaved ()
specifier|public
name|void
name|markAsSaved
parameter_list|()
block|{
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|this
operator|::
name|setAsReference
argument_list|)
expr_stmt|;
block|}
DECL|method|setAsReference (Path file)
specifier|private
name|void
name|setAsReference
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|FileUtil
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|referenceFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

