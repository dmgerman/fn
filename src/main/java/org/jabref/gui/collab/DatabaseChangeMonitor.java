begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.collab
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileUpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileBasedLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|DatabaseChangeMonitor
specifier|public
class|class
name|DatabaseChangeMonitor
implements|implements
name|FileUpdateListener
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DatabaseChangeMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|BibDatabaseContext
name|database
decl_stmt|;
DECL|field|fileMonitor
specifier|private
specifier|final
name|FileUpdateMonitor
name|fileMonitor
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|updatedExternally
specifier|private
name|boolean
name|updatedExternally
decl_stmt|;
DECL|field|tmpFile
specifier|private
name|Path
name|tmpFile
decl_stmt|;
DECL|field|timeStamp
specifier|private
name|long
name|timeStamp
decl_stmt|;
DECL|field|fileSize
specifier|private
name|long
name|fileSize
decl_stmt|;
DECL|method|DatabaseChangeMonitor (BibDatabaseContext database, FileUpdateMonitor fileMonitor, BasePanel panel)
specifier|public
name|DatabaseChangeMonitor
parameter_list|(
name|BibDatabaseContext
name|database
parameter_list|,
name|FileUpdateMonitor
name|fileMonitor
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
name|this
operator|.
name|fileMonitor
operator|=
name|fileMonitor
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|path
lambda|->
block|{
try|try
block|{
name|fileMonitor
operator|.
name|addListenerForFile
argument_list|(
name|path
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|timeStamp
operator|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|path
argument_list|)
operator|.
name|toMillis
argument_list|()
expr_stmt|;
name|fileSize
operator|=
name|Files
operator|.
name|size
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|tmpFile
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"jabref"
argument_list|,
literal|".bib"
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|toFile
argument_list|()
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|copyToTemp
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while trying to monitor "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fileUpdated ()
specifier|public
name|void
name|fileUpdated
parameter_list|()
block|{
if|if
condition|(
name|panel
operator|.
name|isSaving
argument_list|()
condition|)
block|{
comment|// We are just saving the file, so this message is most likely due to bad timing.
comment|// If not, we'll handle it on the next polling.
return|return;
block|}
name|updatedExternally
operator|=
literal|true
expr_stmt|;
specifier|final
name|ChangeScanner
name|scanner
init|=
operator|new
name|ChangeScanner
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|panel
argument_list|,
name|database
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|tmpFile
argument_list|)
decl_stmt|;
comment|// Test: running scan automatically in background
if|if
condition|(
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|FileBasedLock
operator|.
name|waitForFileLock
argument_list|(
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
comment|// The file is locked even after the maximum wait. Do nothing.
name|LOGGER
operator|.
name|error
argument_list|(
literal|"File updated externally, but change scan failed because the file is locked."
argument_list|)
expr_stmt|;
comment|// Wait a bit and then try again
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Nothing to do
block|}
name|fileUpdated
argument_list|()
expr_stmt|;
return|return;
block|}
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|executeInterruptableTaskAndWait
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// Adding the sidepane component is Swing work, so we must do this in the Swing
comment|// thread:
name|Runnable
name|t
init|=
parameter_list|()
lambda|->
block|{
comment|// Check if there is already a notification about external
comment|// changes:
name|SidePaneManager
name|sidePaneManager
init|=
name|panel
operator|.
name|getSidePaneManager
argument_list|()
decl_stmt|;
name|boolean
name|hasAlready
init|=
name|sidePaneManager
operator|.
name|hasComponent
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasAlready
condition|)
block|{
name|sidePaneManager
operator|.
name|hideComponent
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|unregisterComponent
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|FileUpdatePanel
name|pan
init|=
operator|new
name|FileUpdatePanel
argument_list|(
name|panel
argument_list|,
name|sidePaneManager
argument_list|,
name|database
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|scanner
argument_list|)
decl_stmt|;
name|sidePaneManager
operator|.
name|register
argument_list|(
name|pan
argument_list|)
expr_stmt|;
name|sidePaneManager
operator|.
name|show
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
if|if
condition|(
name|scanner
operator|.
name|changesFound
argument_list|()
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedExternally
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Forces a check on the file, and returns the result. Check if time stamp or the file size has changed.      *      * @return boolean true if the file has changed.      */
DECL|method|hasBeenModified ()
specifier|private
name|boolean
name|hasBeenModified
parameter_list|()
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|database
operator|.
name|getDatabasePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|long
name|modified
init|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|file
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|modified
operator|==
literal|0L
condition|)
block|{
comment|// File deleted
return|return
literal|false
return|;
block|}
name|long
name|fileSizeNow
init|=
name|Files
operator|.
name|size
argument_list|(
name|file
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|timeStamp
operator|!=
name|modified
operator|)
operator|||
operator|(
name|fileSize
operator|!=
name|fileSizeNow
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|unregister ()
specifier|public
name|void
name|unregister
parameter_list|()
block|{
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|file
lambda|->
name|fileMonitor
operator|.
name|removeListener
argument_list|(
name|file
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|hasBeenModifiedExternally ()
specifier|public
name|boolean
name|hasBeenModifiedExternally
parameter_list|()
block|{
return|return
name|updatedExternally
operator|||
name|hasBeenModified
argument_list|()
return|;
block|}
DECL|method|markExternalChangesAsResolved ()
specifier|public
name|void
name|markExternalChangesAsResolved
parameter_list|()
block|{
name|updatedExternally
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|markAsSaved ()
specifier|public
name|void
name|markAsSaved
parameter_list|()
block|{
name|database
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|file
lambda|->
block|{
try|try
block|{
name|timeStamp
operator|=
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|file
argument_list|)
operator|.
name|toMillis
argument_list|()
expr_stmt|;
name|fileSize
operator|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|copyToTemp
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while getting file information"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|copyToTemp (Path file)
specifier|private
name|void
name|copyToTemp
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
name|FileUtil
operator|.
name|copyFile
argument_list|(
name|file
argument_list|,
name|tmpFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTempFile ()
specifier|public
name|Path
name|getTempFile
parameter_list|()
block|{
return|return
name|tmpFile
return|;
block|}
block|}
end_class

end_unit

