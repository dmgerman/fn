begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.maintable
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|Bindings
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|transformation
operator|.
name|FilteredList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BindingsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|matchers
operator|.
name|MatcherSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|matchers
operator|.
name|MatcherSets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|MainTableDataModel
specifier|public
class|class
name|MainTableDataModel
block|{
DECL|field|entries
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|BibEntryTableViewModel
argument_list|>
name|entries
decl_stmt|;
DECL|method|MainTableDataModel (BibDatabaseContext context)
specifier|public
name|MainTableDataModel
parameter_list|(
name|BibDatabaseContext
name|context
parameter_list|)
block|{
name|ObservableList
argument_list|<
name|BibEntry
argument_list|>
name|allEntries
init|=
name|context
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|FilteredList
argument_list|<
name|BibEntryTableViewModel
argument_list|>
name|entriesFiltered
init|=
operator|new
name|FilteredList
argument_list|<>
argument_list|(
name|BindingsHelper
operator|.
name|mapBacked
argument_list|(
name|allEntries
argument_list|,
name|BibEntryTableViewModel
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|entriesFiltered
operator|.
name|predicateProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|Bindings
operator|.
name|createObjectBinding
argument_list|(
parameter_list|()
lambda|->
name|this
operator|::
name|isMatched
argument_list|,
name|Globals
operator|.
name|stateManager
operator|.
name|activeGroupProperty
argument_list|()
argument_list|,
name|Globals
operator|.
name|stateManager
operator|.
name|activeSearchQueryProperty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// We need to wrap the list since otherwise sorting in the table does not work
name|entries
operator|=
name|FXCollections
operator|.
name|synchronizedObservableList
argument_list|(
name|entriesFiltered
argument_list|)
expr_stmt|;
block|}
DECL|method|isMatched (BibEntryTableViewModel entry)
specifier|private
name|boolean
name|isMatched
parameter_list|(
name|BibEntryTableViewModel
name|entry
parameter_list|)
block|{
return|return
name|isMatchedByGroup
argument_list|(
name|entry
argument_list|)
operator|&&
name|isMatchedBySearch
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|method|isMatchedBySearch (BibEntryTableViewModel entry)
specifier|private
name|boolean
name|isMatchedBySearch
parameter_list|(
name|BibEntryTableViewModel
name|entry
parameter_list|)
block|{
return|return
name|Globals
operator|.
name|stateManager
operator|.
name|activeSearchQueryProperty
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|map
argument_list|(
name|matcher
lambda|->
name|matcher
operator|.
name|isMatch
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|isMatchedByGroup (BibEntryTableViewModel entry)
specifier|private
name|boolean
name|isMatchedByGroup
parameter_list|(
name|BibEntryTableViewModel
name|entry
parameter_list|)
block|{
return|return
name|createGroupMatcher
argument_list|(
name|Globals
operator|.
name|stateManager
operator|.
name|activeGroupProperty
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|matcher
lambda|->
name|matcher
operator|.
name|isMatch
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|createGroupMatcher (List<GroupTreeNode> selectedGroups)
specifier|private
name|Optional
argument_list|<
name|MatcherSet
argument_list|>
name|createGroupMatcher
parameter_list|(
name|List
argument_list|<
name|GroupTreeNode
argument_list|>
name|selectedGroups
parameter_list|)
block|{
if|if
condition|(
operator|(
name|selectedGroups
operator|==
literal|null
operator|)
operator|||
name|selectedGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No selected group, show all entries
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|final
name|MatcherSet
name|searchRules
init|=
name|MatcherSets
operator|.
name|build
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INTERSECT_SELECTIONS
argument_list|)
condition|?
name|MatcherSets
operator|.
name|MatcherType
operator|.
name|AND
else|:
name|MatcherSets
operator|.
name|MatcherType
operator|.
name|OR
argument_list|)
decl_stmt|;
for|for
control|(
name|GroupTreeNode
name|node
range|:
name|selectedGroups
control|)
block|{
name|searchRules
operator|.
name|addRule
argument_list|(
name|node
operator|.
name|getSearchMatcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
name|searchRules
argument_list|)
return|;
block|}
DECL|method|getEntriesFiltered ()
specifier|public
name|ObservableList
argument_list|<
name|BibEntryTableViewModel
argument_list|>
name|getEntriesFiltered
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
block|}
end_class

end_unit

