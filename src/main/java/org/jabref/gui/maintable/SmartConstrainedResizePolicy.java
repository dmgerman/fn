begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.maintable
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ResizeFeaturesBase
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumnBase
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This resize policy is almost the same as {@link TableView#CONSTRAINED_RESIZE_POLICY}  * We make sure that the width of all columns sums up to the total width of the table.  * However, in contrast to {@link TableView#CONSTRAINED_RESIZE_POLICY} we size the columns initially by their preferred width.  */
end_comment

begin_class
DECL|class|SmartConstrainedResizePolicy
specifier|public
class|class
name|SmartConstrainedResizePolicy
implements|implements
name|Callback
argument_list|<
name|TableView
operator|.
name|ResizeFeatures
argument_list|,
name|Boolean
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SmartConstrainedResizePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|call (TableView.ResizeFeatures prop)
specifier|public
name|Boolean
name|call
parameter_list|(
name|TableView
operator|.
name|ResizeFeatures
name|prop
parameter_list|)
block|{
if|if
condition|(
name|prop
operator|.
name|getColumn
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|initColumnSize
argument_list|(
name|prop
operator|.
name|getTable
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|constrainedResize
argument_list|(
name|prop
argument_list|)
return|;
block|}
block|}
DECL|method|initColumnSize (TableView<?> table)
specifier|private
name|Boolean
name|initColumnSize
parameter_list|(
name|TableView
argument_list|<
name|?
argument_list|>
name|table
parameter_list|)
block|{
name|double
name|tableWidth
init|=
name|getContentWidth
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TableColumnBase
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|visibleLeafColumns
init|=
name|table
operator|.
name|getVisibleLeafColumns
argument_list|()
decl_stmt|;
name|double
name|totalWidth
init|=
name|visibleLeafColumns
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|TableColumnBase
operator|::
name|getWidth
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|totalWidth
operator|-
name|tableWidth
argument_list|)
operator|>
literal|1
condition|)
block|{
name|double
name|totalPrefWidth
init|=
name|visibleLeafColumns
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|TableColumnBase
operator|::
name|getPrefWidth
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalPrefWidth
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|TableColumnBase
name|col
range|:
name|visibleLeafColumns
control|)
block|{
name|double
name|share
init|=
name|col
operator|.
name|getPrefWidth
argument_list|()
operator|/
name|totalPrefWidth
decl_stmt|;
name|double
name|newSize
init|=
name|tableWidth
operator|*
name|share
decl_stmt|;
name|resize
argument_list|(
name|col
argument_list|,
name|newSize
operator|-
name|col
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|resize (TableColumnBase column, double delta)
specifier|private
name|void
name|resize
parameter_list|(
name|TableColumnBase
name|column
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
comment|// We have to use reflection since TableUtil is not visible to us
try|try
block|{
comment|// TODO: reflective access, should be removed (Java 9)
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"javafx.scene.control.TableUtil"
argument_list|)
decl_stmt|;
name|Method
name|constrainedResize
init|=
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"resize"
argument_list|,
name|TableColumnBase
operator|.
name|class
argument_list|,
name|double
operator|.
name|class
argument_list|)
decl_stmt|;
name|constrainedResize
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|constrainedResize
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|column
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not invoke resize in TableUtil"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|constrainedResize (TableView.ResizeFeatures<?> prop)
specifier|private
name|Boolean
name|constrainedResize
parameter_list|(
name|TableView
operator|.
name|ResizeFeatures
argument_list|<
name|?
argument_list|>
name|prop
parameter_list|)
block|{
name|TableView
argument_list|<
name|?
argument_list|>
name|table
init|=
name|prop
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|TableColumnBase
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|visibleLeafColumns
init|=
name|table
operator|.
name|getVisibleLeafColumns
argument_list|()
decl_stmt|;
return|return
name|constrainedResize
argument_list|(
name|prop
argument_list|,
literal|false
argument_list|,
name|getContentWidth
argument_list|(
name|table
argument_list|)
argument_list|,
name|visibleLeafColumns
argument_list|)
return|;
block|}
DECL|method|constrainedResize (TableView.ResizeFeatures prop, Boolean isFirstRun, Double contentWidth, List<? extends TableColumnBase<?, ?>> visibleLeafColumns)
specifier|private
name|Boolean
name|constrainedResize
parameter_list|(
name|TableView
operator|.
name|ResizeFeatures
name|prop
parameter_list|,
name|Boolean
name|isFirstRun
parameter_list|,
name|Double
name|contentWidth
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|TableColumnBase
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|visibleLeafColumns
parameter_list|)
block|{
comment|// We have to use reflection since TableUtil is not visible to us
try|try
block|{
comment|// TODO: reflective access, should be removed (Java 9)
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"javafx.scene.control.TableUtil"
argument_list|)
decl_stmt|;
name|Method
name|constrainedResize
init|=
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"constrainedResize"
argument_list|,
name|ResizeFeaturesBase
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|constrainedResize
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|returnValue
init|=
name|constrainedResize
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|prop
argument_list|,
name|isFirstRun
argument_list|,
name|contentWidth
argument_list|,
name|visibleLeafColumns
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|returnValue
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not invoke constrainedResize in TableUtil"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|getContentWidth (TableView<?> table)
specifier|private
name|Double
name|getContentWidth
parameter_list|(
name|TableView
argument_list|<
name|?
argument_list|>
name|table
parameter_list|)
block|{
try|try
block|{
comment|// TODO: reflective access, should be removed (Java 9)
name|Field
name|privateStringField
init|=
name|TableView
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"contentWidth"
argument_list|)
decl_stmt|;
name|privateStringField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Double
operator|)
name|privateStringField
operator|.
name|get
argument_list|(
name|table
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|0d
return|;
block|}
block|}
block|}
end_class

end_unit

