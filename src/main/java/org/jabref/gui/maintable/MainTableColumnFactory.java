begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.maintable
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefIcon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldValueViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ValueTableCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_class
DECL|class|MainTableColumnFactory
class|class
name|MainTableColumnFactory
block|{
DECL|field|STYLE_ICON
specifier|private
specifier|static
specifier|final
name|String
name|STYLE_ICON
init|=
literal|"column-icon"
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|ColumnPreferences
name|preferences
decl_stmt|;
DECL|field|externalFileTypes
specifier|private
specifier|final
name|ExternalFileTypes
name|externalFileTypes
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|BibDatabase
name|database
decl_stmt|;
DECL|field|cellFactory
specifier|private
specifier|final
name|CellFactory
name|cellFactory
decl_stmt|;
DECL|method|MainTableColumnFactory (BibDatabase database, ColumnPreferences preferences, ExternalFileTypes externalFileTypes)
specifier|public
name|MainTableColumnFactory
parameter_list|(
name|BibDatabase
name|database
parameter_list|,
name|ColumnPreferences
name|preferences
parameter_list|,
name|ExternalFileTypes
name|externalFileTypes
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|this
operator|.
name|preferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalFileTypes
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|externalFileTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|cellFactory
operator|=
operator|new
name|CellFactory
argument_list|(
name|externalFileTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|createColumns ()
specifier|public
name|List
argument_list|<
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|?
argument_list|>
argument_list|>
name|createColumns
parameter_list|()
block|{
name|List
argument_list|<
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|?
argument_list|>
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add column for linked files
if|if
condition|(
name|preferences
operator|.
name|showFileColumn
argument_list|()
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|createFileColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add column for DOI/URL
if|if
condition|(
name|preferences
operator|.
name|showUrlColumn
argument_list|()
condition|)
block|{
if|if
condition|(
name|preferences
operator|.
name|preferDoiOverUrl
argument_list|()
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|createIconColumn
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|DOI
argument_list|,
name|FieldName
operator|.
name|DOI
argument_list|,
name|FieldName
operator|.
name|URL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columns
operator|.
name|add
argument_list|(
name|createIconColumn
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|WWW
argument_list|,
name|FieldName
operator|.
name|URL
argument_list|,
name|FieldName
operator|.
name|DOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add column for eprints
if|if
condition|(
name|preferences
operator|.
name|showEprintColumn
argument_list|()
condition|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|createIconColumn
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|WWW
argument_list|,
name|FieldName
operator|.
name|EPRINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add columns for other file types
name|columns
operator|.
name|addAll
argument_list|(
name|preferences
operator|.
name|getExtraFileColumns
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|createExtraFileColumn
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 'normal' bibtex fields as configured in the preferences
name|columns
operator|.
name|addAll
argument_list|(
name|createNormalColumns
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the "special" icon columns (e.g., ranking, file, ...) that are enabled in preferences
for|for
control|(
name|SpecialField
name|field
range|:
name|preferences
operator|.
name|getSpecialFieldColumns
argument_list|()
control|)
block|{
name|columns
operator|.
name|add
argument_list|(
name|createSpecialFieldColumn
argument_list|(
operator|(
name|field
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
DECL|method|createNormalColumns ()
specifier|private
name|List
argument_list|<
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|?
argument_list|>
argument_list|>
name|createNormalColumns
parameter_list|()
block|{
name|List
argument_list|<
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|?
argument_list|>
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Read table columns from preferences
for|for
control|(
name|String
name|columnName
range|:
name|preferences
operator|.
name|getNormalColumns
argument_list|()
control|)
block|{
comment|// Stored column name will be used as header
comment|// There might be more than one field to display, e.g., "author/editor" or "date/year" - so split
name|String
index|[]
name|fields
init|=
name|columnName
operator|.
name|split
argument_list|(
name|FieldName
operator|.
name|FIELD_SEPARATOR
argument_list|)
decl_stmt|;
name|StringTableColumn
name|column
init|=
operator|new
name|StringTableColumn
argument_list|(
name|columnName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fields
argument_list|)
argument_list|,
name|database
argument_list|)
decl_stmt|;
name|column
operator|.
name|setPrefWidth
argument_list|(
name|preferences
operator|.
name|getPrefColumnWidth
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
DECL|method|createSpecialFieldColumn (SpecialField specialField)
specifier|private
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|Optional
argument_list|<
name|SpecialFieldValueViewModel
argument_list|>
argument_list|>
name|createSpecialFieldColumn
parameter_list|(
name|SpecialField
name|specialField
parameter_list|)
block|{
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|Optional
argument_list|<
name|SpecialFieldValueViewModel
argument_list|>
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|column
operator|.
name|setGraphic
argument_list|(
operator|new
name|SpecialFieldViewModel
argument_list|(
name|specialField
argument_list|)
operator|.
name|getIcon
argument_list|()
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
name|STYLE_ICON
argument_list|)
expr_stmt|;
if|if
condition|(
name|specialField
operator|==
name|SpecialField
operator|.
name|RANKING
condition|)
block|{
name|setExactWidth
argument_list|(
name|column
argument_list|,
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL_RANKING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setExactWidth
argument_list|(
name|column
argument_list|,
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
block|}
name|column
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getSpecialField
argument_list|(
name|specialField
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|Optional
argument_list|<
name|SpecialFieldValueViewModel
argument_list|>
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|param
lambda|->
name|param
operator|.
name|map
argument_list|(
name|specialFieldValue
lambda|->
name|specialFieldValue
operator|.
name|getIcon
argument_list|()
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
DECL|method|setExactWidth (TableColumn<?, ?> column, int widthIconCol)
specifier|private
name|void
name|setExactWidth
parameter_list|(
name|TableColumn
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|column
parameter_list|,
name|int
name|widthIconCol
parameter_list|)
block|{
name|column
operator|.
name|setMinWidth
argument_list|(
name|widthIconCol
argument_list|)
expr_stmt|;
name|column
operator|.
name|setPrefWidth
argument_list|(
name|widthIconCol
argument_list|)
expr_stmt|;
name|column
operator|.
name|setMaxWidth
argument_list|(
name|widthIconCol
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileColumn ()
specifier|private
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|List
argument_list|<
name|LinkedFile
argument_list|>
argument_list|>
name|createFileColumn
parameter_list|()
block|{
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|List
argument_list|<
name|LinkedFile
argument_list|>
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|column
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
name|STYLE_ICON
argument_list|)
expr_stmt|;
name|setExactWidth
argument_list|(
name|column
argument_list|,
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getLinkedFiles
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|List
argument_list|<
name|LinkedFile
argument_list|>
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|this
operator|::
name|createFileIcon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
comment|/**      * Creates a column which shows an icon instead of the textual content      */
DECL|method|createIconColumn (JabRefIcon icon, String firstField, String secondField)
specifier|private
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|String
argument_list|>
name|createIconColumn
parameter_list|(
name|JabRefIcon
name|icon
parameter_list|,
name|String
name|firstField
parameter_list|,
name|String
name|secondField
parameter_list|)
block|{
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|String
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|column
operator|.
name|setGraphic
argument_list|(
name|icon
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
name|STYLE_ICON
argument_list|)
expr_stmt|;
name|setExactWidth
argument_list|(
name|column
argument_list|,
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|EasyBind
operator|.
name|monadic
argument_list|(
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getField
argument_list|(
name|firstField
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getField
argument_list|(
name|secondField
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|cellFactory
operator|::
name|getTableIcon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
DECL|method|createIconColumn (JabRefIcon icon, String field)
specifier|private
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|String
argument_list|>
name|createIconColumn
parameter_list|(
name|JabRefIcon
name|icon
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|String
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|column
operator|.
name|setGraphic
argument_list|(
name|icon
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
name|STYLE_ICON
argument_list|)
expr_stmt|;
name|setExactWidth
argument_list|(
name|column
argument_list|,
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|cellFactory
operator|::
name|getTableIcon
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
comment|/**      * Creates a column for specific file types. Shows the icon for the given type (or the FILE_MULTIPLE icon)      *      * @param externalFileTypeName the name of the externalFileType      */
DECL|method|createExtraFileColumn (String externalFileTypeName)
specifier|private
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|List
argument_list|<
name|LinkedFile
argument_list|>
argument_list|>
name|createExtraFileColumn
parameter_list|(
name|String
name|externalFileTypeName
parameter_list|)
block|{
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|List
argument_list|<
name|LinkedFile
argument_list|>
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|column
operator|.
name|setGraphic
argument_list|(
name|externalFileTypes
operator|.
name|getExternalFileTypeByName
argument_list|(
name|externalFileTypeName
argument_list|)
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getIcon
argument_list|)
operator|.
name|orElse
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE
argument_list|)
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
name|STYLE_ICON
argument_list|)
expr_stmt|;
name|setExactWidth
argument_list|(
name|column
argument_list|,
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|getLinkedFiles
argument_list|()
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellFactory
argument_list|(
operator|new
name|ValueTableCellFactory
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|List
argument_list|<
name|LinkedFile
argument_list|>
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|linkedFiles
lambda|->
name|createFileIcon
argument_list|(
name|linkedFiles
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|linkedFile
lambda|->
name|linkedFile
operator|.
name|getFileType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|externalFileTypeName
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|column
return|;
block|}
DECL|method|createFileIcon (List<LinkedFile> linkedFiles)
specifier|private
name|Node
name|createFileIcon
parameter_list|(
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|linkedFiles
parameter_list|)
block|{
if|if
condition|(
name|linkedFiles
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE_MULTIPLE
operator|.
name|getGraphicNode
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|linkedFiles
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|externalFileTypes
operator|.
name|fromLinkedFile
argument_list|(
name|linkedFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getIcon
argument_list|)
operator|.
name|orElse
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE
argument_list|)
operator|.
name|getGraphicNode
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

