begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.maintable
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefGUI
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanelMode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|PreviewPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CopyDoiUrlAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListEntry
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|menus
operator|.
name|RightClickMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldMenuAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldValueViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialFieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreviewPreferences
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * List event, mouse, key and focus listener for the main table that makes up the  * most part of the BasePanel for a single BIB database.  */
end_comment

begin_class
DECL|class|MainTableSelectionListener
specifier|public
class|class
name|MainTableSelectionListener
implements|implements
name|ListEventListener
argument_list|<
name|BibEntry
argument_list|>
implements|,
name|MouseListener
implements|,
name|KeyListener
implements|,
name|FocusListener
block|{
DECL|field|table
specifier|private
specifier|final
name|MainTable
name|table
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|tableRows
specifier|private
specifier|final
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|tableRows
decl_stmt|;
DECL|field|preview
specifier|private
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|previewActive
specifier|private
name|boolean
name|previewActive
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|isPreviewPanelEnabled
argument_list|()
decl_stmt|;
DECL|field|workingOnPreview
specifier|private
name|boolean
name|workingOnPreview
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
comment|// Register the last character pressed to quick jump in the table. Together
comment|// with storing the last row number jumped to, this is used to let multiple
comment|// key strokes cycle between all entries starting with the same letter:
DECL|field|lastPressed
specifier|private
specifier|final
name|int
index|[]
name|lastPressed
init|=
operator|new
name|int
index|[
literal|20
index|]
decl_stmt|;
DECL|field|lastPressedCount
specifier|private
name|int
name|lastPressedCount
decl_stmt|;
DECL|field|lastPressedTime
specifier|private
name|long
name|lastPressedTime
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MainTableSelectionListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MainTableSelectionListener (BasePanel panel, MainTable table)
specifier|public
name|MainTableSelectionListener
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|MainTable
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|tableRows
operator|=
name|table
operator|.
name|getTableModel
argument_list|()
operator|.
name|getTableRows
argument_list|()
expr_stmt|;
name|PreviewPanel
name|previewPanel
init|=
name|panel
operator|.
name|getPreviewPanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|previewPanel
operator|!=
literal|null
condition|)
block|{
name|preview
operator|=
name|previewPanel
expr_stmt|;
block|}
else|else
block|{
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
literal|null
argument_list|,
name|panel
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|preview
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|listChanged (ListEvent<BibEntry> e)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
argument_list|<
name|BibEntry
argument_list|>
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|selected
init|=
name|e
operator|.
name|getSourceList
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|BibEntry
name|newSelected
init|=
name|selected
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|panel
operator|.
name|getMode
argument_list|()
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
operator|||
name|panel
operator|.
name|getMode
argument_list|()
operator|==
name|BasePanelMode
operator|.
name|WILL_SHOW_EDITOR
operator|)
operator|&&
name|panel
operator|.
name|getCurrentEditor
argument_list|()
operator|!=
literal|null
operator|&&
name|newSelected
operator|==
name|panel
operator|.
name|getCurrentEditor
argument_list|()
operator|.
name|getEntry
argument_list|()
condition|)
block|{
comment|// entry already selected and currently editing it, do not steal the focus from the selected textfield
return|return;
block|}
if|if
condition|(
name|newSelected
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BasePanelMode
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
comment|// What is the panel already showing?
if|if
condition|(
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|WILL_SHOW_EDITOR
operator|)
operator|||
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
operator|)
condition|)
block|{
comment|// An entry is currently being edited.
name|EntryEditor
name|oldEditor
init|=
name|panel
operator|.
name|getCurrentEditor
argument_list|()
decl_stmt|;
name|String
name|visName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldEditor
operator|!=
literal|null
condition|)
block|{
name|visName
operator|=
name|oldEditor
operator|.
name|getVisiblePanelName
argument_list|()
expr_stmt|;
block|}
comment|// Get a new editor for the entry to edit:
name|EntryEditor
name|newEditor
init|=
name|panel
operator|.
name|getEntryEditor
argument_list|(
name|newSelected
argument_list|)
decl_stmt|;
comment|// Show the new editor unless it was already visible:
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|newEditor
argument_list|,
name|oldEditor
argument_list|)
operator|||
operator|(
name|mode
operator|!=
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
operator|)
condition|)
block|{
if|if
condition|(
name|visName
operator|!=
literal|null
condition|)
block|{
name|newEditor
operator|.
name|setVisiblePanel
argument_list|(
name|visName
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|showEntryEditor
argument_list|(
name|newEditor
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|table
operator|.
name|ensureVisible
argument_list|(
name|table
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if not used destroy the EntryEditor
name|newEditor
operator|.
name|setMovingToDifferentEntry
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Either nothing or a preview was shown. Update the preview.
if|if
condition|(
name|previewActive
condition|)
block|{
name|updatePreview
argument_list|(
name|newSelected
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|updatePreview (final BibEntry toShow, final boolean changedPreview)
specifier|private
name|void
name|updatePreview
parameter_list|(
specifier|final
name|BibEntry
name|toShow
parameter_list|,
specifier|final
name|boolean
name|changedPreview
parameter_list|)
block|{
name|updatePreview
argument_list|(
name|toShow
argument_list|,
name|changedPreview
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePreview (final BibEntry toShow, final boolean changedPreview, int repeats)
specifier|private
name|void
name|updatePreview
parameter_list|(
specifier|final
name|BibEntry
name|toShow
parameter_list|,
specifier|final
name|boolean
name|changedPreview
parameter_list|,
name|int
name|repeats
parameter_list|)
block|{
if|if
condition|(
name|workingOnPreview
condition|)
block|{
if|if
condition|(
name|repeats
operator|>
literal|0
condition|)
block|{
return|return;
comment|// We've already waited once. Give up on this selection.
block|}
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|(
literal|50
argument_list|,
name|actionEvent
lambda|->
name|updatePreview
argument_list|(
name|toShow
argument_list|,
name|changedPreview
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|setRepeats
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
return|return;
block|}
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|list
init|=
name|table
operator|.
name|getSelected
argument_list|()
decl_stmt|;
comment|// Check if the entry to preview is still selected:
if|if
condition|(
operator|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
operator|||
operator|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
name|toShow
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|BasePanelMode
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|workingOnPreview
operator|=
literal|true
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
comment|// If nothing was already shown, set the preview and move the separator:
if|if
condition|(
name|changedPreview
operator|||
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
operator|)
condition|)
block|{
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
name|workingOnPreview
operator|=
literal|false
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|editSignalled ()
specifier|public
name|void
name|editSignalled
parameter_list|()
block|{
if|if
condition|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|editSignalled
argument_list|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|editSignalled (BibEntry entry)
specifier|public
name|void
name|editSignalled
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
specifier|final
name|BasePanelMode
name|mode
init|=
name|panel
operator|.
name|getMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|!=
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|panel
operator|.
name|showEntryEditor
argument_list|(
name|panel
operator|.
name|getEntryEditor
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getCurrentEditor
argument_list|()
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// First find the column and row on which the user has clicked.
specifier|final
name|int
name|col
init|=
name|table
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// get the MainTableColumn which is currently visible at col
name|int
name|modelIndex
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|col
argument_list|)
operator|.
name|getModelIndex
argument_list|()
decl_stmt|;
name|MainTableColumn
name|modelColumn
init|=
name|table
operator|.
name|getMainTableColumn
argument_list|(
name|modelIndex
argument_list|)
decl_stmt|;
comment|// Check if the user has right-clicked. If so, open the right-click menu.
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
operator|||
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|modelColumn
operator|==
literal|null
operator|)
operator|||
operator|!
name|modelColumn
operator|.
name|isIconColumn
argument_list|()
condition|)
block|{
comment|// show normal right click menu
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// show right click menu for icon columns
name|showIconRightClickMenu
argument_list|(
name|e
argument_list|,
name|row
argument_list|,
name|modelColumn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// all handling is done in "mouseReleased"
block|}
annotation|@
name|Override
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// First find the column on which the user has clicked.
specifier|final
name|int
name|row
init|=
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// A double click on an entry should open the entry's editor.
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|BibEntry
name|toShow
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|editSignalled
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|col
init|=
name|table
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// get the MainTableColumn which is currently visible at col
name|int
name|modelIndex
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
operator|.
name|getColumn
argument_list|(
name|col
argument_list|)
operator|.
name|getModelIndex
argument_list|()
decl_stmt|;
name|MainTableColumn
name|modelColumn
init|=
name|table
operator|.
name|getMainTableColumn
argument_list|(
name|modelIndex
argument_list|)
decl_stmt|;
comment|// Workaround for Windows. Right-click is not popup trigger on mousePressed, but
comment|// on mouseReleased. Therefore we need to avoid taking action at this point, because
comment|// action will be taken when the button is released:
if|if
condition|(
name|OS
operator|.
name|WINDOWS
operator|&&
operator|(
name|modelColumn
operator|.
name|isIconColumn
argument_list|()
operator|)
operator|&&
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|!=
name|MouseEvent
operator|.
name|BUTTON1
operator|)
condition|)
block|{
return|return;
block|}
comment|// Check if the clicked colum is a specialfield column
if|if
condition|(
name|modelColumn
operator|.
name|isIconColumn
argument_list|()
operator|&&
operator|(
name|SpecialField
operator|.
name|isSpecialField
argument_list|(
name|modelColumn
operator|.
name|getColumnName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// handle specialfield
name|handleSpecialFieldLeftClick
argument_list|(
name|e
argument_list|,
name|modelColumn
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|modelColumn
operator|.
name|isIconColumn
argument_list|()
condition|)
block|{
comment|// left click on icon field
name|Object
name|value
init|=
name|table
operator|.
name|getValueAt
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
comment|// No icon here, so we do nothing.
block|}
specifier|final
name|BibEntry
name|entry
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|modelColumn
operator|.
name|getBibtexFields
argument_list|()
decl_stmt|;
comment|// Open it now. We do this in a thread, so the program won't freeze during the wait.
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
comment|// check for all field names whether a link is present
comment|// (is relevant for combinations such as "url/doi")
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
comment|// Check if field is present, if not skip this field
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|String
name|link
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// See if this is a simple file link field, or if it is a file-list
comment|// field that can specify a list of links:
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
condition|)
block|{
comment|// We use a FileListTableModel to parse the field content:
name|FileListTableModel
name|fileList
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|fileList
operator|.
name|setContent
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|FileListEntry
name|flEntry
init|=
literal|null
decl_stmt|;
comment|// If there are one or more links of the correct type, open the first one:
if|if
condition|(
name|modelColumn
operator|.
name|isFileFilter
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fileList
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
operator|.
name|type
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|modelColumn
operator|.
name|getColumnName
argument_list|()
argument_list|)
condition|)
block|{
name|flEntry
operator|=
name|fileList
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|fileList
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//If there are no file types specified open the first file
name|flEntry
operator|=
name|fileList
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flEntry
operator|!=
literal|null
condition|)
block|{
name|ExternalFileMenuItem
name|item
init|=
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
literal|""
argument_list|,
name|flEntry
operator|.
name|link
argument_list|,
name|flEntry
operator|.
name|type
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getIcon
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|flEntry
operator|.
name|type
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|item
operator|.
name|openLink
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to open link."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|link
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to open link."
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Unable to open link"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
comment|// only open the first link
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|modelColumn
operator|.
name|getBibtexFields
argument_list|()
operator|.
name|contains
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|)
condition|)
block|{
comment|// Clicking on crossref column
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|CROSSREF
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|crossref
lambda|->
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|crossref
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|entry
lambda|->
name|panel
operator|.
name|highlightEntry
argument_list|(
name|entry
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|updateEnabledState
argument_list|()
expr_stmt|;
block|}
comment|/**      * Method to handle a single left click on one the special fields (e.g., ranking, quality, ...)      * Shows either a popup to select/clear a value or simply toggles the functionality to set/unset the special field      *      * @param e MouseEvent used to determine the position of the popups      * @param columnName the name of the specialfield column      */
DECL|method|handleSpecialFieldLeftClick (MouseEvent e, String columnName)
specifier|private
name|void
name|handleSpecialFieldLeftClick
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|SpecialField
operator|.
name|getSpecialFieldInstanceFromFieldName
argument_list|(
name|columnName
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|field
lambda|->
block|{
comment|// special field found
if|if
condition|(
name|field
operator|.
name|isSingleValueField
argument_list|()
condition|)
block|{
comment|// directly execute toggle action instead of showing a menu with one action
operator|new
name|SpecialFieldViewModel
argument_list|(
name|field
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|field
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|panel
operator|.
name|frame
argument_list|()
argument_list|)
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|SpecialFieldValue
name|val
range|:
name|field
operator|.
name|getValues
argument_list|()
control|)
block|{
name|menu
operator|.
name|add
argument_list|(
operator|new
name|SpecialFieldMenuAction
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|val
argument_list|)
argument_list|,
name|panel
operator|.
name|frame
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Process general right-click events on the table. Show the table context menu at      * the position where the user right-clicked.      * @param e The mouse event defining the popup trigger.      * @param row The row where the event occurred.      */
DECL|method|processPopupTrigger (MouseEvent e, int row)
specifier|private
name|void
name|processPopupTrigger
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|int
name|selRow
init|=
name|table
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|selRow
operator|==
operator|-
literal|1
operator|)
operator|||
operator|!
name|table
operator|.
name|isRowSelected
argument_list|(
name|table
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|RightClickMenu
name|rightClickMenu
init|=
operator|new
name|RightClickMenu
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
name|panel
argument_list|)
decl_stmt|;
name|rightClickMenu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Process popup trigger events occurring on an icon cell in the table. Show a menu where the user can choose which      * external resource to open for the entry. If no relevant external resources exist, let the normal popup trigger      * handler do its thing instead.      *      * @param e The mouse event defining this popup trigger.      * @param row The row where the event occurred.      * @param column the MainTableColumn associated with this table cell.      */
DECL|method|showIconRightClickMenu (MouseEvent e, int row, MainTableColumn column)
specifier|private
name|void
name|showIconRightClickMenu
parameter_list|(
name|MouseEvent
name|e
parameter_list|,
name|int
name|row
parameter_list|,
name|MainTableColumn
name|column
parameter_list|)
block|{
name|BibEntry
name|entry
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|boolean
name|showDefaultPopup
init|=
literal|true
decl_stmt|;
comment|// See if this is a simple file link field, or if it is a file-list
comment|// field that can specify a list of links:
if|if
condition|(
operator|!
name|column
operator|.
name|getBibtexFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|column
operator|.
name|getBibtexFields
argument_list|()
control|)
block|{
if|if
condition|(
name|FieldName
operator|.
name|FILE
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
comment|// We use a FileListTableModel to parse the field content:
name|FileListTableModel
name|fileList
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fileList
operator|::
name|setContent
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|fileList
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|isFileFilter
argument_list|()
operator|&&
operator|(
operator|!
name|flEntry
operator|.
name|type
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|String
name|description
init|=
name|flEntry
operator|.
name|description
decl_stmt|;
if|if
condition|(
operator|(
name|description
operator|==
literal|null
operator|)
operator|||
operator|(
name|description
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|description
operator|=
name|flEntry
operator|.
name|link
expr_stmt|;
block|}
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
name|description
argument_list|,
name|flEntry
operator|.
name|link
argument_list|,
name|flEntry
operator|.
name|type
operator|.
name|get
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|flEntry
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|showDefaultPopup
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|SpecialField
operator|.
name|isSpecialField
argument_list|(
name|column
operator|.
name|getColumnName
argument_list|()
argument_list|)
condition|)
block|{
comment|// full pop should be shown as left click already shows short popup
name|showDefaultPopup
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|content
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Icon
name|icon
decl_stmt|;
name|JLabel
name|iconLabel
init|=
name|GUIGlobals
operator|.
name|getTableIcon
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconLabel
operator|==
literal|null
condition|)
block|{
name|icon
operator|=
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|FILE
operator|.
name|getIcon
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|icon
operator|=
name|iconLabel
operator|.
name|getIcon
argument_list|()
expr_stmt|;
block|}
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|panel
operator|.
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
name|content
operator|.
name|get
argument_list|()
argument_list|,
name|content
operator|.
name|get
argument_list|()
argument_list|,
name|icon
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|)
condition|)
block|{
name|menu
operator|.
name|add
argument_list|(
operator|new
name|CopyDoiUrlAction
argument_list|(
name|content
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|showDefaultPopup
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|showDefaultPopup
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menu
operator|.
name|show
argument_list|(
name|table
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|entryEditorClosing (EntryEditor editor)
specifier|public
name|void
name|entryEditorClosing
parameter_list|(
name|EntryEditor
name|editor
parameter_list|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|editor
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|previewActive
condition|)
block|{
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
block|}
name|panel
operator|.
name|adjustSplitter
argument_list|()
expr_stmt|;
name|table
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mouseEntered (MouseEvent e)
specifier|public
name|void
name|mouseEntered
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|mouseExited (MouseEvent e)
specifier|public
name|void
name|mouseExited
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
DECL|method|setPreviewActive (boolean enabled)
specifier|public
name|void
name|setPreviewActive
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|previewActive
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|previewActive
condition|)
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updatePreview
argument_list|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|panel
operator|.
name|hideBottomComponent
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|nextPreviewStyle ()
specifier|public
name|void
name|nextPreviewStyle
parameter_list|()
block|{
name|cyclePreview
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewCyclePosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|previousPreviewStyle ()
specifier|public
name|void
name|previousPreviewStyle
parameter_list|()
block|{
name|cyclePreview
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewCyclePosition
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|cyclePreview (int newPosition)
specifier|private
name|void
name|cyclePreview
parameter_list|(
name|int
name|newPosition
parameter_list|)
block|{
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewCyclePosition
argument_list|(
name|newPosition
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
name|preview
operator|.
name|updateLayout
argument_list|()
expr_stmt|;
name|preview
operator|.
name|update
argument_list|()
expr_stmt|;
name|panel
operator|.
name|showPreview
argument_list|(
name|preview
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updatePreview
argument_list|(
name|table
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Receive key event on the main table. If the key is a letter or a digit,      * we should select the first entry in the table which starts with the given      * letter in the column by which the table is sorted.      * @param e The KeyEvent      */
annotation|@
name|Override
DECL|method|keyTyped (KeyEvent e)
specifier|public
name|void
name|keyTyped
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|!
name|e
operator|.
name|isActionKey
argument_list|()
operator|)
operator|&&
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|e
operator|.
name|getKeyChar
argument_list|()
argument_list|)
operator|&&
operator|(
name|e
operator|.
name|getModifiers
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|long
name|QUICK_JUMP_TIMEOUT
init|=
literal|2000
decl_stmt|;
if|if
condition|(
operator|(
name|time
operator|-
name|lastPressedTime
operator|)
operator|>
name|QUICK_JUMP_TIMEOUT
condition|)
block|{
name|lastPressedCount
operator|=
literal|0
expr_stmt|;
comment|// Reset last pressed character
block|}
comment|// Update timestamp:
name|lastPressedTime
operator|=
name|time
expr_stmt|;
comment|// Add the new char to the search array:
name|int
name|c
init|=
name|e
operator|.
name|getKeyChar
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastPressedCount
operator|<
name|lastPressed
operator|.
name|length
condition|)
block|{
name|lastPressed
index|[
name|lastPressedCount
index|]
operator|=
name|c
expr_stmt|;
name|lastPressedCount
operator|++
expr_stmt|;
block|}
name|int
name|sortingColumn
init|=
name|table
operator|.
name|getSortingColumn
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortingColumn
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
comment|// No sorting? TODO: look up by author, etc.?
block|}
comment|// TODO: the following lookup should be done by a faster algorithm,
comment|// such as binary search. But the table may not be sorted properly,
comment|// due to marked entries, search etc., which rules out the binary search.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|table
operator|.
name|getValueAt
argument_list|(
name|i
argument_list|,
name|sortingColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|s
init|=
name|o
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>=
name|lastPressedCount
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lastPressedCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|!=
name|lastPressed
index|[
name|j
index|]
condition|)
block|{
break|break;
comment|// Escape the loop immediately when we find a mismatch
block|}
elseif|else
if|if
condition|(
name|j
operator|==
operator|(
name|lastPressedCount
operator|-
literal|1
operator|)
condition|)
block|{
comment|// We found a match:
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|table
operator|.
name|ensureVisible
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getKeyChar
argument_list|()
operator|==
name|KeyEvent
operator|.
name|VK_ESCAPE
condition|)
block|{
name|lastPressedCount
operator|=
literal|0
expr_stmt|;
block|}
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|updateEnabledState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keyReleased (KeyEvent e)
specifier|public
name|void
name|keyReleased
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|keyPressed (KeyEvent e)
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|focusGained (FocusEvent e)
specifier|public
name|void
name|focusGained
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|focusLost (FocusEvent e)
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|e
parameter_list|)
block|{
name|lastPressedCount
operator|=
literal|0
expr_stmt|;
comment|// Reset quick jump when focus is lost.
block|}
DECL|method|getPreview ()
specifier|public
name|PreviewPanel
name|getPreview
parameter_list|()
block|{
return|return
name|preview
return|;
block|}
block|}
end_class

end_unit

