begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.maintable
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexSingleField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ColumnPreferences
specifier|public
class|class
name|ColumnPreferences
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ColumnPreferences
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|showFileColumn
specifier|private
specifier|final
name|boolean
name|showFileColumn
decl_stmt|;
DECL|field|showUrlColumn
specifier|private
specifier|final
name|boolean
name|showUrlColumn
decl_stmt|;
DECL|field|preferDoiOverUrl
specifier|private
specifier|final
name|boolean
name|preferDoiOverUrl
decl_stmt|;
DECL|field|showEprintColumn
specifier|private
specifier|final
name|boolean
name|showEprintColumn
decl_stmt|;
DECL|field|normalColumns
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|normalColumns
decl_stmt|;
DECL|field|specialFieldColumns
specifier|private
specifier|final
name|List
argument_list|<
name|SpecialField
argument_list|>
name|specialFieldColumns
decl_stmt|;
DECL|field|extraFileColumns
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|extraFileColumns
decl_stmt|;
DECL|field|columnWidths
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|columnWidths
decl_stmt|;
DECL|method|ColumnPreferences (boolean showFileColumn, boolean showUrlColumn, boolean preferDoiOverUrl, boolean showEprintColumn, List<String> normalColumns, List<SpecialField> specialFieldColumns, List<String> extraFileColumns, Map<String, Double> columnWidths)
specifier|public
name|ColumnPreferences
parameter_list|(
name|boolean
name|showFileColumn
parameter_list|,
name|boolean
name|showUrlColumn
parameter_list|,
name|boolean
name|preferDoiOverUrl
parameter_list|,
name|boolean
name|showEprintColumn
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|normalColumns
parameter_list|,
name|List
argument_list|<
name|SpecialField
argument_list|>
name|specialFieldColumns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|extraFileColumns
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|columnWidths
parameter_list|)
block|{
name|this
operator|.
name|showFileColumn
operator|=
name|showFileColumn
expr_stmt|;
name|this
operator|.
name|showUrlColumn
operator|=
name|showUrlColumn
expr_stmt|;
name|this
operator|.
name|preferDoiOverUrl
operator|=
name|preferDoiOverUrl
expr_stmt|;
name|this
operator|.
name|showEprintColumn
operator|=
name|showEprintColumn
expr_stmt|;
name|this
operator|.
name|normalColumns
operator|=
name|normalColumns
expr_stmt|;
name|this
operator|.
name|specialFieldColumns
operator|=
name|specialFieldColumns
expr_stmt|;
name|this
operator|.
name|extraFileColumns
operator|=
name|extraFileColumns
expr_stmt|;
name|this
operator|.
name|columnWidths
operator|=
name|columnWidths
expr_stmt|;
block|}
DECL|method|from (JabRefPreferences preferences)
specifier|public
specifier|static
name|ColumnPreferences
name|from
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
return|return
operator|new
name|ColumnPreferences
argument_list|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|)
argument_list|,
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|URL_COLUMN
argument_list|)
argument_list|,
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|)
argument_list|,
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ARXIV_COLUMN
argument_list|)
argument_list|,
name|preferences
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|)
argument_list|,
name|createSpecialFieldColumns
argument_list|(
name|preferences
argument_list|)
argument_list|,
name|createExtraFileColumns
argument_list|(
name|preferences
argument_list|)
argument_list|,
name|createColumnWidths
argument_list|(
name|preferences
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createColumnWidths (JabRefPreferences preferences)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|createColumnWidths
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|preferences
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|widths
init|=
name|preferences
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|string
lambda|->
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Exception while parsing column widths. Choosing default."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|widths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|createExtraFileColumns (JabRefPreferences preferences)
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createExtraFileColumns
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXTRA_FILE_COLUMNS
argument_list|)
condition|)
block|{
return|return
name|preferences
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|createSpecialFieldColumns (JabRefPreferences preferences)
specifier|private
specifier|static
name|List
argument_list|<
name|SpecialField
argument_list|>
name|createSpecialFieldColumns
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SPECIALFIELDSENABLED
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|SpecialField
argument_list|>
name|fieldsToShow
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_RANKING
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|RANKING
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_RELEVANCE
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_QUALITY
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|QUALITY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_PRIORITY
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|PRIORITY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_PRINTED
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|PRINTED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preferences
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_READ
argument_list|)
condition|)
block|{
name|fieldsToShow
operator|.
name|add
argument_list|(
name|SpecialField
operator|.
name|READ_STATUS
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldsToShow
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|showFileColumn ()
specifier|public
name|boolean
name|showFileColumn
parameter_list|()
block|{
return|return
name|showFileColumn
return|;
block|}
DECL|method|showUrlColumn ()
specifier|public
name|boolean
name|showUrlColumn
parameter_list|()
block|{
return|return
name|showUrlColumn
return|;
block|}
DECL|method|preferDoiOverUrl ()
specifier|public
name|boolean
name|preferDoiOverUrl
parameter_list|()
block|{
return|return
name|preferDoiOverUrl
return|;
block|}
DECL|method|showEprintColumn ()
specifier|public
name|boolean
name|showEprintColumn
parameter_list|()
block|{
return|return
name|showEprintColumn
return|;
block|}
DECL|method|getExtraFileColumns ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExtraFileColumns
parameter_list|()
block|{
return|return
name|extraFileColumns
return|;
block|}
DECL|method|getSpecialFieldColumns ()
specifier|public
name|List
argument_list|<
name|SpecialField
argument_list|>
name|getSpecialFieldColumns
parameter_list|()
block|{
return|return
name|specialFieldColumns
return|;
block|}
DECL|method|getNormalColumns ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNormalColumns
parameter_list|()
block|{
return|return
name|normalColumns
return|;
block|}
DECL|method|getPrefColumnWidth (String columnName)
specifier|public
name|double
name|getPrefColumnWidth
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
name|columnWidths
operator|.
name|getOrDefault
argument_list|(
name|columnName
argument_list|,
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
return|;
block|}
block|}
end_class

end_unit

