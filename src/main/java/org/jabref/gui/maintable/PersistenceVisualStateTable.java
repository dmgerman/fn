begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.maintable
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
operator|.
name|SortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_comment
comment|/**  * Keep track of changes made to the columns, like reordering or resizing.  *  */
end_comment

begin_class
DECL|class|PersistenceVisualStateTable
specifier|public
class|class
name|PersistenceVisualStateTable
block|{
DECL|field|mainTable
specifier|private
specifier|final
name|MainTable
name|mainTable
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
decl_stmt|;
DECL|field|columnsSortOrder
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortType
argument_list|>
name|columnsSortOrder
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PersistenceVisualStateTable (final MainTable mainTable, JabRefPreferences preferences)
specifier|public
name|PersistenceVisualStateTable
parameter_list|(
specifier|final
name|MainTable
name|mainTable
parameter_list|,
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|mainTable
operator|=
name|mainTable
expr_stmt|;
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
name|mainTable
operator|.
name|getColumns
argument_list|()
operator|.
name|addListener
argument_list|(
name|this
operator|::
name|onColumnsChanged
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|getColumns
argument_list|()
operator|.
name|forEach
argument_list|(
name|col
lambda|->
name|col
operator|.
name|sortTypeProperty
argument_list|()
operator|.
name|addListener
argument_list|(
name|obs
lambda|->
name|updateColumnSortType
argument_list|(
name|col
operator|.
name|getText
argument_list|()
argument_list|,
name|col
operator|.
name|getSortType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|getColumns
argument_list|()
operator|.
name|forEach
argument_list|(
name|col
lambda|->
name|col
operator|.
name|widthProperty
argument_list|()
operator|.
name|addListener
argument_list|(
name|obs
lambda|->
name|updateColumnPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|onColumnsChanged (ListChangeListener.Change<? extends TableColumn<BibEntryTableViewModel, ?>> change)
specifier|private
name|void
name|onColumnsChanged
parameter_list|(
name|ListChangeListener
operator|.
name|Change
argument_list|<
name|?
extends|extends
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|?
argument_list|>
argument_list|>
name|change
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|change
operator|.
name|next
argument_list|()
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|updateColumnPreferences
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateColumnSortType (String text, SortType sortType)
specifier|private
name|void
name|updateColumnSortType
parameter_list|(
name|String
name|text
parameter_list|,
name|SortType
name|sortType
parameter_list|)
block|{
name|columnsSortOrder
operator|.
name|put
argument_list|(
name|text
argument_list|,
name|sortType
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setMainTableColumnSortType
argument_list|(
name|columnsSortOrder
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store shown columns and their width in preferences.      */
DECL|method|updateColumnPreferences ()
specifier|private
name|void
name|updateColumnPreferences
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnsWidths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableColumn
argument_list|<
name|BibEntryTableViewModel
argument_list|,
name|?
argument_list|>
name|column
range|:
name|mainTable
operator|.
name|getColumns
argument_list|()
control|)
block|{
if|if
condition|(
name|column
operator|instanceof
name|NormalTableColumn
condition|)
block|{
name|NormalTableColumn
name|normalColumn
init|=
operator|(
name|NormalTableColumn
operator|)
name|column
decl_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|normalColumn
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|columnsWidths
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|normalColumn
operator|.
name|getWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|columnsWidths
operator|.
name|size
argument_list|()
operator|&&
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|preferences
operator|.
name|getStringList
argument_list|(
name|preferences
operator|.
name|COLUMN_NAMES
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|preferences
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|,
name|columnNames
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|,
name|columnsWidths
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

