begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.logging
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|logging
operator|.
name|LogMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|applicationinsights
operator|.
name|telemetry
operator|.
name|ExceptionTelemetry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|applicationinsights
operator|.
name|telemetry
operator|.
name|Telemetry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|applicationinsights
operator|.
name|telemetry
operator|.
name|TraceTelemetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AbstractAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|plugins
operator|.
name|PluginBuilderFactory
import|;
end_import

begin_class
annotation|@
name|Plugin
argument_list|(
name|name
operator|=
literal|"OurApplicationInsightsAppender"
argument_list|,
name|category
operator|=
literal|"Core"
argument_list|,
name|elementType
operator|=
literal|"appender"
argument_list|,
name|printObject
operator|=
literal|true
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// class is indirectly constructed by log4j
DECL|class|ApplicationInsightsAppender
specifier|public
class|class
name|ApplicationInsightsAppender
extends|extends
name|AbstractAppender
block|{
DECL|method|ApplicationInsightsAppender (String name, Filter filter, boolean ignoreExceptions, Property[] properties)
specifier|private
name|ApplicationInsightsAppender
parameter_list|(
name|String
name|name
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|boolean
name|ignoreExceptions
parameter_list|,
name|Property
index|[]
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|,
name|ignoreExceptions
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PluginBuilderFactory
DECL|method|newBuilder ()
specifier|public
specifier|static
parameter_list|<
name|B
extends|extends
name|Builder
argument_list|<
name|B
argument_list|>
parameter_list|>
name|B
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|<
name|B
argument_list|>
argument_list|()
operator|.
name|asBuilder
argument_list|()
return|;
block|}
comment|/**      * The log event will be forwarded to the {@link LogMessages} archive.      */
annotation|@
name|Override
DECL|method|append (LogEvent rawEvent)
specifier|public
name|void
name|append
parameter_list|(
name|LogEvent
name|rawEvent
parameter_list|)
block|{
name|ApplicationInsightsLogEvent
name|event
init|=
operator|new
name|ApplicationInsightsLogEvent
argument_list|(
name|rawEvent
argument_list|)
decl_stmt|;
name|Telemetry
name|telemetry
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|isException
argument_list|()
condition|)
block|{
name|ExceptionTelemetry
name|exceptionTelemetry
init|=
operator|new
name|ExceptionTelemetry
argument_list|(
name|event
operator|.
name|getException
argument_list|()
argument_list|)
decl_stmt|;
name|exceptionTelemetry
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"Message"
argument_list|,
name|rawEvent
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exceptionTelemetry
operator|.
name|setSeverityLevel
argument_list|(
name|event
operator|.
name|getNormalizedSeverityLevel
argument_list|()
argument_list|)
expr_stmt|;
name|telemetry
operator|=
name|exceptionTelemetry
expr_stmt|;
block|}
else|else
block|{
name|TraceTelemetry
name|traceTelemetry
init|=
operator|new
name|TraceTelemetry
argument_list|(
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|traceTelemetry
operator|.
name|setSeverityLevel
argument_list|(
name|event
operator|.
name|getNormalizedSeverityLevel
argument_list|()
argument_list|)
expr_stmt|;
name|telemetry
operator|=
name|traceTelemetry
expr_stmt|;
block|}
name|telemetry
operator|.
name|getContext
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|event
operator|.
name|getCustomParameters
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|getTelemetryClient
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|client
lambda|->
name|client
operator|.
name|track
argument_list|(
name|telemetry
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
parameter_list|<
name|B
extends|extends
name|Builder
parameter_list|<
name|B
parameter_list|>
parameter_list|>
extends|extends
name|AbstractAppender
operator|.
name|Builder
argument_list|<
name|B
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|plugins
operator|.
name|util
operator|.
name|Builder
argument_list|<
name|ApplicationInsightsAppender
argument_list|>
block|{
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|ApplicationInsightsAppender
name|build
parameter_list|()
block|{
return|return
operator|new
name|ApplicationInsightsAppender
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|getFilter
argument_list|()
argument_list|,
name|this
operator|.
name|isIgnoreExceptions
argument_list|()
argument_list|,
name|this
operator|.
name|getPropertyArray
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

