begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.logging
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|logging
package|;
end_package

begin_comment
comment|/*  * ApplicationInsights-Java  * Copyright (c) Microsoft Corporation  * All rights reserved.  *  * MIT License  * Permission is hereby granted, free of charge, to any person obtaining a copy of this  * software and associated documentation files (the ""Software""), to deal in the Software  * without restriction, including without limitation the rights to use, copy, modify, merge,  * publish, distribute, sublicense, and/or sell copies of the Software, and to permit  * persons to whom the Software is furnished to do so, subject to the following conditions:  * The above copyright notice and this permission notice shall be included in all copies or  * substantial portions of the Software.  * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR  * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE  * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|applicationinsights
operator|.
name|internal
operator|.
name|common
operator|.
name|ApplicationInsightsEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|applicationinsights
operator|.
name|internal
operator|.
name|logger
operator|.
name|InternalLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|microsoft
operator|.
name|applicationinsights
operator|.
name|telemetry
operator|.
name|SeverityLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|spi
operator|.
name|StandardLevel
import|;
end_import

begin_comment
comment|// TODO: Remove this copy as soon as the one included in AI is compatible with log4j 3
end_comment

begin_class
DECL|class|ApplicationInsightsLogEvent
specifier|public
specifier|final
class|class
name|ApplicationInsightsLogEvent
extends|extends
name|ApplicationInsightsEvent
block|{
DECL|field|logEvent
specifier|private
name|LogEvent
name|logEvent
decl_stmt|;
DECL|method|ApplicationInsightsLogEvent (LogEvent logEvent)
specifier|public
name|ApplicationInsightsLogEvent
parameter_list|(
name|LogEvent
name|logEvent
parameter_list|)
block|{
name|this
operator|.
name|logEvent
operator|=
name|logEvent
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|String
name|message
init|=
name|this
operator|.
name|logEvent
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|?
name|this
operator|.
name|logEvent
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
else|:
literal|"Log4j Trace"
decl_stmt|;
return|return
name|message
return|;
block|}
annotation|@
name|Override
DECL|method|isException ()
specifier|public
name|boolean
name|isException
parameter_list|()
block|{
return|return
name|this
operator|.
name|logEvent
operator|.
name|getThrown
argument_list|()
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getException ()
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|throwable
init|=
name|this
operator|.
name|logEvent
operator|.
name|getThrown
argument_list|()
decl_stmt|;
name|exception
operator|=
name|throwable
operator|instanceof
name|Exception
condition|?
operator|(
name|Exception
operator|)
name|throwable
else|:
operator|new
name|Exception
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
return|return
name|exception
return|;
block|}
annotation|@
name|Override
DECL|method|getCustomParameters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCustomParameters
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metaData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|put
argument_list|(
literal|"SourceType"
argument_list|,
literal|"Log4j"
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"LoggerName"
argument_list|,
name|logEvent
operator|.
name|getLoggerName
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"LoggingLevel"
argument_list|,
name|logEvent
operator|.
name|getLevel
argument_list|()
operator|!=
literal|null
condition|?
name|logEvent
operator|.
name|getLevel
argument_list|()
operator|.
name|name
argument_list|()
else|:
literal|null
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"ThreadName"
argument_list|,
name|logEvent
operator|.
name|getThreadName
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"TimeStamp"
argument_list|,
name|getFormattedDate
argument_list|(
name|logEvent
operator|.
name|getTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
if|if
condition|(
name|isException
argument_list|()
condition|)
block|{
name|addLogEventProperty
argument_list|(
literal|"Logger Message"
argument_list|,
name|getMessage
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logEvent
operator|.
name|isIncludeLocation
argument_list|()
condition|)
block|{
name|StackTraceElement
name|stackTraceElement
init|=
name|logEvent
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|addLogEventProperty
argument_list|(
literal|"ClassName"
argument_list|,
name|stackTraceElement
operator|.
name|getClassName
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"FileName"
argument_list|,
name|stackTraceElement
operator|.
name|getFileName
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"MethodName"
argument_list|,
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
name|addLogEventProperty
argument_list|(
literal|"LineNumber"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|stackTraceElement
operator|.
name|getLineNumber
argument_list|()
argument_list|)
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|logEvent
operator|.
name|getContextData
argument_list|()
operator|.
name|toMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addLogEventProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Username, domain and identity should be included as in .NET version.
comment|// TODO: Should check, seems that it is not included in Log4j2.
return|return
name|metaData
return|;
block|}
annotation|@
name|Override
DECL|method|getNormalizedSeverityLevel ()
specifier|public
name|SeverityLevel
name|getNormalizedSeverityLevel
parameter_list|()
block|{
name|int
name|log4jLevelAsInt
init|=
name|logEvent
operator|.
name|getLevel
argument_list|()
operator|.
name|intLevel
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|StandardLevel
operator|.
name|getStandardLevel
argument_list|(
name|log4jLevelAsInt
argument_list|)
condition|)
block|{
case|case
name|FATAL
case|:
return|return
name|SeverityLevel
operator|.
name|Critical
return|;
case|case
name|ERROR
case|:
return|return
name|SeverityLevel
operator|.
name|Error
return|;
case|case
name|WARN
case|:
return|return
name|SeverityLevel
operator|.
name|Warning
return|;
case|case
name|INFO
case|:
return|return
name|SeverityLevel
operator|.
name|Information
return|;
case|case
name|TRACE
case|:
case|case
name|DEBUG
case|:
case|case
name|ALL
case|:
return|return
name|SeverityLevel
operator|.
name|Verbose
return|;
default|default:
name|InternalLogger
operator|.
name|INSTANCE
operator|.
name|error
argument_list|(
literal|"Unknown Log4j v2 option, %d, using TRACE level as default"
argument_list|,
name|log4jLevelAsInt
argument_list|)
expr_stmt|;
return|return
name|SeverityLevel
operator|.
name|Verbose
return|;
block|}
block|}
block|}
end_class

end_unit

