begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|UnknownExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|AutoLinkPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileFinders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AutoSetFileLinksUtil
specifier|public
class|class
name|AutoSetFileLinksUtil
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AutoSetLinks
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|directories
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|directories
decl_stmt|;
DECL|field|autoLinkPreferences
specifier|private
name|AutoLinkPreferences
name|autoLinkPreferences
decl_stmt|;
DECL|field|externalFileTypes
specifier|private
name|ExternalFileTypes
name|externalFileTypes
decl_stmt|;
DECL|method|AutoSetFileLinksUtil (BibDatabaseContext databaseContext, FilePreferences filePreferences, AutoLinkPreferences autoLinkPreferences, ExternalFileTypes externalFileTypes)
specifier|public
name|AutoSetFileLinksUtil
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|FilePreferences
name|filePreferences
parameter_list|,
name|AutoLinkPreferences
name|autoLinkPreferences
parameter_list|,
name|ExternalFileTypes
name|externalFileTypes
parameter_list|)
block|{
name|this
argument_list|(
name|databaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|filePreferences
argument_list|)
argument_list|,
name|autoLinkPreferences
argument_list|,
name|externalFileTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|AutoSetFileLinksUtil (List<Path> directories, AutoLinkPreferences autoLinkPreferences, ExternalFileTypes externalFileTypes)
specifier|public
name|AutoSetFileLinksUtil
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|directories
parameter_list|,
name|AutoLinkPreferences
name|autoLinkPreferences
parameter_list|,
name|ExternalFileTypes
name|externalFileTypes
parameter_list|)
block|{
name|this
operator|.
name|directories
operator|=
name|directories
expr_stmt|;
name|this
operator|.
name|autoLinkPreferences
operator|=
name|autoLinkPreferences
expr_stmt|;
name|this
operator|.
name|externalFileTypes
operator|=
name|externalFileTypes
expr_stmt|;
block|}
DECL|method|findAssociatedNotLinkedFiles (BibEntry entry)
specifier|public
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|findAssociatedNotLinkedFiles
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|linkedFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
name|externalFileTypes
operator|.
name|getExternalFileTypeSelection
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getExtension
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run the search operation
name|FileFinder
name|fileFinder
init|=
name|FileFinders
operator|.
name|constructFromConfiguration
argument_list|(
name|autoLinkPreferences
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|result
init|=
name|fileFinder
operator|.
name|findAssociatedFiles
argument_list|(
name|entry
argument_list|,
name|directories
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
comment|// Collect the found files that are not yet linked
for|for
control|(
name|Path
name|foundFile
range|:
name|result
control|)
block|{
name|boolean
name|fileAlreadyLinked
init|=
name|entry
operator|.
name|getFiles
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|file
lambda|->
name|file
operator|.
name|findIn
argument_list|(
name|directories
argument_list|)
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|file
lambda|->
block|{
lambda|try
block|{
return|return
name|file
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|isSameFile
argument_list|(
name|file
operator|.
name|get
argument_list|()
argument_list|,
name|foundFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem with isSameFile"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|)
function|;
if|if
condition|(
operator|!
name|fileAlreadyLinked
condition|)
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|type
init|=
name|FileHelper
operator|.
name|getFileExtension
argument_list|(
name|foundFile
argument_list|)
operator|.
name|map
argument_list|(
name|externalFileTypes
operator|::
name|getExternalFileTypeByExt
argument_list|)
operator|.
name|orElse
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|UnknownExternalFileType
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|strType
init|=
name|type
operator|.
name|isPresent
argument_list|()
condition|?
name|type
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
decl_stmt|;
name|String
name|relativeFilePath
init|=
name|FileUtil
operator|.
name|relativize
argument_list|(
name|foundFile
argument_list|,
name|directories
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LinkedFile
name|linkedFile
init|=
operator|new
name|LinkedFile
argument_list|(
literal|""
argument_list|,
name|relativeFilePath
argument_list|,
name|strType
argument_list|)
decl_stmt|;
name|linkedFiles
operator|.
name|add
argument_list|(
name|linkedFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_return
return|return
name|linkedFiles
return|;
end_return

unit|} }
end_unit

