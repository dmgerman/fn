begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonBar
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBoxTreeItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ComboBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ProgressIndicator
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|StackPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|EntryFromFileCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|EntryFromFileCreatorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|UnlinkedFilesCrawler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BaseDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DirectoryDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ViewModelListCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ViewModelTreeCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * GUI Dialog for the feature "Find unlinked files".  */
end_comment

begin_class
DECL|class|FindUnlinkedFilesDialog
specifier|public
class|class
name|FindUnlinkedFilesDialog
extends|extends
name|BaseDialog
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|creatorManager
specifier|private
specifier|final
name|EntryFromFileCreatorManager
name|creatorManager
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|buttonScan
specifier|private
name|Button
name|buttonScan
decl_stmt|;
DECL|field|buttonExport
specifier|private
name|Button
name|buttonExport
decl_stmt|;
DECL|field|buttonApply
specifier|private
name|Button
name|buttonApply
decl_stmt|;
DECL|field|checkboxCreateKeywords
specifier|private
name|CheckBox
name|checkboxCreateKeywords
decl_stmt|;
DECL|field|textfieldDirectoryPath
specifier|private
name|TextField
name|textfieldDirectoryPath
decl_stmt|;
DECL|field|tree
specifier|private
name|TreeView
argument_list|<
name|FileNodeWrapper
argument_list|>
name|tree
decl_stmt|;
DECL|field|comboBoxFileTypeSelection
specifier|private
name|ComboBox
argument_list|<
name|FileFilter
argument_list|>
name|comboBoxFileTypeSelection
decl_stmt|;
DECL|field|comboBoxEntryTypeSelection
specifier|private
name|ComboBox
argument_list|<
name|EntryType
argument_list|>
name|comboBoxEntryTypeSelection
decl_stmt|;
DECL|field|panelSearchProgress
specifier|private
name|VBox
name|panelSearchProgress
decl_stmt|;
DECL|field|findUnlinkedFilesTask
specifier|private
name|BackgroundTask
name|findUnlinkedFilesTask
decl_stmt|;
DECL|method|FindUnlinkedFilesDialog (JabRefFrame frame)
specifier|public
name|FindUnlinkedFilesDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Find unlinked files"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|dialogService
operator|=
name|frame
operator|.
name|getDialogService
argument_list|()
expr_stmt|;
name|databaseContext
operator|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
expr_stmt|;
name|creatorManager
operator|=
operator|new
name|EntryFromFileCreatorManager
argument_list|(
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
comment|/**      * Initializes the components, the layout, the data structure and the actions in this dialog.      */
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|Button
name|buttonBrowse
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|buttonBrowse
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Opens the file browser."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|buttonBrowse
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-button"
argument_list|)
expr_stmt|;
name|buttonBrowse
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
name|DirectoryDialogConfiguration
name|directoryDialogConfiguration
init|=
operator|new
name|DirectoryDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|withInitialDirectory
argument_list|(
name|preferences
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dialogService
operator|.
name|showDirectorySelectionDialog
argument_list|(
name|directoryDialogConfiguration
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|selectedDirectory
lambda|->
block|{
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
name|selectedDirectory
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|,
name|selectedDirectory
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|buttonScan
operator|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Scan directory"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
operator|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Searches the selected directory for unlinked files."
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|startSearch
argument_list|()
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setDefaultButton
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|buttonExport
operator|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Export selected entries"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonExport
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Export to text file."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|buttonExport
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-button"
argument_list|)
expr_stmt|;
name|buttonExport
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonExport
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|startExport
argument_list|()
argument_list|)
expr_stmt|;
name|ButtonType
name|buttonTypeImport
init|=
operator|new
name|ButtonType
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|,
name|ButtonBar
operator|.
name|ButtonData
operator|.
name|OK_DONE
argument_list|)
decl_stmt|;
name|getDialogPane
argument_list|()
operator|.
name|getButtonTypes
argument_list|()
operator|.
name|setAll
argument_list|(
name|buttonTypeImport
argument_list|,
name|ButtonType
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|buttonApply
operator|=
operator|(
name|Button
operator|)
name|getDialogPane
argument_list|()
operator|.
name|lookupButton
argument_list|(
name|buttonTypeImport
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
operator|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Starts the import of BibTeX entries."
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/* Actions for the TreeView */
name|Button
name|buttonOptionSelectAll
init|=
operator|new
name|Button
argument_list|()
decl_stmt|;
name|buttonOptionSelectAll
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select all"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonOptionSelectAll
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-button"
argument_list|)
expr_stmt|;
name|buttonOptionSelectAll
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|tree
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// Need to toggle a twice to make sure everything is selected
name|root
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|root
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Button
name|buttonOptionDeselectAll
init|=
operator|new
name|Button
argument_list|()
decl_stmt|;
name|buttonOptionDeselectAll
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unselect all"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonOptionDeselectAll
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-button"
argument_list|)
expr_stmt|;
name|buttonOptionDeselectAll
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|tree
operator|.
name|getRoot
argument_list|()
decl_stmt|;
comment|// Need to toggle a twice to make sure nothing is selected
name|root
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|root
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Button
name|buttonOptionExpandAll
init|=
operator|new
name|Button
argument_list|()
decl_stmt|;
name|buttonOptionExpandAll
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Expand all"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonOptionExpandAll
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-button"
argument_list|)
expr_stmt|;
name|buttonOptionExpandAll
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|tree
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expandTree
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Button
name|buttonOptionCollapseAll
init|=
operator|new
name|Button
argument_list|()
decl_stmt|;
name|buttonOptionCollapseAll
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Collapse all"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonOptionCollapseAll
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"text-button"
argument_list|)
expr_stmt|;
name|buttonOptionCollapseAll
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|tree
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|expandTree
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|root
operator|.
name|setExpanded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|checkboxCreateKeywords
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Create directory based keywords"
argument_list|)
argument_list|)
expr_stmt|;
name|checkboxCreateKeywords
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
operator|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Creates keywords in created entrys with directory pathnames"
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|textfieldDirectoryPath
operator|=
operator|new
name|TextField
argument_list|()
expr_stmt|;
name|Path
name|initialPath
init|=
name|databaseContext
operator|.
name|getFirstExistingFileDir
argument_list|(
name|preferences
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
name|preferences
operator|.
name|getWorkingDir
argument_list|()
argument_list|)
decl_stmt|;
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
name|initialPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Label
name|labelDirectoryDescription
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select a directory where the search shall start."
argument_list|)
argument_list|)
decl_stmt|;
name|Label
name|labelFileTypesDescription
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select file type:"
argument_list|)
argument_list|)
decl_stmt|;
name|Label
name|labelFilesDescription
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"These files are not linked in the active library."
argument_list|)
argument_list|)
decl_stmt|;
name|Label
name|labelEntryTypeDescription
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry type to be created:"
argument_list|)
argument_list|)
decl_stmt|;
name|Label
name|labelSearchingDirectoryInfo
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Searching file system..."
argument_list|)
argument_list|)
decl_stmt|;
name|tree
operator|=
operator|new
name|TreeView
argument_list|<>
argument_list|()
expr_stmt|;
name|tree
operator|.
name|setPrefWidth
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|ScrollPane
name|scrollPaneTree
init|=
operator|new
name|ScrollPane
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|scrollPaneTree
operator|.
name|setFitToWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ProgressIndicator
name|progressBarSearching
init|=
operator|new
name|ProgressIndicator
argument_list|()
decl_stmt|;
name|progressBarSearching
operator|.
name|setMaxSize
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|setResultConverter
argument_list|(
name|buttonPressed
lambda|->
block|{
if|if
condition|(
name|buttonPressed
operator|==
name|buttonTypeImport
condition|)
block|{
name|startImport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|findUnlinkedFilesTask
operator|!=
literal|null
condition|)
block|{
name|findUnlinkedFilesTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
operator|new
name|ViewModelTreeCellFactory
argument_list|<
name|FileNodeWrapper
argument_list|>
argument_list|()
operator|.
name|withText
argument_list|(
name|node
lambda|->
block|{
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|node
operator|.
name|path
argument_list|)
condition|)
block|{
comment|// File
return|return
name|node
operator|.
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
comment|// Directory
return|return
name|node
operator|.
name|path
operator|.
name|getFileName
argument_list|()
operator|+
literal|" ("
operator|+
name|node
operator|.
name|fileCount
operator|+
literal|" file"
operator|+
operator|(
name|node
operator|.
name|fileCount
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|")"
return|;
block|}
block|}
argument_list|)
operator|.
name|install
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileFilter
argument_list|>
name|fileFilterList
init|=
name|creatorManager
operator|.
name|getFileFilterList
argument_list|()
decl_stmt|;
name|comboBoxFileTypeSelection
operator|=
operator|new
name|ComboBox
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|fileFilterList
argument_list|)
argument_list|)
expr_stmt|;
name|comboBoxFileTypeSelection
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectFirst
argument_list|()
expr_stmt|;
operator|new
name|ViewModelListCellFactory
argument_list|<
name|FileFilter
argument_list|>
argument_list|()
operator|.
name|withText
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|withIcon
argument_list|(
name|fileFilter
lambda|->
block|{
if|if
condition|(
name|fileFilter
operator|instanceof
name|EntryFromFileCreator
condition|)
block|{
name|EntryFromFileCreator
name|creator
init|=
operator|(
name|EntryFromFileCreator
operator|)
name|fileFilter
decl_stmt|;
if|if
condition|(
name|creator
operator|.
name|getExternalFileType
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|creator
operator|.
name|getExternalFileType
argument_list|()
operator|.
name|getIcon
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
operator|.
name|install
argument_list|(
name|comboBoxFileTypeSelection
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|EntryType
argument_list|>
name|entryTypes
init|=
name|EntryTypes
operator|.
name|getAllValues
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|comboBoxEntryTypeSelection
operator|=
operator|new
name|ComboBox
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|entryTypes
argument_list|)
argument_list|)
expr_stmt|;
name|comboBoxEntryTypeSelection
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectFirst
argument_list|()
expr_stmt|;
operator|new
name|ViewModelListCellFactory
argument_list|<
name|EntryType
argument_list|>
argument_list|()
operator|.
name|withText
argument_list|(
name|EntryType
operator|::
name|getName
argument_list|)
operator|.
name|install
argument_list|(
name|comboBoxEntryTypeSelection
argument_list|)
expr_stmt|;
name|panelSearchProgress
operator|=
operator|new
name|VBox
argument_list|(
literal|5
argument_list|,
name|labelSearchingDirectoryInfo
argument_list|,
name|progressBarSearching
argument_list|)
expr_stmt|;
name|panelSearchProgress
operator|.
name|toFront
argument_list|()
expr_stmt|;
name|panelSearchProgress
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//        panelDirectory.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),
comment|//                Localization.lang("Select directory")));
comment|//        panelFiles.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),
comment|//                Localization.lang("Select files")));
comment|//        panelEntryTypesSelection.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),
comment|//                Localization.lang("BibTeX entry creation")));
name|VBox
name|panelDirectory
init|=
operator|new
name|VBox
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|panelDirectory
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|labelDirectoryDescription
argument_list|,
operator|new
name|HBox
argument_list|(
literal|10
argument_list|,
name|textfieldDirectoryPath
argument_list|,
name|buttonBrowse
argument_list|)
argument_list|,
operator|new
name|HBox
argument_list|(
literal|15
argument_list|,
name|labelFileTypesDescription
argument_list|,
name|comboBoxFileTypeSelection
argument_list|)
argument_list|,
name|buttonScan
argument_list|)
expr_stmt|;
name|HBox
operator|.
name|setHgrow
argument_list|(
name|textfieldDirectoryPath
argument_list|,
name|Priority
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|StackPane
name|stackPaneTree
init|=
operator|new
name|StackPane
argument_list|(
name|scrollPaneTree
argument_list|,
name|panelSearchProgress
argument_list|)
decl_stmt|;
name|StackPane
operator|.
name|setAlignment
argument_list|(
name|panelSearchProgress
argument_list|,
name|Pos
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|BorderPane
name|panelFiles
init|=
operator|new
name|BorderPane
argument_list|()
decl_stmt|;
name|panelFiles
operator|.
name|setTop
argument_list|(
name|labelFilesDescription
argument_list|)
expr_stmt|;
name|panelFiles
operator|.
name|setCenter
argument_list|(
name|stackPaneTree
argument_list|)
expr_stmt|;
name|panelFiles
operator|.
name|setBottom
argument_list|(
operator|new
name|HBox
argument_list|(
literal|5
argument_list|,
name|buttonOptionSelectAll
argument_list|,
name|buttonOptionDeselectAll
argument_list|,
name|buttonOptionExpandAll
argument_list|,
name|buttonOptionCollapseAll
argument_list|,
name|buttonExport
argument_list|)
argument_list|)
expr_stmt|;
name|VBox
name|panelEntryTypesSelection
init|=
operator|new
name|VBox
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|panelEntryTypesSelection
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
operator|new
name|HBox
argument_list|(
literal|15
argument_list|,
name|labelEntryTypeDescription
argument_list|,
name|comboBoxEntryTypeSelection
argument_list|)
argument_list|,
name|checkboxCreateKeywords
argument_list|)
expr_stmt|;
name|VBox
name|container
init|=
operator|new
name|VBox
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|container
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|panelDirectory
argument_list|,
name|panelFiles
argument_list|,
name|panelEntryTypesSelection
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPrefWidth
argument_list|(
literal|600
argument_list|)
expr_stmt|;
name|getDialogPane
argument_list|()
operator|.
name|setContent
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|/**      * Expands or collapses the specified tree according to the<code>expand</code>-parameter.      */
DECL|method|expandTree (TreeItem<?> item, boolean expand)
specifier|private
name|void
name|expandTree
parameter_list|(
name|TreeItem
argument_list|<
name|?
argument_list|>
name|item
parameter_list|,
name|boolean
name|expand
parameter_list|)
block|{
if|if
condition|(
name|item
operator|!=
literal|null
operator|&&
operator|!
name|item
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|item
operator|.
name|setExpanded
argument_list|(
name|expand
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeItem
argument_list|<
name|?
argument_list|>
name|child
range|:
name|item
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|expandTree
argument_list|(
name|child
argument_list|,
name|expand
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Starts the search of unlinked files according chosen directory and the file type selection. The search will      * process in a separate thread and a progress indicator will be displayed.      */
DECL|method|startSearch ()
specifier|private
name|void
name|startSearch
parameter_list|()
block|{
name|Path
name|directory
init|=
name|getSearchDirectory
argument_list|()
decl_stmt|;
name|FileFilter
name|selectedFileFilter
init|=
name|comboBoxFileTypeSelection
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|findUnlinkedFilesTask
operator|=
operator|new
name|UnlinkedFilesCrawler
argument_list|(
name|directory
argument_list|,
name|selectedFileFilter
argument_list|,
name|databaseContext
argument_list|)
operator|.
name|onRunning
argument_list|(
parameter_list|()
lambda|->
block|{
name|panelSearchProgress
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setRoot
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|onFinished
argument_list|(
parameter_list|()
lambda|->
block|{
name|panelSearchProgress
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|root
lambda|->
block|{
name|tree
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|root
operator|.
name|setExpanded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonExport
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonScan
operator|.
name|setDefaultButton
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|findUnlinkedFilesTask
operator|.
name|executeWith
argument_list|(
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|)
expr_stmt|;
block|}
DECL|method|getSearchDirectory ()
specifier|private
name|Path
name|getSearchDirectory
parameter_list|()
block|{
name|Path
name|directory
init|=
name|Paths
operator|.
name|get
argument_list|(
name|textfieldDirectoryPath
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|directory
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
name|directory
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|directory
operator|=
name|directory
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|textfieldDirectoryPath
operator|.
name|setText
argument_list|(
name|directory
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|directory
return|;
block|}
comment|/**      * This will start the import of all file of all selected nodes in the file tree view.      */
DECL|method|startImport ()
specifier|private
name|void
name|startImport
parameter_list|()
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|tree
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|fileList
init|=
name|getFileListFromNode
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|EntryType
name|entryType
init|=
name|comboBoxEntryTypeSelection
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|creatorManager
operator|.
name|addEntriesFromFiles
argument_list|(
name|fileList
argument_list|,
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
argument_list|,
name|entryType
argument_list|,
name|checkboxCreateKeywords
operator|.
name|isSelected
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|message
decl_stmt|;
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"There was one file that could not be imported."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"There were %0 files which could not be imported."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dialogService
operator|.
name|showWarningDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"The import finished with warnings:"
argument_list|)
operator|+
literal|"\n"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This starts the export of all files of all selected nodes in the file tree view.      */
DECL|method|startExport ()
specifier|private
name|void
name|startExport
parameter_list|()
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|tree
operator|.
name|getRoot
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|fileList
init|=
name|getFileListFromNode
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|buttonExport
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|withInitialDirectory
argument_list|(
name|preferences
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|exportPath
init|=
name|dialogService
operator|.
name|showFileSaveDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exportPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|buttonExport
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
init|(
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|exportPath
operator|.
name|get
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|fileList
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"IO Error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|buttonExport
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttonApply
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a list of all files (leaf nodes in the tree structure), which have been selected.      *      * @param node The root node representing a tree structure.      */
DECL|method|getFileListFromNode (CheckBoxTreeItem<FileNodeWrapper> node)
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getFileListFromNode
parameter_list|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|node
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|filesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|childNode
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|child
init|=
operator|(
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
operator|)
name|childNode
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|isLeaf
argument_list|()
operator|&&
name|child
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Path
name|nodeFile
init|=
name|child
operator|.
name|getValue
argument_list|()
operator|.
name|path
decl_stmt|;
if|if
condition|(
operator|(
name|nodeFile
operator|!=
literal|null
operator|)
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|nodeFile
argument_list|)
condition|)
block|{
name|filesList
operator|.
name|add
argument_list|(
name|nodeFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filesList
return|;
block|}
DECL|class|FileNodeWrapper
specifier|public
specifier|static
class|class
name|FileNodeWrapper
block|{
DECL|field|path
specifier|public
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|fileCount
specifier|public
specifier|final
name|int
name|fileCount
decl_stmt|;
DECL|method|FileNodeWrapper (Path path)
specifier|public
name|FileNodeWrapper
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FileNodeWrapper (Path path, int fileCount)
specifier|public
name|FileNodeWrapper
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|fileCount
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|fileCount
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

