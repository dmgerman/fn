begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|LinkedFileViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|LinkedFilesEditorViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FulltextFetchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Try to download fulltext PDF for selected entry(ies) by following URL or DOI link.  */
end_comment

begin_class
DECL|class|FindFullTextAction
specifier|public
class|class
name|FindFullTextAction
extends|extends
name|SimpleCommand
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FindFullTextAction
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The minimum number of selected entries to ask the user for confirmation
DECL|field|WARNING_LIMIT
specifier|private
specifier|static
specifier|final
name|int
name|WARNING_LIMIT
init|=
literal|5
decl_stmt|;
DECL|field|basePanel
specifier|private
specifier|final
name|BasePanel
name|basePanel
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|method|FindFullTextAction (BasePanel basePanel)
specifier|public
name|FindFullTextAction
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|this
operator|.
name|basePanel
operator|=
name|basePanel
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|basePanel
operator|.
name|frame
argument_list|()
operator|.
name|getDialogService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
operator|!
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|basePanel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Looking for full text document..."
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"No entry selected for fulltext download."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|WARNING_LIMIT
condition|)
block|{
name|boolean
name|confirmDownload
init|=
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up full text documents"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You are about to look up full text documents for %0 entries."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"JabRef will send at least one request per entry to a publisher."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Do you still want to continue?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up full text documents"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|confirmDownload
condition|)
block|{
name|basePanel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Operation canceled."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Task
argument_list|<
name|Map
argument_list|<
name|Optional
argument_list|<
name|URL
argument_list|>
argument_list|,
name|BibEntry
argument_list|>
argument_list|>
name|findFullTextsTask
init|=
operator|new
name|Task
argument_list|<
name|Map
argument_list|<
name|Optional
argument_list|<
name|URL
argument_list|>
argument_list|,
name|BibEntry
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|Optional
argument_list|<
name|URL
argument_list|>
argument_list|,
name|BibEntry
argument_list|>
name|call
parameter_list|()
block|{
name|Map
argument_list|<
name|Optional
argument_list|<
name|URL
argument_list|>
argument_list|,
name|BibEntry
argument_list|>
name|downloads
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
control|)
block|{
name|FulltextFetchers
name|fetchers
init|=
operator|new
name|FulltextFetchers
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|downloads
operator|.
name|put
argument_list|(
name|fetchers
operator|.
name|findFullTextPDF
argument_list|(
name|entry
argument_list|)
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|updateProgress
argument_list|(
operator|++
name|count
argument_list|,
name|basePanel
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|downloads
return|;
block|}
block|}
decl_stmt|;
name|findFullTextsTask
operator|.
name|setOnSucceeded
argument_list|(
name|value
lambda|->
name|downloadFullTexts
argument_list|(
name|findFullTextsTask
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showProgressDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up full text documents"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Looking for full text document..."
argument_list|)
argument_list|,
name|findFullTextsTask
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|TASK_EXECUTOR
operator|.
name|execute
argument_list|(
name|findFullTextsTask
argument_list|)
expr_stmt|;
block|}
DECL|method|downloadFullTexts (Map<Optional<URL>, BibEntry> downloads)
specifier|private
name|void
name|downloadFullTexts
parameter_list|(
name|Map
argument_list|<
name|Optional
argument_list|<
name|URL
argument_list|>
argument_list|,
name|BibEntry
argument_list|>
name|downloads
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Optional
argument_list|<
name|URL
argument_list|>
argument_list|,
name|BibEntry
argument_list|>
name|download
range|:
name|downloads
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BibEntry
name|entry
init|=
name|download
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|URL
argument_list|>
name|result
init|=
name|download
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|dir
init|=
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getFirstExistingFileDir
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Directory not found"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Main file directory not set!"
argument_list|)
operator|+
literal|" "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Preferences"
argument_list|)
operator|+
literal|" -> "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"File"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//Download and link full text
name|addLinkedFileFromURL
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|,
name|entry
argument_list|,
name|dir
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No full text document found for entry %0."
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"undefined"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method attaches a linked file from a URL (if not already linked) to an entry using the key and value pair      * from the findFullTexts map and then downloads the file into the given targetDirectory      *      * @param url   the url "key"      * @param entry the entry "value"      * @param targetDirectory the target directory for the downloaded file      */
DECL|method|addLinkedFileFromURL (URL url, BibEntry entry, Path targetDirectory)
specifier|private
name|void
name|addLinkedFileFromURL
parameter_list|(
name|URL
name|url
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|Path
name|targetDirectory
parameter_list|)
block|{
name|LinkedFile
name|newLinkedFile
init|=
operator|new
name|LinkedFile
argument_list|(
name|url
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|getFiles
argument_list|()
operator|.
name|contains
argument_list|(
name|newLinkedFile
argument_list|)
condition|)
block|{
name|LinkedFileViewModel
name|onlineFile
init|=
operator|new
name|LinkedFileViewModel
argument_list|(
name|newLinkedFile
argument_list|,
name|entry
argument_list|,
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|,
name|dialogService
argument_list|,
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|URLDownload
name|urlDownload
init|=
operator|new
name|URLDownload
argument_list|(
name|newLinkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
decl_stmt|;
name|BackgroundTask
argument_list|<
name|Path
argument_list|>
name|downloadTask
init|=
name|onlineFile
operator|.
name|prepareDownloadTask
argument_list|(
name|targetDirectory
argument_list|,
name|urlDownload
argument_list|)
decl_stmt|;
name|downloadTask
operator|.
name|onSuccess
argument_list|(
name|destination
lambda|->
block|{
name|LinkedFile
name|downloadedFile
init|=
name|LinkedFilesEditorViewModel
operator|.
name|fromFile
argument_list|(
name|destination
argument_list|,
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|entry
operator|.
name|addFile
argument_list|(
name|downloadedFile
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Finished downloading full text document for entry %0."
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"undefined"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|TASK_EXECUTOR
operator|.
name|execute
argument_list|(
name|downloadTask
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|exception
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Invalid URL"
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Full text document for entry %0 already linked."
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"undefined"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

