begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XMPUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_comment
comment|/**  * Write XMP action for EntryEditor toolbar.  */
end_comment

begin_class
DECL|class|WriteXMPEntryEditorAction
specifier|public
class|class
name|WriteXMPEntryEditorAction
extends|extends
name|AbstractAction
block|{
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|editor
specifier|private
specifier|final
name|EntryEditor
name|editor
decl_stmt|;
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|method|WriteXMPEntryEditorAction (BasePanel panel, EntryEditor editor)
specifier|public
name|WriteXMPEntryEditorAction
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|EntryEditor
name|editor
parameter_list|)
block|{
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|editor
operator|=
name|editor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent actionEvent)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Writing XMP-metadata..."
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|setProgressBarIndeterminate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|setProgressBarVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BibEntry
name|entry
init|=
name|editor
operator|.
name|getEntry
argument_list|()
decl_stmt|;
comment|// Make a list of all PDFs linked from this entry:
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|entry
operator|.
name|getFiles
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|file
lambda|->
name|file
operator|.
name|getFileType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|file
lambda|->
name|file
operator|.
name|findIn
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getFileDirectoryPreferences
argument_list|()
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// We want to offload the actual work to a background thread, so we have a worker
comment|// thread:
name|AbstractWorker
name|worker
init|=
operator|new
name|WriteXMPTask
argument_list|(
name|files
argument_list|,
name|entry
argument_list|)
decl_stmt|;
comment|// Using Spin, we get a thread that gets synchronously offloaded to a new thread,
comment|// blocking the execution of this method:
name|worker
operator|.
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// After the worker thread finishes, we are unblocked and ready to print the
comment|// status message:
name|panel
operator|.
name|output
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|setProgressBarVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|WriteXMPTask
class|class
name|WriteXMPTask
extends|extends
name|Task
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|files
specifier|private
specifier|final
name|Path
name|files
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|method|WriteXMPTask (List<Path> files, BibEntry entry)
specifier|public
name|WriteXMPTask
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"No PDF linked"
argument_list|)
operator|+
literal|".\n"
expr_stmt|;
block|}
else|else
block|{
name|int
name|written
init|=
literal|0
decl_stmt|;
name|int
name|error
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{                  }
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Finished writing XMP-metadata. Wrote to %0 file(s)."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|written
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error writing to %0 file(s)."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|error
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|message
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

