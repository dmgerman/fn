begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.fieldeditors
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalAccessor
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompleteSuggestionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_class
DECL|class|DateEditorViewModel
specifier|public
class|class
name|DateEditorViewModel
extends|extends
name|AbstractEditorViewModel
block|{
DECL|field|dateFormatter
specifier|private
specifier|final
name|DateTimeFormatter
name|dateFormatter
decl_stmt|;
DECL|method|DateEditorViewModel (String fieldName, AutoCompleteSuggestionProvider<?> suggestionProvider, DateTimeFormatter dateFormatter)
specifier|public
name|DateEditorViewModel
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|AutoCompleteSuggestionProvider
argument_list|<
name|?
argument_list|>
name|suggestionProvider
parameter_list|,
name|DateTimeFormatter
name|dateFormatter
parameter_list|)
block|{
name|super
argument_list|(
name|fieldName
argument_list|,
name|suggestionProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|dateFormatter
operator|=
name|dateFormatter
expr_stmt|;
block|}
DECL|method|getDateToStringConverter ()
specifier|public
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
name|getDateToStringConverter
parameter_list|()
block|{
return|return
operator|new
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|TemporalAccessor
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
return|return
name|dateFormatter
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TemporalAccessor
name|fromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|string
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|dateFormatter
operator|.
name|parse
argument_list|(
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|exception
parameter_list|)
block|{
comment|// We accept all kinds of dates (not just in the format specified)
return|return
name|Date
operator|.
name|parse
argument_list|(
name|string
argument_list|)
operator|.
name|map
argument_list|(
name|Date
operator|::
name|toTemporalAccessor
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

