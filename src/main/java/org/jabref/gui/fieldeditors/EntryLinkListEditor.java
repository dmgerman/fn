begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.fieldeditors
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|FontMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompleteListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryLinkList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|ParsedEntryLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|FormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|EntryLinkListEditor
specifier|public
class|class
name|EntryLinkListEditor
extends|extends
name|JTable
implements|implements
name|FieldEditor
block|{
DECL|field|layoutFormat
specifier|private
specifier|static
specifier|final
name|String
name|layoutFormat
init|=
literal|"\\begin{author}\\format[Authors(2,1),LatexToUnicode]{\\author}\\end{author}\\begin{title}, \"\\format[LatexToUnicode]{\\title}\"\\end{title}\\begin{year}, \\year\\end{year}"
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EntryLinkListEditor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|label
specifier|private
specifier|final
name|FieldNameLabel
name|label
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|entryEditor
specifier|private
specifier|final
name|EntryEditor
name|entryEditor
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|JPanel
name|panel
decl_stmt|;
DECL|field|tableModel
specifier|private
specifier|final
name|EntryLinkListTableModel
name|tableModel
decl_stmt|;
DECL|field|menu
specifier|private
specifier|final
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|singleEntry
specifier|private
specifier|final
name|boolean
name|singleEntry
decl_stmt|;
DECL|field|add
specifier|private
specifier|final
name|JButton
name|add
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|ADD_NOBOX
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|remove
specifier|private
specifier|final
name|JButton
name|remove
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REMOVE_NOBOX
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|EntryLinkListEditor (JabRefFrame frame, BibDatabaseContext databaseContext, String fieldName, String content, EntryEditor entryEditor, boolean singleEntry)
specifier|public
name|EntryLinkListEditor
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|content
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|,
name|boolean
name|singleEntry
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|databaseContext
operator|=
name|databaseContext
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|entryEditor
operator|=
name|entryEditor
expr_stmt|;
name|this
operator|.
name|singleEntry
operator|=
name|singleEntry
expr_stmt|;
name|label
operator|=
operator|new
name|FieldNameLabel
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|tableModel
operator|=
operator|new
name|EntryLinkListTableModel
argument_list|(
name|EntryLinkList
operator|.
name|parse
argument_list|(
name|content
argument_list|,
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|setModel
argument_list|(
name|tableModel
argument_list|)
expr_stmt|;
name|JScrollPane
name|sPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setTableHeader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addMouseListener
argument_list|(
operator|new
name|TableClickListener
argument_list|()
argument_list|)
expr_stmt|;
name|add
operator|.
name|setToolTipText
argument_list|(
operator|(
literal|"New entry link (INSERT)"
operator|)
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setToolTipText
argument_list|(
operator|(
literal|"Remove entry link (DELETE)"
operator|)
argument_list|)
expr_stmt|;
name|add
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|add
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|addEntry
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|removeEntries
argument_list|()
argument_list|)
expr_stmt|;
name|FormLayout
name|layout
init|=
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow,1dlu,fill:pref:grow"
argument_list|,
literal|"fill:pref,fill:pref,1dlu,fill:pref"
argument_list|)
decl_stmt|;
name|FormBuilder
name|builder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
operator|.
name|layout
argument_list|(
name|layout
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|singleEntry
condition|)
block|{
name|JButton
name|up
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UP
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
name|JButton
name|down
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DOWN
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
name|up
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|down
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|up
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|moveEntry
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|down
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|moveEntry
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|up
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|down
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|add
argument_list|(
name|add
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|remove
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|JButton
name|button
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Jump to entry"
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|jumpToEntry
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|button
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|panel
operator|=
operator|new
name|JPanel
argument_list|()
expr_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|sPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
comment|// Add an input/action pair for deleting entries:
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"DELETE"
argument_list|)
argument_list|,
literal|"delete"
argument_list|)
expr_stmt|;
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"delete"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|int
name|row
init|=
name|getSelectedRow
argument_list|()
decl_stmt|;
name|removeEntries
argument_list|()
expr_stmt|;
name|row
operator|=
name|Math
operator|.
name|min
argument_list|(
name|row
argument_list|,
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Add an input/action pair for inserting an entry:
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"INSERT"
argument_list|)
argument_list|,
literal|"insert"
argument_list|)
expr_stmt|;
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"insert"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|int
name|row
init|=
name|getSelectedRow
argument_list|()
decl_stmt|;
name|addEntry
argument_list|()
expr_stmt|;
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Add input/action pair for moving an entry up:
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|FILE_LIST_EDITOR_MOVE_ENTRY_UP
argument_list|)
argument_list|,
literal|"move up"
argument_list|)
expr_stmt|;
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"move up"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|moveEntry
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Add input/action pair for moving an entry down:
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|FILE_LIST_EDITOR_MOVE_ENTRY_DOWN
argument_list|)
argument_list|,
literal|"move down"
argument_list|)
expr_stmt|;
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"move down"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
name|moveEntry
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMenuItem
name|openLink
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Jump to entry"
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|openLink
argument_list|)
expr_stmt|;
name|openLink
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|jumpToEntry
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set table row height
name|FontMetrics
name|metrics
init|=
name|getFontMetrics
argument_list|(
name|getFont
argument_list|()
argument_list|)
decl_stmt|;
name|setRowHeight
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|getRowHeight
argument_list|()
argument_list|,
name|metrics
operator|.
name|getHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateButtonStates
argument_list|()
expr_stmt|;
block|}
DECL|method|jumpToEntry ()
specifier|private
name|void
name|jumpToEntry
parameter_list|()
block|{
name|String
name|entryKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|singleEntry
condition|)
block|{
name|ParsedEntryLink
name|firstEntry
init|=
name|tableModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstEntry
operator|!=
literal|null
condition|)
block|{
name|entryKey
operator|=
name|firstEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|selectedRow
init|=
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedRow
operator|!=
operator|-
literal|1
condition|)
block|{
name|entryKey
operator|=
name|tableModel
operator|.
name|getEntry
argument_list|(
name|selectedRow
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entryKey
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryByKey
argument_list|(
name|entryKey
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|highlightEntry
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|adjustColumnWidth ()
specifier|public
name|void
name|adjustColumnWidth
parameter_list|()
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|this
operator|.
name|getColumnCount
argument_list|()
condition|;
name|column
operator|++
control|)
block|{
name|int
name|width
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|this
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|TableCellRenderer
name|renderer
init|=
name|this
operator|.
name|getCellRenderer
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|Component
name|comp
init|=
name|this
operator|.
name|prepareRenderer
argument_list|(
name|renderer
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|comp
operator|.
name|getPreferredSize
argument_list|()
operator|.
name|width
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|columnModel
operator|.
name|getColumn
argument_list|(
name|column
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFieldName ()
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
comment|/*       * Returns the component to be added to a container. Might be a JScrollPane     * or the component itself.     */
annotation|@
name|Override
DECL|method|getPane ()
specifier|public
name|JComponent
name|getPane
parameter_list|()
block|{
return|return
name|panel
return|;
block|}
comment|/*      * Returns the text component itself.     */
annotation|@
name|Override
DECL|method|getTextComponent ()
specifier|public
name|JComponent
name|getTextComponent
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|getLabel ()
specifier|public
name|JLabel
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
annotation|@
name|Override
DECL|method|setLabelColor (Color color)
specifier|public
name|void
name|setLabelColor
parameter_list|(
name|Color
name|color
parameter_list|)
block|{
name|label
operator|.
name|setForeground
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|tableModel
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setText (String newText)
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
name|tableModel
operator|.
name|setContent
argument_list|(
name|EntryLinkList
operator|.
name|parse
argument_list|(
name|newText
argument_list|,
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|adjustColumnWidth
argument_list|()
expr_stmt|;
name|updateButtonStates
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append (String text)
specifier|public
name|void
name|append
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|paste (String textToInsert)
specifier|public
name|void
name|paste
parameter_list|(
name|String
name|textToInsert
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|getSelectedText ()
specifier|public
name|String
name|getSelectedText
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|addEntry ()
specifier|private
name|void
name|addEntry
parameter_list|()
block|{
name|int
name|row
init|=
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
operator|-
literal|1
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
name|ParsedEntryLink
name|entry
init|=
operator|new
name|ParsedEntryLink
argument_list|(
literal|""
argument_list|,
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|tableModel
operator|.
name|addEntry
argument_list|(
name|row
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|adjustColumnWidth
argument_list|()
expr_stmt|;
name|updateButtonStates
argument_list|()
expr_stmt|;
block|}
DECL|method|removeEntries ()
specifier|private
name|void
name|removeEntries
parameter_list|()
block|{
name|int
index|[]
name|rows
init|=
name|getSelectedRows
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|rows
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|tableModel
operator|.
name|removeEntry
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|entryEditor
operator|.
name|updateField
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|adjustColumnWidth
argument_list|()
expr_stmt|;
name|updateButtonStates
argument_list|()
expr_stmt|;
block|}
DECL|method|updateButtonStates ()
specifier|private
name|void
name|updateButtonStates
parameter_list|()
block|{
if|if
condition|(
name|singleEntry
condition|)
block|{
if|if
condition|(
name|tableModel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|add
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|moveEntry (int i)
specifier|private
name|void
name|moveEntry
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
index|[]
name|sel
init|=
name|getSelectedRows
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|sel
operator|.
name|length
operator|!=
literal|1
operator|)
operator|||
operator|(
name|tableModel
operator|.
name|getRowCount
argument_list|()
operator|<
literal|2
operator|)
condition|)
block|{
return|return;
block|}
name|int
name|toIdx
init|=
name|sel
index|[
literal|0
index|]
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|toIdx
operator|>=
name|tableModel
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
name|toIdx
operator|-=
name|tableModel
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toIdx
operator|<
literal|0
condition|)
block|{
name|toIdx
operator|+=
name|tableModel
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
block|}
name|ParsedEntryLink
name|entry
init|=
name|tableModel
operator|.
name|getEntry
argument_list|(
name|sel
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|tableModel
operator|.
name|removeEntry
argument_list|(
name|sel
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tableModel
operator|.
name|addEntry
argument_list|(
name|toIdx
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setRowSelectionInterval
argument_list|(
name|toIdx
argument_list|,
name|toIdx
argument_list|)
expr_stmt|;
name|adjustColumnWidth
argument_list|()
expr_stmt|;
block|}
DECL|class|TableClickListener
class|class
name|TableClickListener
extends|extends
name|MouseAdapter
block|{
annotation|@
name|Override
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON1
operator|)
operator|&&
operator|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
operator|)
condition|)
block|{
name|int
name|row
init|=
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|entry
init|=
name|tableModel
operator|.
name|getEntry
argument_list|(
name|row
argument_list|)
operator|.
name|getLinkedEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Select entry in main table
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|highlightEntry
argument_list|(
name|entry
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Focus BibTeX key field
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processPopupTrigger (MouseEvent e)
specifier|private
name|void
name|processPopupTrigger
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|int
name|row
init|=
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|setRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|(
name|EntryLinkListEditor
operator|.
name|this
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|undo ()
specifier|public
name|void
name|undo
parameter_list|()
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|redo ()
specifier|public
name|void
name|redo
parameter_list|()
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|setAutoCompleteListener (AutoCompleteListener listener)
specifier|public
name|void
name|setAutoCompleteListener
parameter_list|(
name|AutoCompleteListener
name|listener
parameter_list|)
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|clearAutoCompleteSuggestion ()
specifier|public
name|void
name|clearAutoCompleteSuggestion
parameter_list|()
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|setActiveBackgroundColor ()
specifier|public
name|void
name|setActiveBackgroundColor
parameter_list|()
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|setValidBackgroundColor ()
specifier|public
name|void
name|setValidBackgroundColor
parameter_list|()
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|setInvalidBackgroundColor ()
specifier|public
name|void
name|setInvalidBackgroundColor
parameter_list|()
block|{
comment|// Do nothing
block|}
DECL|class|EntryLinkListTableModel
specifier|private
class|class
name|EntryLinkListTableModel
extends|extends
name|DefaultTableModel
block|{
DECL|field|internalList
specifier|private
specifier|final
name|List
argument_list|<
name|ParsedEntryLink
argument_list|>
name|internalList
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|EntryLinkListTableModel (List<ParsedEntryLink> originalList)
specifier|public
name|EntryLinkListTableModel
parameter_list|(
name|List
argument_list|<
name|ParsedEntryLink
argument_list|>
name|originalList
parameter_list|)
block|{
name|addEntries
argument_list|(
name|originalList
argument_list|)
expr_stmt|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
synchronized|synchronized
init|(
name|internalList
init|)
block|{
name|String
name|result
init|=
name|EntryLinkList
operator|.
name|serialize
argument_list|(
name|internalList
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|method|addEntries (List<ParsedEntryLink> newList)
specifier|public
name|void
name|addEntries
parameter_list|(
name|List
argument_list|<
name|ParsedEntryLink
argument_list|>
name|newList
parameter_list|)
block|{
name|internalList
operator|.
name|addAll
argument_list|(
name|newList
argument_list|)
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|fireTableDataChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setContent (List<ParsedEntryLink> newList)
specifier|public
name|void
name|setContent
parameter_list|(
name|List
argument_list|<
name|ParsedEntryLink
argument_list|>
name|newList
parameter_list|)
block|{
name|internalList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|internalList
operator|.
name|addAll
argument_list|(
name|newList
argument_list|)
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|fireTableDataChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|getRowCount ()
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
if|if
condition|(
name|internalList
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
synchronized|synchronized
init|(
name|internalList
init|)
block|{
return|return
name|internalList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getColumnClass (int columnIndex)
specifier|public
name|Class
argument_list|<
name|String
argument_list|>
name|getColumnClass
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|getValueAt (int rowIndex, int columnIndex)
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|internalList
init|)
block|{
name|ParsedEntryLink
name|entry
init|=
name|internalList
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|entry
operator|.
name|getLinkedEntry
argument_list|()
operator|.
name|map
argument_list|(
name|bibEntry
lambda|->
name|formatEntry
argument_list|(
name|bibEntry
argument_list|,
name|entry
operator|.
name|getDataBase
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|"Unknown entry"
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|method|getEntry (int index)
specifier|public
name|ParsedEntryLink
name|getEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
synchronized|synchronized
init|(
name|internalList
init|)
block|{
return|return
name|internalList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
DECL|method|removeEntry (int index)
specifier|public
name|void
name|removeEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|internalList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|fireTableRowsDeleted
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|fireTableRowsDeleted
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|internalList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**          * Add an entry to the table model, and fire a change event. The change event          * is fired on the event dispatch thread.          * @param index The row index to insert the entry at.          * @param entry The entry to insert.          */
DECL|method|addEntry (final int index, final ParsedEntryLink entry)
specifier|public
name|void
name|addEntry
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ParsedEntryLink
name|entry
parameter_list|)
block|{
synchronized|synchronized
init|(
name|internalList
init|)
block|{
name|internalList
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|fireTableDataChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isCellEditable (int row, int column)
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
return|return
operator|(
name|column
operator|==
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setValueAt (Object aValue, int rowIndex, int columnIndex)
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
synchronized|synchronized
init|(
name|internalList
init|)
block|{
if|if
condition|(
name|columnIndex
operator|==
literal|0
condition|)
block|{
name|internalList
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
operator|.
name|setKey
argument_list|(
operator|(
name|String
operator|)
name|aValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|fireTableRowsUpdated
argument_list|(
name|rowIndex
argument_list|,
name|rowIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|fireTableRowsUpdated
argument_list|(
name|rowIndex
argument_list|,
name|rowIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|formatEntry (BibEntry entry, BibDatabase database)
specifier|private
specifier|static
name|String
name|formatEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|BibDatabase
name|database
parameter_list|)
block|{
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
name|layoutFormat
argument_list|)
decl_stmt|;
try|try
block|{
name|Layout
name|layout
init|=
operator|new
name|LayoutHelper
argument_list|(
name|sr
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|)
operator|.
name|getLayoutFromText
argument_list|()
decl_stmt|;
return|return
name|layout
operator|.
name|doLayout
argument_list|(
name|entry
argument_list|,
name|database
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem generating entry layout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

