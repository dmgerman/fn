begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.fieldeditors
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|journals
operator|.
name|JournalAbbreviationPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|FieldEditors
specifier|public
class|class
name|FieldEditors
block|{
DECL|method|getForField (String fieldName, TaskExecutor taskExecutor, DialogService dialogService, JournalAbbreviationLoader journalAbbreviationLoader, JournalAbbreviationPreferences journalAbbreviationPreferences, JabRefPreferences preferences, BibDatabaseContext databaseContext, String entryType)
specifier|public
specifier|static
name|FieldEditorFX
name|getForField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TaskExecutor
name|taskExecutor
parameter_list|,
name|DialogService
name|dialogService
parameter_list|,
name|JournalAbbreviationLoader
name|journalAbbreviationLoader
parameter_list|,
name|JournalAbbreviationPreferences
name|journalAbbreviationPreferences
parameter_list|,
name|JabRefPreferences
name|preferences
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|String
name|entryType
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|FieldProperty
argument_list|>
name|fieldExtras
init|=
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TIME_STAMP_FIELD
argument_list|)
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|DATE
argument_list|)
condition|)
block|{
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|ISO_DATE
argument_list|)
condition|)
block|{
return|return
operator|new
name|DateEditor
argument_list|(
name|fieldName
argument_list|,
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"[uuuu][-MM][-dd]"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DateEditor
argument_list|(
name|fieldName
argument_list|,
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TIME_STAMP_FORMAT
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|EXTERNAL
argument_list|)
condition|)
block|{
return|return
operator|new
name|UrlEditor
argument_list|(
name|fieldName
argument_list|,
name|dialogService
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
condition|)
block|{
return|return
operator|new
name|JournalEditor
argument_list|(
name|fieldName
argument_list|,
name|journalAbbreviationLoader
argument_list|,
name|journalAbbreviationPreferences
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|DOI
argument_list|)
operator|||
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|EPRINT
argument_list|)
operator|||
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|ISBN
argument_list|)
condition|)
block|{
return|return
operator|new
name|IdentifierEditor
argument_list|(
name|fieldName
argument_list|,
name|taskExecutor
argument_list|,
name|dialogService
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|OWNER
argument_list|)
condition|)
block|{
return|return
operator|new
name|OwnerEditor
argument_list|(
name|fieldName
argument_list|,
name|preferences
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|FILE_EDITOR
argument_list|)
condition|)
block|{
return|return
operator|new
name|LinkedFilesEditor
argument_list|(
name|fieldName
argument_list|,
name|dialogService
argument_list|,
name|databaseContext
argument_list|,
name|taskExecutor
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|YES_NO
argument_list|)
condition|)
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|YesNoEditorViewModel
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|MONTH
argument_list|)
condition|)
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|MonthEditorViewModel
argument_list|(
name|databaseContext
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|GENDER
argument_list|)
condition|)
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|GenderEditorViewModel
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|EDITOR_TYPE
argument_list|)
condition|)
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|EditorTypeEditorViewModel
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PAGINATION
argument_list|)
condition|)
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|PaginationEditorViewModel
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"patent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|entryType
argument_list|)
condition|)
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|PatentTypeEditorViewModel
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OptionEditor
argument_list|<>
argument_list|(
name|fieldName
argument_list|,
operator|new
name|TypeEditorViewModel
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|SINGLE_ENTRY_LINK
argument_list|)
operator|||
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|MULTIPLE_ENTRY_LINK
argument_list|)
condition|)
block|{
return|return
operator|new
name|LinkedEntriesEditor
argument_list|(
name|fieldName
argument_list|,
name|databaseContext
argument_list|)
return|;
block|}
comment|// default
return|return
operator|new
name|SimpleEditor
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

