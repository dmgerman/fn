begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.fieldeditors
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiPredicate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|DoubleProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleDoubleProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Alert
operator|.
name|AlertType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonBar
operator|.
name|ButtonData
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AbstractViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|DownloadExternalFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|FileDownloadTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|LinkedFileEditDialogView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|JabRefIcon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|externalfiles
operator|.
name|LinkedFileHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|net
operator|.
name|URLDownload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|xmp
operator|.
name|XmpUtilWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|OptionalUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|LinkedFileViewModel
specifier|public
class|class
name|LinkedFileViewModel
extends|extends
name|AbstractViewModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LinkedFileViewModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|linkedFile
specifier|private
specifier|final
name|LinkedFile
name|linkedFile
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|downloadProgress
specifier|private
specifier|final
name|DoubleProperty
name|downloadProgress
init|=
operator|new
name|SimpleDoubleProperty
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|downloadOngoing
specifier|private
specifier|final
name|BooleanProperty
name|downloadOngoing
init|=
operator|new
name|SimpleBooleanProperty
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|isAutomaticallyFound
specifier|private
specifier|final
name|BooleanProperty
name|isAutomaticallyFound
init|=
operator|new
name|SimpleBooleanProperty
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|canWriteXMPMetadata
specifier|private
specifier|final
name|BooleanProperty
name|canWriteXMPMetadata
init|=
operator|new
name|SimpleBooleanProperty
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|taskExecutor
specifier|private
specifier|final
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|field|filePreferences
specifier|private
specifier|final
name|FilePreferences
name|filePreferences
decl_stmt|;
DECL|field|xmpPreferences
specifier|private
specifier|final
name|XmpPreferences
name|xmpPreferences
decl_stmt|;
DECL|field|linkedFileHandler
specifier|private
specifier|final
name|LinkedFileHandler
name|linkedFileHandler
decl_stmt|;
DECL|method|LinkedFileViewModel (LinkedFile linkedFile, BibEntry entry, BibDatabaseContext databaseContext, TaskExecutor taskExecutor, DialogService dialogService, JabRefPreferences preferences)
specifier|public
name|LinkedFileViewModel
parameter_list|(
name|LinkedFile
name|linkedFile
parameter_list|,
name|BibEntry
name|entry
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|TaskExecutor
name|taskExecutor
parameter_list|,
name|DialogService
name|dialogService
parameter_list|,
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|linkedFile
operator|=
name|linkedFile
expr_stmt|;
name|this
operator|.
name|filePreferences
operator|=
name|preferences
operator|.
name|getFilePreferences
argument_list|()
expr_stmt|;
name|this
operator|.
name|linkedFileHandler
operator|=
operator|new
name|LinkedFileHandler
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|,
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
expr_stmt|;
name|this
operator|.
name|databaseContext
operator|=
name|databaseContext
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|this
operator|.
name|taskExecutor
operator|=
name|taskExecutor
expr_stmt|;
name|xmpPreferences
operator|=
name|preferences
operator|.
name|getXMPPreferences
argument_list|()
expr_stmt|;
name|downloadOngoing
operator|.
name|bind
argument_list|(
name|downloadProgress
operator|.
name|greaterThanOrEqualTo
argument_list|(
literal|0
argument_list|)
operator|.
name|and
argument_list|(
name|downloadProgress
operator|.
name|lessThan
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|canWriteXMPMetadata
operator|.
name|setValue
argument_list|(
operator|!
name|linkedFile
operator|.
name|isOnlineLink
argument_list|()
operator|&&
name|linkedFile
operator|.
name|getFileType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|canWriteXMPMetadataProperty ()
specifier|public
name|BooleanProperty
name|canWriteXMPMetadataProperty
parameter_list|()
block|{
return|return
name|canWriteXMPMetadata
return|;
block|}
DECL|method|isAutomaticallyFound ()
specifier|public
name|boolean
name|isAutomaticallyFound
parameter_list|()
block|{
return|return
name|isAutomaticallyFound
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|isAutomaticallyFoundProperty ()
specifier|public
name|BooleanProperty
name|isAutomaticallyFoundProperty
parameter_list|()
block|{
return|return
name|isAutomaticallyFound
return|;
block|}
DECL|method|downloadOngoingProperty ()
specifier|public
name|BooleanProperty
name|downloadOngoingProperty
parameter_list|()
block|{
return|return
name|downloadOngoing
return|;
block|}
DECL|method|downloadProgressProperty ()
specifier|public
name|DoubleProperty
name|downloadProgressProperty
parameter_list|()
block|{
return|return
name|downloadProgress
return|;
block|}
DECL|method|linkProperty ()
specifier|public
name|StringProperty
name|linkProperty
parameter_list|()
block|{
return|return
name|linkedFile
operator|.
name|linkProperty
argument_list|()
return|;
block|}
DECL|method|descriptionProperty ()
specifier|public
name|StringProperty
name|descriptionProperty
parameter_list|()
block|{
return|return
name|linkedFile
operator|.
name|descriptionProperty
argument_list|()
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|linkedFile
operator|.
name|getDescription
argument_list|()
return|;
block|}
DECL|method|getDescriptionAndLink ()
specifier|public
name|String
name|getDescriptionAndLink
parameter_list|()
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|linkedFile
operator|.
name|getDescription
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|linkedFile
operator|.
name|getLink
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|linkedFile
operator|.
name|getDescription
argument_list|()
operator|+
literal|" ("
operator|+
name|linkedFile
operator|.
name|getLink
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
DECL|method|findIn (List<Path> directories)
specifier|public
name|Optional
argument_list|<
name|Path
argument_list|>
name|findIn
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|directories
parameter_list|)
block|{
return|return
name|linkedFile
operator|.
name|findIn
argument_list|(
name|directories
argument_list|)
return|;
block|}
comment|/**      * TODO: Be a bit smarter and try to infer correct icon, for example using {@link      * org.jabref.gui.externalfiletype.ExternalFileTypes#getExternalFileTypeByName(String)}      */
DECL|method|getTypeIcon ()
specifier|public
name|JabRefIcon
name|getTypeIcon
parameter_list|()
block|{
return|return
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|PDF_FILE
return|;
block|}
DECL|method|markAsAutomaticallyFound ()
specifier|public
name|void
name|markAsAutomaticallyFound
parameter_list|()
block|{
name|isAutomaticallyFound
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|acceptAsLinked ()
specifier|public
name|void
name|acceptAsLinked
parameter_list|()
block|{
name|isAutomaticallyFound
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|getObservables ()
specifier|public
name|Observable
index|[]
name|getObservables
parameter_list|()
block|{
name|List
argument_list|<
name|Observable
argument_list|>
name|observables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|linkedFile
operator|.
name|getObservables
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|observables
operator|.
name|add
argument_list|(
name|downloadOngoing
argument_list|)
expr_stmt|;
name|observables
operator|.
name|add
argument_list|(
name|downloadProgress
argument_list|)
expr_stmt|;
name|observables
operator|.
name|add
argument_list|(
name|isAutomaticallyFound
argument_list|)
expr_stmt|;
return|return
name|observables
operator|.
name|toArray
argument_list|(
operator|new
name|Observable
index|[
name|observables
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|open ()
specifier|public
name|void
name|open
parameter_list|()
block|{
try|try
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|type
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|fromLinkedFile
argument_list|(
name|linkedFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|successful
init|=
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
name|databaseContext
argument_list|,
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|successful
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File not found"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not find file '%0'."
argument_list|,
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error opening file '%0'."
argument_list|,
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openFolder ()
specifier|public
name|void
name|openFolder
parameter_list|()
block|{
try|try
block|{
name|Path
name|path
init|=
literal|null
decl_stmt|;
comment|// absolute path
if|if
condition|(
name|Paths
operator|.
name|get
argument_list|(
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// relative to file folder
for|for
control|(
name|Path
name|folder
range|:
name|databaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|filePreferences
argument_list|)
control|)
block|{
name|Path
name|file
init|=
name|folder
operator|.
name|resolve
argument_list|(
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|path
operator|=
name|file
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|JabRefDesktop
operator|.
name|openFolderAndSelectFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Cannot open folder"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rename ()
specifier|public
name|void
name|rename
parameter_list|()
block|{
if|if
condition|(
name|linkedFile
operator|.
name|isOnlineLink
argument_list|()
condition|)
block|{
comment|// Cannot rename remote links
return|return;
block|}
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|linkedFile
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|performRenameWithConflictCheck
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File not found"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not find file '%0'."
argument_list|,
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performRenameWithConflictCheck ()
specifier|private
name|void
name|performRenameWithConflictCheck
parameter_list|()
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|fileConflictCheck
init|=
name|linkedFileHandler
operator|.
name|findExistingFile
argument_list|(
name|linkedFile
argument_list|,
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileConflictCheck
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|String
name|targetFileName
init|=
name|linkedFileHandler
operator|.
name|getSuggestedFileName
argument_list|()
decl_stmt|;
name|boolean
name|confirmOverwrite
init|=
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File exists"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"'%0' exists. Overwrite file?"
argument_list|,
name|targetFileName
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Overwrite"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|confirmOverwrite
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|fileConflictCheck
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rename failed"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"JabRef cannot access the file because it is being used by another process."
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
return|return;
block|}
block|}
try|try
block|{
name|linkedFileHandler
operator|.
name|renameToSuggestedName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rename failed"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"JabRef cannot access the file because it is being used by another process."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|moveToDefaultDirectory ()
specifier|public
name|void
name|moveToDefaultDirectory
parameter_list|()
block|{
if|if
condition|(
name|linkedFile
operator|.
name|isOnlineLink
argument_list|()
condition|)
block|{
comment|// Cannot move remote links
return|return;
block|}
comment|// Get target folder
name|Optional
argument_list|<
name|Path
argument_list|>
name|fileDir
init|=
name|databaseContext
operator|.
name|getFirstExistingFileDir
argument_list|(
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileDir
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"File directory is not set or does not exist!"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|linkedFile
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|file
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
comment|// Found the linked file, so move it
try|try
block|{
name|linkedFileHandler
operator|.
name|moveToDefaultDirectory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not move file '%0'."
argument_list|,
name|file
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// File doesn't exist, so we can't move it.
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File not found"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not find file '%0'."
argument_list|,
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the filename for the current linked file and compares it to the new suggested filename.      * @return true if the suggested filename is same as current filename.      */
DECL|method|isGeneratedNameSameAsOriginal ()
specifier|public
name|boolean
name|isGeneratedNameSameAsOriginal
parameter_list|()
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|this
operator|.
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|currentFileName
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|suggestedFileName
init|=
name|this
operator|.
name|linkedFileHandler
operator|.
name|getSuggestedFileName
argument_list|()
decl_stmt|;
return|return
name|currentFileName
operator|.
name|equals
argument_list|(
name|suggestedFileName
argument_list|)
return|;
block|}
comment|/**      * Compares suggested filepath of current linkedFile with existing filepath.      * @return true if suggested filepath is same as existing filepath.      */
DECL|method|isGeneratedPathSameAsOriginal ()
specifier|public
name|boolean
name|isGeneratedPathSameAsOriginal
parameter_list|()
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|newDir
init|=
name|databaseContext
operator|.
name|getFirstExistingFileDir
argument_list|(
name|filePreferences
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|currentDir
init|=
name|linkedFile
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
name|BiPredicate
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|>
name|equality
init|=
parameter_list|(
name|fileA
parameter_list|,
name|fileB
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|Files
operator|.
name|isSameFile
argument_list|(
name|fileA
argument_list|,
name|fileB
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
return|return
name|OptionalUtil
operator|.
name|equals
argument_list|(
name|newDir
argument_list|,
name|currentDir
argument_list|,
name|equality
argument_list|)
return|;
block|}
DECL|method|moveToDefaultDirectoryAndRename ()
specifier|public
name|void
name|moveToDefaultDirectoryAndRename
parameter_list|()
block|{
name|moveToDefaultDirectory
argument_list|()
expr_stmt|;
name|rename
argument_list|()
expr_stmt|;
block|}
comment|/**      * Asks the user for confirmation that he really wants to the delete the file from disk (or just remove the link).      *      * @return true if the linked file should be removed afterwards from the entry (i.e because it was deleted      * successfully, does not exist in the first place or the user choose to remove it)      */
DECL|method|delete ()
specifier|public
name|boolean
name|delete
parameter_list|()
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|linkedFile
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not find file "
operator|+
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|ButtonType
name|removeFromEntry
init|=
operator|new
name|ButtonType
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove from entry"
argument_list|)
argument_list|,
name|ButtonData
operator|.
name|YES
argument_list|)
decl_stmt|;
name|ButtonType
name|deleteFromEntry
init|=
operator|new
name|ButtonType
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete from disk"
argument_list|)
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ButtonType
argument_list|>
name|buttonType
init|=
name|dialogService
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|AlertType
operator|.
name|INFORMATION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete '%0'"
argument_list|,
name|file
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete the selected file permanently from disk, or just remove the file from the entry? Pressing Delete will delete the file permanently from disk."
argument_list|)
argument_list|,
name|removeFromEntry
argument_list|,
name|deleteFromEntry
argument_list|,
name|ButtonType
operator|.
name|CANCEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|buttonType
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|removeFromEntry
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|buttonType
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|deleteFromEntry
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|delete
argument_list|(
name|file
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot delete file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"File permission error"
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"File permission error while deleting: "
operator|+
name|linkedFile
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|edit ()
specifier|public
name|void
name|edit
parameter_list|()
block|{
name|LinkedFileEditDialogView
name|dialog
init|=
operator|new
name|LinkedFileEditDialogView
argument_list|(
name|this
operator|.
name|linkedFile
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|LinkedFile
argument_list|>
name|editedFile
init|=
name|dialog
operator|.
name|showAndWait
argument_list|()
decl_stmt|;
name|editedFile
operator|.
name|ifPresent
argument_list|(
name|file
lambda|->
block|{
name|this
operator|.
name|linkedFile
operator|.
name|setLink
argument_list|(
name|file
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|linkedFile
operator|.
name|setDescription
argument_list|(
name|file
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|linkedFile
operator|.
name|setFileType
argument_list|(
name|file
operator|.
name|getFileType
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|writeXMPMetadata ()
specifier|public
name|void
name|writeXMPMetadata
parameter_list|()
block|{
comment|// Localization.lang("Writing XMP-metadata...")
name|BackgroundTask
argument_list|<
name|Void
argument_list|>
name|writeTask
init|=
name|BackgroundTask
operator|.
name|wrap
argument_list|(
parameter_list|()
lambda|->
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|linkedFile
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// TODO: Print error message
comment|// Localization.lang("PDF does not exist");
block|}
else|else
block|{
try|try
block|{
name|XmpUtilWriter
operator|.
name|writeXmp
argument_list|(
name|file
operator|.
name|get
argument_list|()
argument_list|,
name|entry
argument_list|,
name|databaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|xmpPreferences
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TransformerException
name|ex
parameter_list|)
block|{
comment|// TODO: Print error message
comment|// Localization.lang("Error while writing") + " '" + file.toString() + "': " + ex;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
comment|// Localization.lang("Finished writing XMP-metadata.")
comment|// TODO: Show progress
name|taskExecutor
operator|.
name|execute
argument_list|(
name|writeTask
argument_list|)
expr_stmt|;
block|}
DECL|method|download ()
specifier|public
name|void
name|download
parameter_list|()
block|{
if|if
condition|(
operator|!
name|linkedFile
operator|.
name|isOnlineLink
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"In order to download the file it has to be an online link"
argument_list|)
throw|;
block|}
try|try
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|targetDirectory
init|=
name|databaseContext
operator|.
name|getFirstExistingFileDir
argument_list|(
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetDirectory
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Download file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"File directory is not set or does not exist!"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|URLDownload
name|urlDownload
init|=
operator|new
name|URLDownload
argument_list|(
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
decl_stmt|;
name|BackgroundTask
argument_list|<
name|Path
argument_list|>
name|downloadTask
init|=
name|BackgroundTask
operator|.
name|wrap
argument_list|(
parameter_list|()
lambda|->
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|suggestedType
init|=
name|inferFileType
argument_list|(
name|urlDownload
argument_list|)
decl_stmt|;
name|String
name|suggestedTypeName
init|=
name|suggestedType
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getName
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|linkedFile
operator|.
name|setFileType
argument_list|(
name|suggestedTypeName
argument_list|)
expr_stmt|;
name|String
name|suggestedName
init|=
name|linkedFileHandler
operator|.
name|getSuggestedFileName
argument_list|()
decl_stmt|;
return|return
name|targetDirectory
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|suggestedName
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|then
argument_list|(
name|destination
lambda|->
operator|new
name|FileDownloadTask
argument_list|(
name|urlDownload
operator|.
name|getSource
argument_list|()
argument_list|,
name|destination
argument_list|)
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|destination
lambda|->
block|{
name|LinkedFile
name|newLinkedFile
operator|=
name|LinkedFilesEditorViewModel
operator|.
name|fromFile
argument_list|(
name|destination
argument_list|,
name|databaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|filePreferences
argument_list|)
argument_list|)
argument_list|;
name|linkedFile
operator|.
name|setLink
argument_list|(
name|newLinkedFile
operator|.
name|getLink
argument_list|()
argument_list|)
argument_list|;
name|linkedFile
operator|.
name|setFileType
argument_list|(
name|newLinkedFile
operator|.
name|getFileType
argument_list|()
argument_list|)
argument_list|;
block|}
block|)
function|.onFailure
parameter_list|(
function|exception -> dialogService.showErrorDialogAndWait
parameter_list|(
function|"Download failed"
operator|,
function|exception
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|downloadProgress
operator|.
name|bind
argument_list|(
name|downloadTask
operator|.
name|workDonePercentageProperty
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|taskExecutor
operator|.
name|execute
argument_list|(
name|downloadTask
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} catch
operator|(
name|MalformedURLException
name|exception
operator|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Invalid URL"
argument_list|)
argument_list|,
name|exception
argument_list|)
block|;         }
end_expr_stmt

begin_function
unit|}      private
DECL|method|inferFileType (URLDownload urlDownload)
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|inferFileType
parameter_list|(
name|URLDownload
name|urlDownload
parameter_list|)
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|suggestedType
init|=
name|inferFileTypeFromMimeType
argument_list|(
name|urlDownload
argument_list|)
decl_stmt|;
comment|// If we did not find a file type from the MIME type, try based on extension:
if|if
condition|(
operator|!
name|suggestedType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|suggestedType
operator|=
name|inferFileTypeFromURL
argument_list|(
name|urlDownload
operator|.
name|getSource
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|suggestedType
return|;
block|}
end_function

begin_function
DECL|method|inferFileTypeFromMimeType (URLDownload urlDownload)
specifier|private
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|inferFileTypeFromMimeType
parameter_list|(
name|URLDownload
name|urlDownload
parameter_list|)
block|{
name|String
name|mimeType
init|=
name|urlDownload
operator|.
name|getMimeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"MIME Type suggested: "
operator|+
name|mimeType
argument_list|)
expr_stmt|;
return|return
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByMimeType
argument_list|(
name|mimeType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
DECL|method|inferFileTypeFromURL (String url)
specifier|private
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|inferFileTypeFromURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|String
name|extension
init|=
name|DownloadExternalFile
operator|.
name|getSuffix
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
return|return
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByExt
argument_list|(
name|extension
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_function

begin_function
DECL|method|getFile ()
specifier|public
name|LinkedFile
name|getFile
parameter_list|()
block|{
return|return
name|linkedFile
return|;
block|}
end_function

unit|}
end_unit

