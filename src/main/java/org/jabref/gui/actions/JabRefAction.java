begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.actions
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|Bindings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingRepository
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_comment
comment|/**  * Wrapper around one of our actions from {@link Action} to convert them to controlsfx {@link org.controlsfx.control.action.Action}.  */
end_comment

begin_class
DECL|class|JabRefAction
class|class
name|JabRefAction
extends|extends
name|org
operator|.
name|controlsfx
operator|.
name|control
operator|.
name|action
operator|.
name|Action
block|{
DECL|method|JabRefAction (Action action, KeyBindingRepository keyBindingRepository)
specifier|public
name|JabRefAction
parameter_list|(
name|Action
name|action
parameter_list|,
name|KeyBindingRepository
name|keyBindingRepository
parameter_list|)
block|{
name|super
argument_list|(
name|action
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|getIcon
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|icon
lambda|->
name|setGraphic
argument_list|(
name|icon
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|getKeyBinding
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|keyBinding
lambda|->
name|setAccelerator
argument_list|(
name|keyBindingRepository
operator|.
name|getKeyCombination
argument_list|(
name|keyBinding
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setLongText
argument_list|(
name|action
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|JabRefAction (Action action, Command command, KeyBindingRepository keyBindingRepository)
specifier|public
name|JabRefAction
parameter_list|(
name|Action
name|action
parameter_list|,
name|Command
name|command
parameter_list|,
name|KeyBindingRepository
name|keyBindingRepository
parameter_list|)
block|{
name|this
argument_list|(
name|action
argument_list|,
name|keyBindingRepository
argument_list|)
expr_stmt|;
name|setEventHandler
argument_list|(
name|event
lambda|->
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|trackExecute
argument_list|(
name|getActionName
argument_list|(
name|action
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|disabledProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|command
operator|.
name|executableProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|instanceof
name|SimpleCommand
condition|)
block|{
name|SimpleCommand
name|ourCommand
init|=
operator|(
name|SimpleCommand
operator|)
name|command
decl_stmt|;
name|longTextProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|Bindings
operator|.
name|concat
argument_list|(
name|action
operator|.
name|getDescription
argument_list|()
argument_list|,
name|ourCommand
operator|.
name|statusMessageProperty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getActionName (Action action, Command command)
specifier|private
name|String
name|getActionName
parameter_list|(
name|Action
name|action
parameter_list|,
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|.
name|isAnonymousClass
argument_list|()
condition|)
block|{
return|return
name|action
operator|.
name|getText
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|command
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
DECL|method|trackExecute (String actionName)
specifier|private
name|void
name|trackExecute
parameter_list|(
name|String
name|actionName
parameter_list|)
block|{
name|Globals
operator|.
name|getTelemetryClient
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|telemetryClient
lambda|->
name|telemetryClient
operator|.
name|trackEvent
argument_list|(
name|actionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

