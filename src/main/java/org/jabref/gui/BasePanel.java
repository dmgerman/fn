begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Clipboard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|ClipboardOwner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|StringSelection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotRedoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotUndoException
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|embed
operator|.
name|swing
operator|.
name|JFXPanel
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Scene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|BaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CleanupAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CopyBibTeXKeyAndLinkAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompletePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompleteUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|PersonNameSuggestionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|SuggestionProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|bibtexkeypattern
operator|.
name|SearchFixDuplicateLabels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
operator|.
name|DatabaseChangeMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
operator|.
name|FileUpdatePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|contentselector
operator|.
name|ContentSelectorDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|customjfx
operator|.
name|CustomJFXPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|ExportToClipboardAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|FindFullTextAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|SynchronizeFileField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|WriteXMPAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|AttachFileAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
operator|.
name|GroupAddRemoveDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|actions
operator|.
name|AppendDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
operator|.
name|AbbreviateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
operator|.
name|UnabbreviateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableSelectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|MergeEntriesDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|MergeWithFetchedEntryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|plaintextimport
operator|.
name|TextInputDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldDatabaseChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldValueViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|CountingUndoManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableChangeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableKeyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|CheckBoxMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|CallBack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|CitationStyleToClipboardWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|MarkEntriesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|SendAsEMailAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStyleCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStyleOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|BibtexDatabaseWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|FileSaveSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SaveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SavePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|exporter
operator|.
name|SaveSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Encodings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|pdf
operator|.
name|FileAnnotationCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileFinders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|KeyCollisionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|BibDatabaseContextChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|CoarseChangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|EntryAddedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|EntryRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseSynchronizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|EntryChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|EntryEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialFieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreviewPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|FormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|BasePanel
specifier|public
class|class
name|BasePanel
extends|extends
name|JPanel
implements|implements
name|ClipboardOwner
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasePanel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Divider size for BaseFrame split pane. 0 means non-resizable.
DECL|field|SPLIT_PANE_DIVIDER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|SPLIT_PANE_DIVIDER_SIZE
init|=
literal|4
decl_stmt|;
DECL|field|bibDatabaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|bibDatabaseContext
decl_stmt|;
DECL|field|tableModel
specifier|private
specifier|final
name|MainTableDataModel
name|tableModel
decl_stmt|;
DECL|field|citationStyleCache
specifier|private
specifier|final
name|CitationStyleCache
name|citationStyleCache
decl_stmt|;
DECL|field|annotationCache
specifier|private
specifier|final
name|FileAnnotationCache
name|annotationCache
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
comment|// The undo manager.
DECL|field|undoAction
specifier|private
specifier|final
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
specifier|private
specifier|final
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
DECL|field|undoManager
specifier|private
specifier|final
name|CountingUndoManager
name|undoManager
init|=
operator|new
name|CountingUndoManager
argument_list|()
decl_stmt|;
DECL|field|previousEntries
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|previousEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|nextEntries
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|nextEntries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Keeps track of the string dialog if it is open.
DECL|field|actions
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sidePaneManager
specifier|private
specifier|final
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|preview
specifier|private
specifier|final
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|previewContainer
specifier|private
specifier|final
name|JFXPanel
name|previewContainer
decl_stmt|;
comment|// To contain instantiated entry editors. This is to save time
comment|// As most enums, this must not be null
DECL|field|mode
specifier|private
name|BasePanelMode
name|mode
init|=
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
decl_stmt|;
DECL|field|entryEditor
specifier|private
specifier|final
name|EntryEditor
name|entryEditor
decl_stmt|;
DECL|field|entryEditorContainer
specifier|private
specifier|final
name|JFXPanel
name|entryEditorContainer
decl_stmt|;
DECL|field|selectionListener
specifier|private
name|MainTableSelectionListener
name|selectionListener
decl_stmt|;
DECL|field|splitPane
specifier|private
name|JSplitPane
name|splitPane
decl_stmt|;
DECL|field|saving
specifier|private
name|boolean
name|saving
decl_stmt|;
comment|// AutoCompleter used in the search bar
DECL|field|searchAutoCompleter
specifier|private
name|PersonNameSuggestionProvider
name|searchAutoCompleter
decl_stmt|;
DECL|field|baseChanged
specifier|private
name|boolean
name|baseChanged
decl_stmt|;
DECL|field|nonUndoableChange
specifier|private
name|boolean
name|nonUndoableChange
decl_stmt|;
comment|// Used to track whether the base has changed since last save.
DECL|field|mainTable
specifier|private
name|MainTable
name|mainTable
decl_stmt|;
DECL|field|tableFormat
specifier|private
name|MainTableFormat
name|tableFormat
decl_stmt|;
DECL|field|showing
specifier|private
name|BibEntry
name|showing
decl_stmt|;
comment|// Variable to prevent erroneous update of back/forward histories at the time
comment|// when a Back or Forward operation is being processed:
DECL|field|backOrForwardInProgress
specifier|private
name|boolean
name|backOrForwardInProgress
decl_stmt|;
comment|// in switching between entries.
DECL|field|preambleEditor
specifier|private
name|PreambleEditor
name|preambleEditor
decl_stmt|;
comment|// Keeps track of the preamble dialog if it is open.
DECL|field|stringDialog
specifier|private
name|StringDialog
name|stringDialog
decl_stmt|;
DECL|field|suggestionProviders
specifier|private
name|SuggestionProviders
name|suggestionProviders
decl_stmt|;
comment|// the query the user searches when this BasePanel is active
DECL|field|currentSearchQuery
specifier|private
name|Optional
argument_list|<
name|SearchQuery
argument_list|>
name|currentSearchQuery
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|changeMonitor
specifier|private
name|Optional
argument_list|<
name|DatabaseChangeMonitor
argument_list|>
name|changeMonitor
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|method|BasePanel (JabRefFrame frame, BibDatabaseContext bibDatabaseContext)
specifier|public
name|BasePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|bibDatabaseContext
operator|=
name|bibDatabaseContext
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|sidePaneManager
operator|=
name|frame
operator|.
name|getSidePaneManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|tableModel
operator|=
operator|new
name|MainTableDataModel
argument_list|(
name|getBibDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
name|citationStyleCache
operator|=
operator|new
name|CitationStyleCache
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
name|annotationCache
operator|=
operator|new
name|FileAnnotationCache
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
name|this
argument_list|,
name|getBibDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|preview
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|previewContainer
operator|=
name|CustomJFXPanel
operator|.
name|wrap
argument_list|(
operator|new
name|Scene
argument_list|(
name|preview
argument_list|)
argument_list|)
expr_stmt|;
name|setupMainPanel
argument_list|()
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|SearchListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|EntryRemovedListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure that at each addition of a new entry, the entry is added to the groups interface
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|GroupTreeListener
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|File
argument_list|>
name|file
init|=
name|bibDatabaseContext
operator|.
name|getDatabaseFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Register so we get notifications about outside changes to the file.
name|changeMonitor
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|DatabaseChangeMonitor
argument_list|(
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
comment|// if the database is not empty and no file is assigned,
comment|// the database came from an import and has to be treated somehow
comment|// -> mark as changed
name|this
operator|.
name|baseChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|UpdateTimestampListener
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|)
expr_stmt|;
name|entryEditor
operator|=
operator|new
name|EntryEditor
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|entryEditorContainer
operator|=
name|setupEntryEditor
argument_list|(
name|entryEditor
argument_list|)
expr_stmt|;
block|}
DECL|method|setupEntryEditor (EntryEditor entryEditor)
specifier|private
specifier|static
name|JFXPanel
name|setupEntryEditor
parameter_list|(
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
name|JFXPanel
name|container
init|=
name|CustomJFXPanel
operator|.
name|wrap
argument_list|(
operator|new
name|Scene
argument_list|(
name|entryEditor
argument_list|)
argument_list|)
decl_stmt|;
name|container
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
comment|//We need to consume this event here to prevent the propgation of keybinding events back to the JFrame
name|Optional
argument_list|<
name|KeyBinding
argument_list|>
name|keyBinding
init|=
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|mapToKeyBinding
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyBinding
operator|.
name|isPresent
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|keyBinding
operator|.
name|get
argument_list|()
condition|)
block|{
case|case
name|CUT
case|:
case|case
name|COPY
case|:
case|case
name|PASTE
case|:
case|case
name|DELETE_ENTRY
case|:
case|case
name|SELECT_ALL
case|:
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|//do nothing
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|runWorker (AbstractWorker worker)
specifier|public
specifier|static
name|void
name|runWorker
parameter_list|(
name|AbstractWorker
name|worker
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This part uses Spin's features:
name|Runnable
name|wrk
init|=
name|worker
operator|.
name|getWorker
argument_list|()
decl_stmt|;
comment|// The Worker returned by getWorker() has been wrapped
comment|// by Spin.off(), which makes its methods be run in
comment|// a different thread from the EDT.
name|CallBack
name|clb
init|=
name|worker
operator|.
name|getCallBack
argument_list|()
decl_stmt|;
name|worker
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// This method runs in this same thread, the EDT.
comment|// Useful for initial GUI actions, like printing a message.
comment|// The CallBack returned by getCallBack() has been wrapped
comment|// by Spin.over(), which makes its methods be run on
comment|// the EDT.
name|wrk
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Runs the potentially time-consuming action
comment|// without freezing the GUI. The magic is that THIS line
comment|// of execution will not continue until run() is finished.
name|clb
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Runs the update() method on the EDT.
block|}
annotation|@
name|Subscribe
DECL|method|listen (BibDatabaseContextChangedEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|BibDatabaseContextChangedEvent
name|event
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|this
operator|.
name|markBaseChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a collection of suggestion providers, which are populated from the current library.      */
DECL|method|getSuggestionProviders ()
specifier|public
name|SuggestionProviders
name|getSuggestionProviders
parameter_list|()
block|{
return|return
name|suggestionProviders
return|;
block|}
DECL|method|getTabTitle ()
specifier|public
name|String
name|getTabTitle
parameter_list|()
block|{
name|StringBuilder
name|title
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|DatabaseLocation
name|databaseLocation
init|=
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|boolean
name|isAutosaveEnabled
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|LOCAL_AUTO_SAVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|databaseLocation
operator|==
name|DatabaseLocation
operator|.
name|LOCAL
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// check if file is modified
name|String
name|changeFlag
init|=
name|isModified
argument_list|()
operator|&&
operator|!
name|isAutosaveEnabled
condition|?
literal|"*"
else|:
literal|""
decl_stmt|;
name|title
operator|.
name|append
argument_list|(
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|changeFlag
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|title
operator|.
name|append
argument_list|(
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDatabase
argument_list|()
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
comment|// if the database is not empty and no file is assigned,
comment|// the database came from an import and has to be treated somehow
comment|// -> mark as changed
comment|// This also happens internally at basepanel to ensure consistency line 224
name|title
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|databaseLocation
operator|==
name|DatabaseLocation
operator|.
name|SHARED
condition|)
block|{
name|title
operator|.
name|append
argument_list|(
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDBMSSynchronizer
argument_list|()
operator|.
name|getDBName
argument_list|()
operator|+
literal|" ["
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"shared"
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|title
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isModified ()
specifier|public
name|boolean
name|isModified
parameter_list|()
block|{
return|return
name|baseChanged
return|;
block|}
DECL|method|getMode ()
specifier|public
name|BasePanelMode
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|setMode (BasePanelMode mode)
specifier|public
name|void
name|setMode
parameter_list|(
name|BasePanelMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
DECL|method|frame ()
specifier|public
name|JabRefFrame
name|frame
parameter_list|()
block|{
return|return
name|frame
return|;
block|}
DECL|method|output (String s)
specifier|public
name|void
name|output
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setupActions ()
specifier|private
name|void
name|setupActions
parameter_list|()
block|{
name|SaveDatabaseAction
name|saveAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|CleanupAction
name|cleanUpAction
init|=
operator|new
name|CleanupAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|UNDO
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|REDO
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|FOCUS_TABLE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|mainTable
operator|.
name|requestFocus
argument_list|()
block|;         }
argument_list|)
expr_stmt|;
comment|// The action for opening an entry editor.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|EDIT
argument_list|,
operator|(
name|BaseAction
operator|)
name|selectionListener
operator|::
name|editSignalled
argument_list|)
expr_stmt|;
comment|// The action for saving a database.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|,
name|saveAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE_AS
argument_list|,
operator|(
name|BaseAction
operator|)
name|saveAction
operator|::
name|saveAs
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE_SELECTED_AS
argument_list|,
operator|new
name|SaveSelectedAction
argument_list|(
name|SavePreferences
operator|.
name|DatabaseSaveType
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE_SELECTED_AS_PLAIN
argument_list|,
operator|new
name|SaveSelectedAction
argument_list|(
name|SavePreferences
operator|.
name|DatabaseSaveType
operator|.
name|PLAIN_BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
comment|// The action for copying selected entries.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PRINT_PREVIEW
argument_list|,
operator|new
name|PrintPreviewAction
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|CUT
argument_list|,
operator|(
name|BaseAction
operator|)
name|this
operator|::
name|cut
argument_list|)
expr_stmt|;
comment|//when you modify this action be sure to adjust Actions.CUT,
comment|//they are the same except of the Localization, delete confirmation and Actions.COPY call
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|DELETE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|delete
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The action for pasting entries or cell contents.
comment|//  - more robust detection of available content flavors (doesn't only look at first one offered)
comment|//  - support for parsing string-flavor clipboard contents which are bibtex entries.
comment|//    This allows you to (a) paste entire bibtex entries from a text editor, web browser, etc
comment|//                       (b) copy and paste entries between multiple instances of JabRef (since
comment|//         only the text representation seems to get as far as the X clipboard, at least on my system)
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PASTE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|paste
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SELECT_ALL
argument_list|,
operator|(
name|BaseAction
operator|)
name|mainTable
operator|::
name|selectAll
argument_list|)
expr_stmt|;
comment|// The action for opening the preamble editor
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|EDIT_PREAMBLE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
if|if
condition|(
name|preambleEditor
operator|==
literal|null
condition|)
block|{
name|PreambleEditor
name|form
init|=
operator|new
name|PreambleEditor
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|form
operator|.
name|setLocationRelativeTo
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|preambleEditor
operator|=
name|form
expr_stmt|;
block|}
else|else
block|{
name|preambleEditor
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|)
class|;
end_class

begin_comment
comment|// The action for opening the string editor
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|EDIT_STRINGS
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
if|if
condition|(
name|stringDialog
operator|==
literal|null
condition|)
block|{
name|StringDialog
name|form
init|=
operator|new
name|StringDialog
argument_list|(
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|form
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stringDialog
operator|=
name|form
expr_stmt|;
block|}
else|else
block|{
name|stringDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|FindUnlinkedFilesDialog
operator|.
name|ACTION_COMMAND
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|final
name|FindUnlinkedFilesDialog
name|dialog
operator|=
operator|new
name|FindUnlinkedFilesDialog
argument_list|(
name|frame
argument_list|,
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
block|;
name|dialog
operator|.
name|setLocationRelativeTo
argument_list|(
name|frame
argument_list|)
block|;
name|dialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
block|;         }
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for auto-generating keys.
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MAKE_KEY
argument_list|,
operator|new
name|AbstractWorker
argument_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
name|int
name|numSelected
decl_stmt|;
name|boolean
name|canceled
decl_stmt|;
comment|// Run first, in EDT:
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
name|entries
operator|=
name|getSelectedEntries
argument_list|()
expr_stmt|;
name|numSelected
operator|=
name|entries
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// None selected. Inform the user to select entries first.
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"First select the entries you want keys to be generated for."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|INFORMATION_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generating BibTeX key for"
argument_list|)
argument_list|,
name|numSelected
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Run second, on a different thread:
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We don't want to generate keys for entries which already have one thus remove the entries
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AVOID_OVERWRITING_KEY
argument_list|)
condition|)
block|{
name|entries
operator|.
name|removeIf
argument_list|(
name|BibEntry
operator|::
name|hasCiteKey
argument_list|)
expr_stmt|;
comment|// if we're going to override some cite keys warn the user about it
block|}
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|)
condition|)
block|{
if|if
condition|(
name|entries
operator|.
name|parallelStream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|BibEntry
operator|::
name|hasCiteKey
argument_list|)
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"One or more keys will be overwritten. Continue?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cbm
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Overwrite keys"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|,
operator|!
name|cbm
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
comment|// The user doesn't want to overide cite keys
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
name|canceled
operator|=
literal|true
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// generate the new cite keys for each entry
specifier|final
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexKeyGenerator
name|keyGenerator
init|=
operator|new
name|BibtexKeyGenerator
argument_list|(
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keyGenerator
operator|.
name|generateAndSetKey
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|change
operator|.
name|ifPresent
argument_list|(
name|fieldChange
lambda|->
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|fieldChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// register the undo event only if new cite keys were generated
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Run third, on EDT:
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|canceled
condition|)
block|{
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
return|return;
block|}
name|markBaseChanged
argument_list|()
expr_stmt|;
name|numSelected
operator|=
name|entries
operator|.
name|size
argument_list|()
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////////
comment|//          Prevent selection loss for autogenerated BibTeX-Keys
comment|////////////////////////////////////////////////////////////////////////////////
for|for
control|(
specifier|final
name|BibEntry
name|bibEntry
range|:
name|entries
control|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|int
name|row
init|=
name|mainTable
operator|.
name|findEntry
argument_list|(
name|bibEntry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|row
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|mainTable
operator|.
name|getSelectedRowCount
argument_list|()
operator|<
name|entries
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|mainTable
operator|.
name|addRowSelectionInterval
argument_list|(
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////////////////////////////////////////////////
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generated BibTeX key for"
argument_list|)
argument_list|,
name|numSelected
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for cleaning up entry.
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|CLEANUP
argument_list|,
name|cleanUpAction
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MERGE_ENTRIES
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
operator|new
name|MergeEntriesDialog
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SEARCH
argument_list|,
operator|(
name|BaseAction
operator|)
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|::
name|focus
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|GLOBAL_SEARCH
argument_list|,
operator|(
name|BaseAction
operator|)
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|::
name|performGlobalSearch
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for copying the selected entry's key.
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_KEY
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyKey
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for copying the selected entry's title.
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_TITLE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyTitle
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for copying a cite for the selected entry.
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITE_KEY
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyCiteKey
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for copying the BibTeX key and the title for the first selected entry
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_TITLE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyKeyAndTitle
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_ASCII_DOC
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|ASCII_DOC
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_XSLFO
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|XSL_FO
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_HTML
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|HTML
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_RTF
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|RTF
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_TEXT
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The action for copying the BibTeX keys as hyperlinks to the urls of the selected entries
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_LINK
argument_list|,
operator|new
name|CopyBibTeXKeyAndLinkAction
argument_list|(
name|mainTable
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MERGE_DATABASE
argument_list|,
operator|new
name|AppendDatabaseAction
argument_list|(
name|frame
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|ADD_FILE_LINK
argument_list|,
operator|new
name|AttachFileAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_EXTERNAL_FILE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|openExternalFile
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_FOLDER
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtil
operator|.
name|getListOfLinkedFiles
argument_list|(
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|,
name|bibDatabaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getFileDirectoryPreferences
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|f
range|:
name|files
control|)
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openFolderAndSelectFile
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not open folder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_CONSOLE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|JabRefDesktop
operator|.
name|openConsole
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PULL_CHANGES_FROM_SHARED_DATABASE
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|DatabaseSynchronizer
name|dbmsSynchronizer
operator|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDBMSSynchronizer
argument_list|()
block|;
name|dbmsSynchronizer
operator|.
name|pullChanges
argument_list|()
block|;         }
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_URL
argument_list|,
operator|new
name|OpenURLAction
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MERGE_WITH_FETCHED_ENTRY
argument_list|,
operator|new
name|MergeWithFetchedEntryAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|REPLACE_ALL
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|final
name|ReplaceStringDialog
name|rsd
operator|=
operator|new
name|ReplaceStringDialog
argument_list|(
name|frame
argument_list|)
block|;
name|rsd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
block|;
if|if
condition|(
operator|!
name|rsd
operator|.
name|okPressed
argument_list|()
condition|)
block|{
return|return;
block|}
name|int
name|counter
operator|=
literal|0
argument_list|;
name|final
name|NamedCompound
name|ce
operator|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replace string"
argument_list|)
argument_list|)
argument_list|;             if
operator|(
name|rsd
operator|.
name|selOnly
argument_list|()
operator|)
block|{
for|for
control|(
name|BibEntry
name|be
range|:
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
control|)
block|{
name|counter
operator|+=
name|rsd
operator|.
name|replace
argument_list|(
name|be
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_block
unit|} else
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|counter
operator|+=
name|rsd
operator|.
name|replace
argument_list|(
name|entry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replaced"
argument_list|)
operator|+
literal|' '
operator|+
name|counter
operator|+
literal|' '
operator|+
operator|(
name|counter
operator|==
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"occurrence"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"occurrences"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
block|{
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
end_if

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|DUPLI_CHECK
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
operator|new
name|DuplicateSearch
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PLAIN_TEXT_IMPORT
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
comment|// get Type of new entry
name|EntryTypeDialog
name|etd
operator|=
operator|new
name|EntryTypeDialog
argument_list|(
name|frame
argument_list|)
block|;
name|etd
operator|.
name|setLocationRelativeTo
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
block|;
name|etd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
block|;
name|EntryType
name|tp
operator|=
name|etd
operator|.
name|getChoice
argument_list|()
block|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BibEntry
name|bibEntry
operator|=
operator|new
name|BibEntry
argument_list|(
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|;
name|TextInputDialog
name|tidialog
operator|=
operator|new
name|TextInputDialog
argument_list|(
name|frame
argument_list|,
name|bibEntry
argument_list|)
argument_list|;
name|tidialog
operator|.
name|setLocationRelativeTo
argument_list|(
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|;
name|tidialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
argument_list|;              if
operator|(
name|tidialog
operator|.
name|okPressed
argument_list|()
operator|)
block|{
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|bibEntry
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
block|;
name|insertEntry
argument_list|(
name|bibEntry
argument_list|)
block|;             }
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MARK_ENTRIES
argument_list|,
operator|new
name|MarkEntriesAction
argument_list|(
name|frame
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|UNMARK_ENTRIES
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires one or more entries to be selected."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|NamedCompound
name|ce
operator|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|)
argument_list|;                 for
operator|(
name|BibEntry
name|be
operator|:
name|bes
operator|)
block|{
name|EntryMarker
operator|.
name|unmarkEntry
argument_list|(
name|be
argument_list|,
literal|false
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|ce
argument_list|)
block|;                 }
name|ce
operator|.
name|end
argument_list|()
argument_list|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
argument_list|;
name|markBaseChanged
argument_list|()
argument_list|;
name|String
name|outputStr
argument_list|;                 if
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
block|{
name|outputStr
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmarked selected entry"
argument_list|)
block|;                 }
else|else
block|{
name|outputStr
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmarked all %0 selected entries"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
argument_list|(
name|outputStr
argument_list|)
argument_list|;
end_expr_stmt

begin_expr_stmt
unit|} catch
operator|(
name|Throwable
name|ex
operator|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not unmark"
argument_list|,
name|ex
argument_list|)
block|;             }
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|UNMARK_ALL
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|NamedCompound
name|ce
operator|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmark all"
argument_list|)
argument_list|)
block|;
for|for
control|(
name|BibEntry
name|be
range|:
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|EntryMarker
operator|.
name|unmarkEntry
argument_list|(
name|be
argument_list|,
literal|false
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
argument_list|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
argument_list|;
name|markBaseChanged
argument_list|()
argument_list|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmarked all entries"
argument_list|)
argument_list|)
argument_list|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Note that we can't put the number of entries that have been reverted into the undoText as the concrete number cannot be injected
end_comment

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|SpecialFieldValue
name|prio
range|:
name|SpecialField
operator|.
name|PRIORITY
operator|.
name|getValues
argument_list|()
control|)
block|{
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|prio
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|PRIORITY
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|prio
argument_list|,
name|this
operator|.
name|frame
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_for
for|for
control|(
name|SpecialFieldValue
name|rank
range|:
name|SpecialField
operator|.
name|RANKING
operator|.
name|getValues
argument_list|()
control|)
block|{
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|rank
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|RANKING
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|rank
argument_list|,
name|this
operator|.
name|frame
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_for
for|for
control|(
name|SpecialFieldValue
name|status
range|:
name|SpecialField
operator|.
name|READ_STATUS
operator|.
name|getValues
argument_list|()
control|)
block|{
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|status
argument_list|)
operator|.
name|getActionName
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|READ_STATUS
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|status
argument_list|,
name|this
operator|.
name|frame
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|TOGGLE_PREVIEW
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|PreviewPreferences
name|previewPreferences
operator|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
block|;
name|boolean
name|enabled
operator|=
operator|!
name|previewPreferences
operator|.
name|isPreviewPanelEnabled
argument_list|()
block|;
name|PreviewPreferences
name|newPreviewPreferences
operator|=
name|previewPreferences
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewPanelEnabled
argument_list|(
name|enabled
argument_list|)
operator|.
name|build
argument_list|()
block|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|newPreviewPreferences
argument_list|)
block|;
name|setPreviewActiveBasePanels
argument_list|(
name|enabled
argument_list|)
block|;
name|frame
operator|.
name|setPreviewToggle
argument_list|(
name|enabled
argument_list|)
block|;         }
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|NEXT_PREVIEW_STYLE
argument_list|,
operator|(
name|BaseAction
operator|)
name|this
operator|::
name|nextPreviewStyle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PREVIOUS_PREVIEW_STYLE
argument_list|,
operator|(
name|BaseAction
operator|)
name|this
operator|::
name|previousPreviewStyle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MANAGE_SELECTORS
argument_list|,
call|(
name|BaseAction
call|)
argument_list|()
operator|->
block|{
name|ContentSelectorDialog
name|csd
operator|=
operator|new
name|ContentSelectorDialog
argument_list|(
name|frame
argument_list|,
name|frame
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
block|;
name|csd
operator|.
name|setLocationRelativeTo
argument_list|(
name|frame
argument_list|)
block|;
name|csd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
block|;         }
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|EXPORT_TO_CLIPBOARD
argument_list|,
operator|new
name|ExportToClipboardAction
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SEND_AS_EMAIL
argument_list|,
operator|new
name|SendAsEMailAction
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|WRITE_XMP
argument_list|,
operator|new
name|WriteXMPAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_ISO
argument_list|,
operator|new
name|AbbreviateAction
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_MEDLINE
argument_list|,
operator|new
name|AbbreviateAction
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|UNABBREVIATE
argument_list|,
operator|new
name|UnabbreviateAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|AUTO_SET_FILE
argument_list|,
operator|new
name|SynchronizeFileField
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|BACK
argument_list|,
operator|(
name|BaseAction
operator|)
name|BasePanel
operator|.
name|this
operator|::
name|back
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|FORWARD
argument_list|,
operator|(
name|BaseAction
operator|)
name|BasePanel
operator|.
name|this
operator|::
name|forward
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|RESOLVE_DUPLICATE_KEYS
argument_list|,
operator|new
name|SearchFixDuplicateLabels
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|ADD_TO_GROUP
argument_list|,
operator|new
name|GroupAddRemoveDialog
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|REMOVE_FROM_GROUP
argument_list|,
operator|new
name|GroupAddRemoveDialog
argument_list|(
name|this
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MOVE_TO_GROUP
argument_list|,
operator|new
name|GroupAddRemoveDialog
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|DOWNLOAD_FULL_TEXT
argument_list|,
operator|new
name|FindFullTextAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**      * Generates and copies citations based on the selected entries to the clipboard      *      * @param outputFormat the desired {@link CitationStyleOutputFormat}      */
end_comment

begin_function
DECL|method|copyCitationToClipboard (CitationStyleOutputFormat outputFormat)
unit|private
name|void
name|copyCitationToClipboard
parameter_list|(
name|CitationStyleOutputFormat
name|outputFormat
parameter_list|)
block|{
operator|new
name|CitationStyleToClipboardWorker
argument_list|(
name|this
argument_list|,
name|outputFormat
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|copy ()
specifier|private
name|void
name|copy
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The user maybe selected a single cell.
comment|// TODO: Check if this can actually happen
name|int
index|[]
name|rows
init|=
name|mainTable
operator|.
name|getSelectedRows
argument_list|()
decl_stmt|;
name|int
index|[]
name|cols
init|=
name|mainTable
operator|.
name|getSelectedColumns
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cols
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|rows
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
comment|// Copy single value.
name|Object
name|o
init|=
name|mainTable
operator|.
name|getValueAt
argument_list|(
name|rows
index|[
literal|0
index|]
argument_list|,
name|cols
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied cell contents"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|TransferableBibtexEntry
name|trbe
init|=
operator|new
name|TransferableBibtexEntry
argument_list|(
name|bes
argument_list|)
decl_stmt|;
comment|// ! look at ClipBoardManager
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|trbe
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied"
argument_list|)
argument_list|,
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|cut ()
specifier|private
name|void
name|cut
parameter_list|()
block|{
name|runCommand
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|)
expr_stmt|;
comment|// cannot call runCommand(Actions.DELETE), b/c it will call delete(false) with the wrong parameter
name|delete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Removes the selected entries from the database      *      * @param cut If false the user will get asked if he really wants to delete the entries, and it will be localized as      *            "deleted". If true the action will be localized as "cut"      */
end_comment

begin_function
DECL|method|delete (boolean cut)
specifier|private
name|void
name|delete
parameter_list|(
name|boolean
name|cut
parameter_list|)
block|{
name|delete
argument_list|(
name|cut
argument_list|,
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Removes the selected entries from the database      *      * @param cut If false the user will get asked if he really wants to delete the entries, and it will be localized as      *            "deleted". If true the action will be localized as "cut"      */
end_comment

begin_function
DECL|method|delete (boolean cut, List<BibEntry> entries)
specifier|private
name|void
name|delete
parameter_list|(
name|boolean
name|cut
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|cut
operator|&&
operator|!
name|showDeleteConfirmationDialog
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// select the next entry to stay at the same place as before (or the previous if we're already at the end)
if|if
condition|(
name|mainTable
operator|.
name|getSelectedRow
argument_list|()
operator|!=
operator|(
name|mainTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
name|selectNextEntry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|selectPreviousEntry
argument_list|()
expr_stmt|;
block|}
name|NamedCompound
name|compound
decl_stmt|;
if|if
condition|(
name|cut
condition|)
block|{
name|compound
operator|=
operator|new
name|NamedCompound
argument_list|(
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"cut entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"cut entry"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compound
operator|=
operator|new
name|NamedCompound
argument_list|(
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"delete entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"delete entry"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ensureNotShowingBottomPanel
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|cut
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cut"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deleted"
argument_list|)
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// prevent the main table from loosing focus
name|mainTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|delete (BibEntry entry)
specifier|public
name|void
name|delete
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|delete
argument_list|(
literal|false
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|paste ()
specifier|private
name|void
name|paste
parameter_list|()
block|{
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
operator|new
name|ClipBoardManager
argument_list|()
operator|.
name|extractBibEntriesFromClipboard
argument_list|()
decl_stmt|;
comment|// finally we paste in the entries (if any), which either came from TransferableBibtexEntries
comment|// or were parsed from a string
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"paste entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"paste entry"
argument_list|)
operator|)
argument_list|)
decl_stmt|;
comment|// Store the first inserted bibtexentry.
comment|// bes[0] does not work as bes[0] is first clonded,
comment|// then inserted.
comment|// This entry is used to open up an entry editor
comment|// for the first inserted entry.
name|BibEntry
name|firstBE
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BibEntry
name|be1
range|:
name|bes
control|)
block|{
name|BibEntry
name|be
init|=
operator|(
name|BibEntry
operator|)
name|be1
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstBE
operator|==
literal|null
condition|)
block|{
name|firstBE
operator|=
name|be
expr_stmt|;
block|}
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|be
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// We have to clone the
comment|// entries, since the pasted
comment|// entries must exist
comment|// independently of the copied
comment|// ones.
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|be
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Pasted"
argument_list|)
argument_list|,
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|highlightEntry
argument_list|(
name|firstBE
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_OPEN_FORM
argument_list|)
condition|)
block|{
name|selectionListener
operator|.
name|editSignalled
argument_list|(
name|firstBE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyTitle ()
specifier|private
name|void
name|copyTitle
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectedBibEntries
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selectedBibEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Collect all non-null titles.
name|List
argument_list|<
name|String
argument_list|>
name|titles
init|=
name|selectedBibEntries
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|bibEntry
lambda|->
name|bibEntry
operator|.
name|getTitle
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|bibEntry
lambda|->
name|bibEntry
operator|.
name|getTitle
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|titles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have titles."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|titles
argument_list|)
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|titles
operator|.
name|size
argument_list|()
operator|==
name|selectedBibEntries
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had titles.
name|output
argument_list|(
operator|(
name|selectedBibEntries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied titles"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied title"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined title."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|selectedBibEntries
operator|.
name|size
argument_list|()
operator|-
name|titles
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|selectedBibEntries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyCiteKey ()
specifier|private
name|void
name|copyCiteKey
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
name|be
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|keys
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|sb
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|String
name|citeCommand
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|CITE_COMMAND
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|cite
lambda|->
name|cite
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
comment|// must contain \
operator|.
name|orElse
argument_list|(
literal|"\\cite"
argument_list|)
decl_stmt|;
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|citeCommand
operator|+
literal|"{"
operator|+
name|sb
operator|+
literal|'}'
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|bes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had keys.
name|output
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied keys"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied key"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined BibTeX key."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|-
name|keys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyKey ()
specifier|private
name|void
name|copyKey
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
name|be
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|keys
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|keys
argument_list|)
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|bes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had keys.
name|output
argument_list|(
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied keys"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied key"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined BibTeX key."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|-
name|keys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyKeyAndTitle ()
specifier|private
name|void
name|copyKeyAndTitle
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// OK: in a future version, this string should be configurable to allow arbitrary exports
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
literal|"\\bibtexkey - \\begin{title}\\format[RemoveBrackets]{\\title}\\end{title}\n"
argument_list|)
decl_stmt|;
name|Layout
name|layout
decl_stmt|;
try|try
block|{
name|layout
operator|=
operator|new
name|LayoutHelper
argument_list|(
name|sr
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|)
operator|.
name|getLayoutFromText
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not get layout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|copied
init|=
literal|0
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
if|if
condition|(
name|be
operator|.
name|hasCiteKey
argument_list|()
condition|)
block|{
name|copied
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|layout
operator|.
name|doLayout
argument_list|(
name|be
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|copied
operator|==
literal|0
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|StringSelection
name|ss
init|=
operator|new
name|StringSelection
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getSystemClipboard
argument_list|()
operator|.
name|setContents
argument_list|(
name|ss
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|copied
operator|==
name|bes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had keys.
name|output
argument_list|(
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied keys"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied key"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined BibTeX key."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|-
name|copied
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|openExternalFile ()
specifier|private
name|void
name|openExternalFile
parameter_list|()
block|{
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectedEntries
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedEntries
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires exactly one item to be selected."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|BibEntry
name|entry
init|=
name|selectedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|hasField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
condition|)
block|{
comment|// no bibtex field
operator|new
name|SearchAndOpenFile
argument_list|(
name|entry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
operator|.
name|searchAndOpen
argument_list|()
expr_stmt|;
return|return;
block|}
name|FileListTableModel
name|fileListTableModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fileListTableModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileListTableModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// content in BibTeX field is not readable
operator|new
name|SearchAndOpenFile
argument_list|(
name|entry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
operator|.
name|searchAndOpen
argument_list|()
expr_stmt|;
return|return;
block|}
name|FileListEntry
name|flEntry
init|=
name|fileListTableModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExternalFileMenuItem
name|item
init|=
operator|new
name|ExternalFileMenuItem
argument_list|(
name|frame
argument_list|()
argument_list|,
name|entry
argument_list|,
literal|""
argument_list|,
name|flEntry
operator|.
name|getLink
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIcon
argument_list|()
argument_list|,
name|bibDatabaseContext
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|item
operator|.
name|doClick
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method is called from JabRefFrame if a database specific action is requested by the user. Runs the command      * if it is defined, or prints an error message to the standard error stream.      *      * @param _command The name of the command to run.      */
end_comment

begin_function
DECL|method|runCommand (final String _command)
specifier|public
name|void
name|runCommand
parameter_list|(
specifier|final
name|String
name|_command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|actions
operator|.
name|containsKey
argument_list|(
name|_command
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No action defined for '"
operator|+
name|_command
operator|+
literal|'\''
argument_list|)
expr_stmt|;
return|return;
block|}
name|Object
name|o
init|=
name|actions
operator|.
name|get
argument_list|(
name|_command
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|o
operator|instanceof
name|BaseAction
condition|)
block|{
operator|(
operator|(
name|BaseAction
operator|)
name|o
operator|)
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|runWorker
argument_list|(
operator|(
name|AbstractWorker
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// If the action has blocked the JabRefFrame before crashing, we need to unblock it.
comment|// The call to unblock will simply hide the glasspane, so there is no harm in calling
comment|// it even if the frame hasn't been blocked.
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
literal|"runCommand error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|saveDatabase (File file, boolean selectedOnly, Charset enc, SavePreferences.DatabaseSaveType saveType)
specifier|private
name|boolean
name|saveDatabase
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|selectedOnly
parameter_list|,
name|Charset
name|enc
parameter_list|,
name|SavePreferences
operator|.
name|DatabaseSaveType
name|saveType
parameter_list|)
throws|throws
name|SaveException
block|{
name|SaveSession
name|session
decl_stmt|;
name|frame
operator|.
name|block
argument_list|()
expr_stmt|;
specifier|final
name|String
name|SAVE_DATABASE
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save library"
argument_list|)
decl_stmt|;
try|try
block|{
name|SavePreferences
name|prefs
init|=
name|SavePreferences
operator|.
name|loadForSaveFromPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
operator|.
name|withEncoding
argument_list|(
name|enc
argument_list|)
operator|.
name|withSaveType
argument_list|(
name|saveType
argument_list|)
decl_stmt|;
name|BibtexDatabaseWriter
argument_list|<
name|SaveSession
argument_list|>
name|databaseWriter
init|=
operator|new
name|BibtexDatabaseWriter
argument_list|<>
argument_list|(
name|FileSaveSession
operator|::
operator|new
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedOnly
condition|)
block|{
name|session
operator|=
name|databaseWriter
operator|.
name|savePartOfDatabase
argument_list|(
name|bibDatabaseContext
argument_list|,
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
name|databaseWriter
operator|.
name|saveDatabase
argument_list|(
name|bibDatabaseContext
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
name|registerUndoableChanges
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: not sure if this is really thrown anywhere
catch|catch
parameter_list|(
name|UnsupportedCharsetException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not save file."
argument_list|)
operator|+
literal|' '
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Character encoding '%0' is not supported."
argument_list|,
name|enc
operator|.
name|displayName
argument_list|()
argument_list|)
argument_list|,
name|SAVE_DATABASE
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SaveException
argument_list|(
literal|"rt"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SaveException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|specificEntry
argument_list|()
condition|)
block|{
comment|// Error occurred during processing of the entry. Highlight it:
name|highlightEntry
argument_list|(
name|ex
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
name|showAndEdit
argument_list|(
name|ex
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not save"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not save file."
argument_list|)
operator|+
literal|"\n"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|SAVE_DATABASE
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SaveException
argument_list|(
literal|"rt"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|frame
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
name|boolean
name|commit
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|couldEncodeAll
argument_list|()
condition|)
block|{
name|FormBuilder
name|builder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
operator|.
name|layout
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"left:pref, 4dlu, fill:pref"
argument_list|,
literal|"pref, 4dlu, pref"
argument_list|)
argument_list|)
decl_stmt|;
name|JTextArea
name|ta
init|=
operator|new
name|JTextArea
argument_list|(
name|session
operator|.
name|getWriter
argument_list|()
operator|.
name|getProblemCharacters
argument_list|()
argument_list|)
decl_stmt|;
name|ta
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The chosen encoding '%0' could not encode the following characters:"
argument_list|,
name|session
operator|.
name|getEncoding
argument_list|()
operator|.
name|displayName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|ta
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"What do you want to do?"
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|tryDiff
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Try different encoding"
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|frame
argument_list|,
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|SAVE_DATABASE
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save"
argument_list|)
block|,
name|tryDiff
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
block|}
argument_list|,
name|tryDiff
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
comment|// The user wants to use another encoding.
name|Object
name|choice
init|=
name|JOptionPane
operator|.
name|showInputDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select encoding"
argument_list|)
argument_list|,
name|SAVE_DATABASE
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|,
literal|null
argument_list|,
name|Encodings
operator|.
name|ENCODINGS_DISPLAYNAMES
argument_list|,
name|enc
argument_list|)
decl_stmt|;
if|if
condition|(
name|choice
operator|==
literal|null
condition|)
block|{
name|commit
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Charset
name|newEncoding
init|=
name|Charset
operator|.
name|forName
argument_list|(
operator|(
name|String
operator|)
name|choice
argument_list|)
decl_stmt|;
return|return
name|saveDatabase
argument_list|(
name|file
argument_list|,
name|selectedOnly
argument_list|,
name|newEncoding
argument_list|,
name|saveType
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
condition|)
block|{
name|commit
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commit
condition|)
block|{
name|session
operator|.
name|commit
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|setEncoding
argument_list|(
name|enc
argument_list|)
expr_stmt|;
comment|// Make sure to remember which encoding we used.
block|}
else|else
block|{
name|session
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
return|return
name|commit
return|;
block|}
end_function

begin_function
DECL|method|registerUndoableChanges (SaveSession session)
specifier|public
name|void
name|registerUndoableChanges
parameter_list|(
name|SaveSession
name|session
parameter_list|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save actions"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldChange
name|change
range|:
name|session
operator|.
name|getFieldChanges
argument_list|()
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * This method is called from JabRefFrame when the user wants to create a new entry. If the argument is null, the      * user is prompted for an entry type.      *      * @param type The type of the entry to create.      * @return The newly created BibEntry or null the operation was canceled by the user.      */
end_comment

begin_function
DECL|method|newEntry (EntryType type)
specifier|public
name|BibEntry
name|newEntry
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
name|EntryType
name|actualType
init|=
name|type
decl_stmt|;
if|if
condition|(
name|actualType
operator|==
literal|null
condition|)
block|{
comment|// Find out what type is wanted.
specifier|final
name|EntryTypeDialog
name|etd
init|=
operator|new
name|EntryTypeDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
comment|// We want to center the dialog, to make it look nicer.
name|etd
operator|.
name|setLocationRelativeTo
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|etd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actualType
operator|=
name|etd
operator|.
name|getChoice
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|actualType
operator|!=
literal|null
condition|)
block|{
comment|// Only if the dialog was not canceled.
specifier|final
name|BibEntry
name|be
init|=
operator|new
name|BibEntry
argument_list|(
name|actualType
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
comment|// Set owner/timestamp if options are enabled:
name|List
argument_list|<
name|BibEntry
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|list
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create an UndoableInsertEntry object.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|be
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Added new '%0' entry."
argument_list|,
name|actualType
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We are going to select the new entry. Before that, make sure that we are in
comment|// show-entry mode. If we aren't already in that mode, enter the WILL_SHOW_EDITOR
comment|// mode which makes sure the selection will trigger display of the entry editor
comment|// and adjustment of the splitter.
if|if
condition|(
name|mode
operator|!=
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|mode
operator|=
name|BasePanelMode
operator|.
name|WILL_SHOW_EDITOR
expr_stmt|;
block|}
name|highlightEntry
argument_list|(
name|be
argument_list|)
expr_stmt|;
comment|// The database just changed.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|this
operator|.
name|showAndEdit
argument_list|(
name|be
argument_list|)
expr_stmt|;
return|return
name|be
return|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**      * This method is called from JabRefFrame when the user wants to create a new entry.      *      * @param bibEntry The new entry.      */
end_comment

begin_function
DECL|method|insertEntry (final BibEntry bibEntry)
specifier|public
name|void
name|insertEntry
parameter_list|(
specifier|final
name|BibEntry
name|bibEntry
parameter_list|)
block|{
if|if
condition|(
name|bibEntry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_OWNER
argument_list|)
condition|)
block|{
comment|// Set owner field to default value
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|bibEntry
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create an UndoableInsertEntry object.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Added new '%0' entry."
argument_list|,
name|bibEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|// The database just changed.
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_OPEN_FORM
argument_list|)
condition|)
block|{
name|selectionListener
operator|.
name|editSignalled
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
name|highlightEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Collision for bibtex key"
operator|+
name|bibEntry
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|editEntryByIdAndFocusField (final String entryId, final String fieldName)
specifier|public
name|void
name|editEntryByIdAndFocusField
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryById
argument_list|(
name|entryId
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|entry
lambda|->
block|{
name|mainTable
operator|.
name|setSelected
argument_list|(
name|mainTable
operator|.
name|findEntry
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|selectionListener
operator|.
name|editSignalled
argument_list|()
expr_stmt|;
name|showAndEdit
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|setFocusToField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|updateTableFont ()
specifier|public
name|void
name|updateTableFont
parameter_list|()
block|{
name|mainTable
operator|.
name|updateFont
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createMainTable ()
specifier|private
name|void
name|createMainTable
parameter_list|()
block|{
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|tableModel
operator|.
name|getListSynchronizer
argument_list|()
argument_list|)
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|SpecialFieldDatabaseChangeListener
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|tableFormat
operator|=
operator|new
name|MainTableFormat
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|tableFormat
operator|.
name|updateTableFormat
argument_list|()
expr_stmt|;
name|mainTable
operator|=
operator|new
name|MainTable
argument_list|(
name|tableFormat
argument_list|,
name|tableModel
argument_list|,
name|frame
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|selectionListener
operator|=
operator|new
name|MainTableSelectionListener
argument_list|(
name|this
argument_list|,
name|mainTable
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|updateFont
argument_list|()
expr_stmt|;
name|mainTable
operator|.
name|addSelectionListener
argument_list|(
name|selectionListener
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|addMouseListener
argument_list|(
name|selectionListener
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|addKeyListener
argument_list|(
name|selectionListener
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|addFocusListener
argument_list|(
name|selectionListener
argument_list|)
expr_stmt|;
comment|// Add the listener that binds selection to state manager (TODO: should be replaced by proper JavaFX binding as soon as table is implemented in JavaFX)
name|mainTable
operator|.
name|addSelectionListener
argument_list|(
name|listEvent
lambda|->
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
name|Globals
operator|.
name|stateManager
operator|.
name|setSelectedEntries
argument_list|(
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|clearSearch
init|=
literal|"clearSearch"
decl_stmt|;
name|mainTable
operator|.
name|getInputMap
argument_list|()
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLEAR_SEARCH
argument_list|)
argument_list|,
name|clearSearch
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
name|clearSearch
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// need to close these here, b/c this action overshadows the responsible actions when the main table is selected
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|SHOWING_NOTHING
case|:
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|endSearch
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHOWING_PREVIEW
case|:
name|getPreviewPanel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
name|SHOWING_EDITOR
case|:
case|case
name|WILL_SHOW_EDITOR
case|:
name|entryEditorClosing
argument_list|(
name|getEntryEditor
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"unknown BasePanelMode: '"
operator|+
name|mode
operator|+
literal|"', doing nothing"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|CUT
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|runCommand
argument_list|(
name|Actions
operator|.
name|CUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not cut"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|runCommand
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not copy"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PASTE
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|runCommand
argument_list|(
name|Actions
operator|.
name|PASTE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not paste"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|addKeyListener
argument_list|(
operator|new
name|KeyAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|keyPressed
parameter_list|(
name|KeyEvent
name|e
parameter_list|)
block|{
specifier|final
name|int
name|keyCode
init|=
name|e
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isControlDown
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|keyCode
condition|)
block|{
case|case
name|KeyEvent
operator|.
name|VK_PAGE_DOWN
case|:
name|frame
operator|.
name|nextTab
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyEvent
operator|.
name|VK_PAGE_UP
case|:
name|frame
operator|.
name|prevTab
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|keyCode
operator|==
name|KeyEvent
operator|.
name|VK_ENTER
condition|)
block|{
name|e
operator|.
name|consume
argument_list|()
expr_stmt|;
try|try
block|{
name|runCommand
argument_list|(
name|Actions
operator|.
name|EDIT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not run action based on key press"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setupMainPanel ()
specifier|public
name|void
name|setupMainPanel
parameter_list|()
block|{
name|splitPane
operator|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|setDividerSize
argument_list|(
name|SPLIT_PANE_DIVIDER_SIZE
argument_list|)
expr_stmt|;
name|adjustSplitter
argument_list|()
expr_stmt|;
comment|// restore last splitting state (before mainTable is created as creation affects the stored size of the entryEditors)
comment|// check whether a mainTable already existed and a floatSearch was active
name|boolean
name|floatSearchActive
init|=
operator|(
name|mainTable
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|this
operator|.
name|tableModel
operator|.
name|getSearchState
argument_list|()
operator|==
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|FLOAT
operator|)
decl_stmt|;
name|createMainTable
argument_list|()
expr_stmt|;
name|splitPane
operator|.
name|setTopComponent
argument_list|(
name|mainTable
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove borders
name|splitPane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|()
argument_list|)
expr_stmt|;
comment|// If an entry is currently being shown, make sure it stays shown,
comment|// otherwise set the bottom component to null.
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
condition|)
block|{
name|mode
operator|=
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
expr_stmt|;
name|highlightEntry
argument_list|(
name|selectionListener
operator|.
name|getPreview
argument_list|()
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|mode
operator|=
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
expr_stmt|;
block|}
else|else
block|{
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|removeAll
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|splitPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|// Set up name autocompleter for search:
name|instantiateSearchAutoCompleter
argument_list|()
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|SearchAutoCompleteListener
argument_list|()
argument_list|)
expr_stmt|;
name|setupAutoCompletion
argument_list|()
expr_stmt|;
comment|// restore floating search result
comment|// (needed if preferences have been changed which causes a recreation of the main table)
if|if
condition|(
name|floatSearchActive
condition|)
block|{
name|mainTable
operator|.
name|showFloatSearch
argument_list|()
expr_stmt|;
block|}
name|splitPane
operator|.
name|revalidate
argument_list|()
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
comment|// saves the divider position as soon as it changes
name|splitPane
operator|.
name|addPropertyChangeListener
argument_list|(
name|JSplitPane
operator|.
name|DIVIDER_LOCATION_PROPERTY
argument_list|,
name|event
lambda|->
name|saveDividerLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Set up auto completion for this database      */
end_comment

begin_function
DECL|method|setupAutoCompletion ()
specifier|private
name|void
name|setupAutoCompletion
parameter_list|()
block|{
name|AutoCompletePreferences
name|autoCompletePreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getAutoCompletePreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|autoCompletePreferences
operator|.
name|shouldAutoComplete
argument_list|()
condition|)
block|{
name|suggestionProviders
operator|=
operator|new
name|SuggestionProviders
argument_list|(
name|autoCompletePreferences
argument_list|,
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
expr_stmt|;
name|suggestionProviders
operator|.
name|indexDatabase
argument_list|(
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the suggestion providers are in sync with entries
name|CoarseChangeFilter
name|changeFilter
init|=
operator|new
name|CoarseChangeFilter
argument_list|(
name|bibDatabaseContext
argument_list|)
decl_stmt|;
name|changeFilter
operator|.
name|registerListener
argument_list|(
operator|new
name|AutoCompleteUpdater
argument_list|(
name|suggestionProviders
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create empty suggestion providers if auto completion is deactivated
name|suggestionProviders
operator|=
operator|new
name|SuggestionProviders
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|updateSearchManager ()
specifier|public
name|void
name|updateSearchManager
parameter_list|()
block|{
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|setAutoCompleter
argument_list|(
name|searchAutoCompleter
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|instantiateSearchAutoCompleter ()
specifier|private
name|void
name|instantiateSearchAutoCompleter
parameter_list|()
block|{
name|searchAutoCompleter
operator|=
operator|new
name|PersonNameSuggestionProvider
argument_list|(
name|InternalBibtexFields
operator|.
name|getPersonNameFields
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|searchAutoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|updatePreamble ()
specifier|public
name|void
name|updatePreamble
parameter_list|()
block|{
if|if
condition|(
name|preambleEditor
operator|!=
literal|null
condition|)
block|{
name|preambleEditor
operator|.
name|updatePreamble
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|assureStringDialogNotEditing ()
specifier|public
name|void
name|assureStringDialogNotEditing
parameter_list|()
block|{
if|if
condition|(
name|stringDialog
operator|!=
literal|null
condition|)
block|{
name|stringDialog
operator|.
name|assureNotEditing
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|updateStringDialog ()
specifier|public
name|void
name|updateStringDialog
parameter_list|()
block|{
if|if
condition|(
name|stringDialog
operator|!=
literal|null
condition|)
block|{
name|stringDialog
operator|.
name|refreshTable
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|adjustSplitter ()
specifier|public
name|void
name|adjustSplitter
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
condition|)
block|{
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewPanelHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|splitPane
operator|.
name|setDividerLocation
argument_list|(
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|ENTRY_EDITOR_HEIGHT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getEntryEditor ()
specifier|public
name|EntryEditor
name|getEntryEditor
parameter_list|()
block|{
return|return
name|entryEditor
return|;
block|}
end_function

begin_comment
comment|/**      * Sets the entry editor as the bottom component in the split pane. If an entry editor already was shown,      * makes sure that the divider doesn't move. Updates the mode to SHOWING_EDITOR.      * Then shows the given entry.      *      * @param entry The entry to edit.      */
end_comment

begin_function
DECL|method|showAndEdit (BibEntry entry)
specifier|public
name|void
name|showAndEdit
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|ENTRY_EDITOR_HEIGHT
argument_list|,
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mode
operator|=
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
expr_stmt|;
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|entryEditorContainer
argument_list|)
expr_stmt|;
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|entry
operator|!=
name|getShowing
argument_list|()
condition|)
block|{
name|entryEditor
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|newEntryShowing
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|entryEditor
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Sets the given preview panel as the bottom component in the split panel. Updates the mode to SHOWING_PREVIEW.      *      * @param entry The entry to show in the preview.      */
end_comment

begin_function
DECL|method|showPreview (BibEntry entry)
specifier|public
name|void
name|showPreview
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|mode
operator|=
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
expr_stmt|;
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
name|previewContainer
argument_list|)
expr_stmt|;
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|showPreview ()
specifier|private
name|void
name|showPreview
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mainTable
operator|.
name|getSelected
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|showPreview
argument_list|(
name|mainTable
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|nextPreviewStyle ()
specifier|public
name|void
name|nextPreviewStyle
parameter_list|()
block|{
name|cyclePreview
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewCyclePosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|previousPreviewStyle ()
specifier|public
name|void
name|previousPreviewStyle
parameter_list|()
block|{
name|cyclePreview
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewCyclePosition
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|cyclePreview (int newPosition)
specifier|private
name|void
name|cyclePreview
parameter_list|(
name|int
name|newPosition
parameter_list|)
block|{
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewCyclePosition
argument_list|(
name|newPosition
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
name|preview
operator|.
name|updateLayout
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Removes the bottom component.      */
end_comment

begin_function
DECL|method|hideBottomComponent ()
specifier|public
name|void
name|hideBottomComponent
parameter_list|()
block|{
name|mode
operator|=
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
expr_stmt|;
name|splitPane
operator|.
name|setBottomComponent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method selects the given entry, and scrolls it into view in the table. If an entryEditor is shown, it is      * given focus afterwards.      */
end_comment

begin_function
DECL|method|highlightEntry (final BibEntry bibEntry)
specifier|public
name|void
name|highlightEntry
parameter_list|(
specifier|final
name|BibEntry
name|bibEntry
parameter_list|)
block|{
name|highlightEntry
argument_list|(
name|mainTable
operator|.
name|findEntry
argument_list|(
name|bibEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method selects the entry on the given position, and scrolls it into view in the table.      * If an entryEditor is shown, it is given focus afterwards.      */
end_comment

begin_function
DECL|method|highlightEntry (int pos)
specifier|public
name|void
name|highlightEntry
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
operator|(
name|pos
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|pos
operator|<
name|mainTable
operator|.
name|getRowCount
argument_list|()
operator|)
condition|)
block|{
name|mainTable
operator|.
name|setRowSelectionInterval
argument_list|(
name|pos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|ensureVisible
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|selectPreviousEntry ()
specifier|public
name|void
name|selectPreviousEntry
parameter_list|()
block|{
name|highlightEntry
argument_list|(
operator|(
operator|(
name|mainTable
operator|.
name|getSelectedRow
argument_list|()
operator|-
literal|1
operator|)
operator|+
name|mainTable
operator|.
name|getRowCount
argument_list|()
operator|)
operator|%
name|mainTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|selectNextEntry ()
specifier|public
name|void
name|selectNextEntry
parameter_list|()
block|{
name|highlightEntry
argument_list|(
operator|(
name|mainTable
operator|.
name|getSelectedRow
argument_list|()
operator|+
literal|1
operator|)
operator|%
name|mainTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|selectFirstEntry ()
specifier|public
name|void
name|selectFirstEntry
parameter_list|()
block|{
name|highlightEntry
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|selectLastEntry ()
specifier|public
name|void
name|selectLastEntry
parameter_list|()
block|{
name|highlightEntry
argument_list|(
name|mainTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method is called from an EntryEditor when it should be closed. We relay to the selection listener, which      * takes care of the rest.      *      * @param editor The entry editor to close.      */
end_comment

begin_function
DECL|method|entryEditorClosing (EntryEditor editor)
specifier|public
name|void
name|entryEditorClosing
parameter_list|(
name|EntryEditor
name|editor
parameter_list|)
block|{
comment|// Store divider location for next time:
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|ENTRY_EDITOR_HEIGHT
argument_list|,
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
argument_list|)
expr_stmt|;
name|selectionListener
operator|.
name|entryEditorClosing
argument_list|(
name|editor
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Closes the entry editor or preview panel if it is showing the given entry.      */
end_comment

begin_function
DECL|method|ensureNotShowingBottomPanel (BibEntry entry)
specifier|public
name|void
name|ensureNotShowingBottomPanel
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
operator|)
operator|&&
operator|(
name|entryEditor
operator|.
name|getEntry
argument_list|()
operator|==
name|entry
operator|)
operator|)
operator|||
operator|(
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
operator|)
operator|&&
operator|(
name|selectionListener
operator|.
name|getPreview
argument_list|()
operator|.
name|getEntry
argument_list|()
operator|==
name|entry
operator|)
operator|)
condition|)
block|{
name|hideBottomComponent
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|updateEntryEditorIfShowing ()
specifier|public
name|void
name|updateEntryEditorIfShowing
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|BibEntry
name|currentEntry
init|=
name|entryEditor
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|showAndEdit
argument_list|(
name|currentEntry
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|markBaseChanged ()
specifier|public
name|void
name|markBaseChanged
parameter_list|()
block|{
name|baseChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|markBasedChangedInternal
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|SwingUtilities
operator|.
name|invokeAndWait
argument_list|(
parameter_list|()
lambda|->
name|markBasedChangedInternal
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Problem marking database as changed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|markBasedChangedInternal ()
specifier|private
name|void
name|markBasedChangedInternal
parameter_list|()
block|{
comment|// Put an asterisk behind the filename to indicate the database has changed.
name|frame
operator|.
name|setWindowTitle
argument_list|()
expr_stmt|;
name|frame
operator|.
name|updateAllTabTitles
argument_list|()
expr_stmt|;
comment|// If the status line states that the base has been saved, we
comment|// remove this message, since it is no longer relevant. If a
comment|// different message is shown, we leave it.
if|if
condition|(
name|frame
operator|.
name|getStatusLineText
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Saved library"
argument_list|)
argument_list|)
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|markNonUndoableBaseChanged ()
specifier|public
name|void
name|markNonUndoableBaseChanged
parameter_list|()
block|{
name|nonUndoableChange
operator|=
literal|true
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|markChangedOrUnChanged ()
specifier|private
specifier|synchronized
name|void
name|markChangedOrUnChanged
parameter_list|()
block|{
if|if
condition|(
name|getUndoManager
argument_list|()
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|baseChanged
condition|)
block|{
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|baseChanged
operator|&&
operator|!
name|nonUndoableChange
condition|)
block|{
name|baseChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|frame
operator|.
name|setTabTitle
argument_list|(
name|this
argument_list|,
name|getTabTitle
argument_list|()
argument_list|,
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|setTabTitle
argument_list|(
name|this
argument_list|,
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|frame
operator|.
name|setWindowTitle
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getDatabase ()
specifier|public
name|BibDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|preambleEditorClosing ()
specifier|public
name|void
name|preambleEditorClosing
parameter_list|()
block|{
name|preambleEditor
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
DECL|method|stringsClosing ()
specifier|public
name|void
name|stringsClosing
parameter_list|()
block|{
name|stringDialog
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
DECL|method|changeTypeOfSelectedEntries (String newType)
specifier|public
name|void
name|changeTypeOfSelectedEntries
parameter_list|(
name|String
name|newType
parameter_list|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
name|changeType
argument_list|(
name|bes
argument_list|,
name|newType
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|changeType (List<BibEntry> entries, String newType)
specifier|private
name|void
name|changeType
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|String
name|newType
parameter_list|)
block|{
if|if
condition|(
operator|(
name|entries
operator|==
literal|null
operator|)
operator|||
operator|(
name|entries
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"At least one entry must be selected to be able to change the type."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|choice
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|this
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Multiple entries selected. Do you want to change the type of all these to '%0'?"
argument_list|,
name|newType
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Change entry type"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|choice
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
return|return;
block|}
block|}
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Change entry type"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableChangeType
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|newType
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
name|entry
operator|.
name|setType
argument_list|(
name|newType
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Changed type to '%0' for"
argument_list|,
name|newType
argument_list|)
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|showDeleteConfirmationDialog (int numberOfEntries)
specifier|public
name|boolean
name|showDeleteConfirmationDialog
parameter_list|(
name|int
name|numberOfEntries
parameter_list|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CONFIRM_DELETE
argument_list|)
condition|)
block|{
name|String
name|msg
decl_stmt|;
name|msg
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Really delete the selected entry?"
argument_list|)
expr_stmt|;
name|String
name|title
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberOfEntries
operator|>
literal|1
condition|)
block|{
name|msg
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Really delete the %0 selected entries?"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numberOfEntries
argument_list|)
argument_list|)
expr_stmt|;
name|title
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete multiple entries"
argument_list|)
expr_stmt|;
block|}
name|CheckBoxMessage
name|cb
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|msg
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cb
argument_list|,
name|title
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cb
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CONFIRM_DELETE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * If the relevant option is set, autogenerate keys for all entries that are lacking keys.      */
end_comment

begin_function
DECL|method|autoGenerateKeysBeforeSaving ()
specifier|public
name|void
name|autoGenerateKeysBeforeSaving
parameter_list|()
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|)
condition|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autogenerate BibTeX keys"
argument_list|)
argument_list|)
decl_stmt|;
name|BibtexKeyGenerator
name|keyGenerator
init|=
operator|new
name|BibtexKeyGenerator
argument_list|(
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|bes
range|:
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|oldKey
init|=
name|bes
operator|.
name|getCiteKeyOptional
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|oldKey
argument_list|)
condition|)
block|{
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|keyGenerator
operator|.
name|generateAndSetKey
argument_list|(
name|bes
argument_list|)
decl_stmt|;
name|change
operator|.
name|ifPresent
argument_list|(
name|fieldChange
lambda|->
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|fieldChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Store undo information, if any:
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Depending on whether a preview or an entry editor is showing, save the current divider location in the correct      * preference setting.      */
end_comment

begin_function
DECL|method|saveDividerLocation ()
specifier|public
name|void
name|saveDividerLocation
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
condition|)
block|{
name|int
name|previewPanelHeight
init|=
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
decl_stmt|;
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewPanelHeight
argument_list|(
name|previewPanelHeight
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|ENTRY_EDITOR_HEIGHT
argument_list|,
name|splitPane
operator|.
name|getHeight
argument_list|()
operator|-
name|splitPane
operator|.
name|getDividerLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Method pertaining to the ClipboardOwner interface.
end_comment

begin_function
annotation|@
name|Override
DECL|method|lostOwnership (Clipboard clipboard, Transferable contents)
specifier|public
name|void
name|lostOwnership
parameter_list|(
name|Clipboard
name|clipboard
parameter_list|,
name|Transferable
name|contents
parameter_list|)
block|{
comment|// Nothing
block|}
end_function

begin_comment
comment|/**      * Perform necessary cleanup when this BasePanel is closed.      */
end_comment

begin_function
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|unregister
argument_list|)
expr_stmt|;
comment|// Check if there is a FileUpdatePanel for this BasePanel being shown. If so,
comment|// remove it:
if|if
condition|(
name|sidePaneManager
operator|.
name|hasComponent
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
condition|)
block|{
name|FileUpdatePanel
name|fup
init|=
operator|(
name|FileUpdatePanel
operator|)
name|sidePaneManager
operator|.
name|getComponent
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fup
operator|.
name|getPanel
argument_list|()
operator|==
name|this
condition|)
block|{
name|sidePaneManager
operator|.
name|hideComponent
argument_list|(
name|FileUpdatePanel
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Get an array containing the currently selected entries. The array is stable and not changed if the selection      * changes      *      * @return A list containing the selected entries. Is never null.      */
end_comment

begin_function
DECL|method|getSelectedEntries ()
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSelectedEntries
parameter_list|()
block|{
return|return
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getBibDatabaseContext ()
specifier|public
name|BibDatabaseContext
name|getBibDatabaseContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bibDatabaseContext
return|;
block|}
end_function

begin_function
DECL|method|isUpdatedExternally ()
specifier|public
name|boolean
name|isUpdatedExternally
parameter_list|()
block|{
return|return
name|changeMonitor
operator|.
name|map
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|hasBeenModifiedExternally
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|markExternalChangesAsResolved ()
specifier|public
name|void
name|markExternalChangesAsResolved
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|markExternalChangesAsResolved
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getSidePaneManager ()
specifier|public
name|SidePaneManager
name|getSidePaneManager
parameter_list|()
block|{
return|return
name|sidePaneManager
return|;
block|}
end_function

begin_function
DECL|method|setNonUndoableChange (boolean nonUndoableChange)
specifier|public
name|void
name|setNonUndoableChange
parameter_list|(
name|boolean
name|nonUndoableChange
parameter_list|)
block|{
name|this
operator|.
name|nonUndoableChange
operator|=
name|nonUndoableChange
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setBaseChanged (boolean baseChanged)
specifier|public
name|void
name|setBaseChanged
parameter_list|(
name|boolean
name|baseChanged
parameter_list|)
block|{
name|this
operator|.
name|baseChanged
operator|=
name|baseChanged
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isSaving ()
specifier|public
name|boolean
name|isSaving
parameter_list|()
block|{
return|return
name|saving
return|;
block|}
end_function

begin_function
DECL|method|setSaving (boolean saving)
specifier|public
name|void
name|setSaving
parameter_list|(
name|boolean
name|saving
parameter_list|)
block|{
name|this
operator|.
name|saving
operator|=
name|saving
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getShowing ()
specifier|private
name|BibEntry
name|getShowing
parameter_list|()
block|{
return|return
name|showing
return|;
block|}
end_function

begin_comment
comment|/**      * Update the pointer to the currently shown entry in all cases where the user has moved to a new entry, except when      * using Back and Forward commands. Also updates history for Back command, and clears history for Forward command.      *      * @param entry The entry that is now to be shown.      */
end_comment

begin_function
DECL|method|newEntryShowing (BibEntry entry)
specifier|private
name|void
name|newEntryShowing
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
comment|// If this call is the result of a Back or Forward operation, we must take
comment|// care not to make any history changes, since the necessary changes will
comment|// already have been done in the back() or forward() method:
if|if
condition|(
name|backOrForwardInProgress
condition|)
block|{
name|showing
operator|=
name|entry
expr_stmt|;
name|backOrForwardInProgress
operator|=
literal|false
expr_stmt|;
name|setBackAndForwardEnabledState
argument_list|()
expr_stmt|;
return|return;
block|}
name|nextEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|entry
argument_list|,
name|showing
argument_list|)
condition|)
block|{
comment|// Add the entry we are leaving to the history:
if|if
condition|(
name|showing
operator|!=
literal|null
condition|)
block|{
name|previousEntries
operator|.
name|add
argument_list|(
name|showing
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousEntries
operator|.
name|size
argument_list|()
operator|>
name|GUIGlobals
operator|.
name|MAX_BACK_HISTORY_SIZE
condition|)
block|{
name|previousEntries
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|showing
operator|=
name|entry
expr_stmt|;
name|setBackAndForwardEnabledState
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Go back (if there is any recorded history) and update the histories for the Back and Forward commands.      */
end_comment

begin_function
DECL|method|back ()
specifier|private
name|void
name|back
parameter_list|()
block|{
if|if
condition|(
operator|!
name|previousEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BibEntry
name|toShow
init|=
name|previousEntries
operator|.
name|get
argument_list|(
name|previousEntries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|previousEntries
operator|.
name|remove
argument_list|(
name|previousEntries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Add the entry we are going back from to the Forward history:
if|if
condition|(
name|showing
operator|!=
literal|null
condition|)
block|{
name|nextEntries
operator|.
name|add
argument_list|(
name|showing
argument_list|)
expr_stmt|;
block|}
name|backOrForwardInProgress
operator|=
literal|true
expr_stmt|;
comment|// to avoid the history getting updated erroneously
name|highlightEntry
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|forward ()
specifier|private
name|void
name|forward
parameter_list|()
block|{
if|if
condition|(
operator|!
name|nextEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BibEntry
name|toShow
init|=
name|nextEntries
operator|.
name|get
argument_list|(
name|nextEntries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|nextEntries
operator|.
name|remove
argument_list|(
name|nextEntries
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Add the entry we are going forward from to the Back history:
if|if
condition|(
name|showing
operator|!=
literal|null
condition|)
block|{
name|previousEntries
operator|.
name|add
argument_list|(
name|showing
argument_list|)
expr_stmt|;
block|}
name|backOrForwardInProgress
operator|=
literal|true
expr_stmt|;
comment|// to avoid the history getting updated erroneously
name|highlightEntry
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setBackAndForwardEnabledState ()
specifier|public
name|void
name|setBackAndForwardEnabledState
parameter_list|()
block|{
name|frame
operator|.
name|getBackAction
argument_list|()
operator|.
name|setEnabled
argument_list|(
operator|!
name|previousEntries
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getForwardAction
argument_list|()
operator|.
name|setEnabled
argument_list|(
operator|!
name|nextEntries
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|formatOutputMessage (String start, int count)
specifier|private
name|String
name|formatOutputMessage
parameter_list|(
name|String
name|start
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %d %s."
argument_list|,
name|start
argument_list|,
name|count
argument_list|,
operator|(
name|count
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Set the preview active state for all BasePanel instances.      */
end_comment

begin_function
DECL|method|setPreviewActiveBasePanels (boolean enabled)
specifier|private
name|void
name|setPreviewActiveBasePanels
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|frame
operator|.
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|setPreviewActive
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setPreviewActive (boolean enabled)
specifier|private
name|void
name|setPreviewActive
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|showPreview
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|preview
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getUndoManager ()
specifier|public
name|CountingUndoManager
name|getUndoManager
parameter_list|()
block|{
return|return
name|undoManager
return|;
block|}
end_function

begin_function
DECL|method|getMainTable ()
specifier|public
name|MainTable
name|getMainTable
parameter_list|()
block|{
return|return
name|mainTable
return|;
block|}
end_function

begin_function
DECL|method|getDatabaseContext ()
specifier|public
name|BibDatabaseContext
name|getDatabaseContext
parameter_list|()
block|{
return|return
name|bibDatabaseContext
return|;
block|}
end_function

begin_function
DECL|method|getCurrentSearchQuery ()
specifier|public
name|Optional
argument_list|<
name|SearchQuery
argument_list|>
name|getCurrentSearchQuery
parameter_list|()
block|{
return|return
name|currentSearchQuery
return|;
block|}
end_function

begin_comment
comment|/**      * Set the query the user currently searches while this basepanel is active      *      * @param currentSearchQuery can be null      */
end_comment

begin_function
DECL|method|setCurrentSearchQuery (SearchQuery currentSearchQuery)
specifier|public
name|void
name|setCurrentSearchQuery
parameter_list|(
name|SearchQuery
name|currentSearchQuery
parameter_list|)
block|{
name|this
operator|.
name|currentSearchQuery
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|currentSearchQuery
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getCitationStyleCache ()
specifier|public
name|CitationStyleCache
name|getCitationStyleCache
parameter_list|()
block|{
return|return
name|citationStyleCache
return|;
block|}
end_function

begin_function
DECL|method|getPreviewPanel ()
specifier|public
name|PreviewPanel
name|getPreviewPanel
parameter_list|()
block|{
return|return
name|preview
return|;
block|}
end_function

begin_function
DECL|method|getAnnotationCache ()
specifier|public
name|FileAnnotationCache
name|getAnnotationCache
parameter_list|()
block|{
return|return
name|annotationCache
return|;
block|}
end_function

begin_function
DECL|method|resetChangeMonitor ()
specifier|public
name|void
name|resetChangeMonitor
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|unregister
argument_list|)
expr_stmt|;
name|changeMonitor
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|DatabaseChangeMonitor
argument_list|(
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|updateTimeStamp ()
specifier|public
name|void
name|updateTimeStamp
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|markAsSaved
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getTempFile ()
specifier|public
name|Path
name|getTempFile
parameter_list|()
block|{
return|return
name|changeMonitor
operator|.
name|map
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|getTempFile
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
end_function

begin_class
DECL|class|SearchAndOpenFile
specifier|private
specifier|static
class|class
name|SearchAndOpenFile
block|{
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|basePanel
specifier|private
specifier|final
name|BasePanel
name|basePanel
decl_stmt|;
DECL|method|SearchAndOpenFile (final BibEntry entry, final BasePanel basePanel)
specifier|public
name|SearchAndOpenFile
parameter_list|(
specifier|final
name|BibEntry
name|entry
parameter_list|,
specifier|final
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|basePanel
operator|=
name|basePanel
expr_stmt|;
block|}
DECL|method|searchAndOpen ()
specifier|public
name|void
name|searchAndOpen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|RUN_AUTOMATIC_FILE_SEARCH
argument_list|)
condition|)
block|{
comment|/*  The search can lead to an unexpected 100% CPU usage which is perceived                     as a bug, if the search incidentally starts at a directory with lots                     of stuff below. It is now disabled by default. */
return|return;
block|}
specifier|final
name|Set
argument_list|<
name|ExternalFileType
argument_list|>
name|types
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeSelection
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getFileDirectoryPreferences
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
name|types
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getExtension
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run the search operation:
name|FileFinder
name|fileFinder
init|=
name|FileFinders
operator|.
name|constructFromConfiguration
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getAutoLinkPreferences
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|fileFinder
operator|.
name|findAssociatedFiles
argument_list|(
name|entry
argument_list|,
name|dirs
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|file
init|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|type
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
name|file
argument_list|,
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problems with finding/or opening files "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|GroupTreeListener
specifier|private
class|class
name|GroupTreeListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryAddedEvent addedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryAddedEvent
name|addedEntryEvent
parameter_list|)
block|{
comment|// if the added entry is an undo don't add it to the current group
if|if
condition|(
name|addedEntryEvent
operator|.
name|getEntryEventSource
argument_list|()
operator|==
name|EntryEventSource
operator|.
name|UNDO
condition|)
block|{
return|return;
block|}
comment|// Automatically add new entry to the selected group (or set of groups)
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|addedEntryEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|stateManager
operator|.
name|getSelectedGroup
argument_list|(
name|bibDatabaseContext
argument_list|)
operator|.
name|forEach
argument_list|(
name|selectedGroup
lambda|->
name|selectedGroup
operator|.
name|addEntriesToGroup
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|EntryRemovedListener
specifier|private
class|class
name|EntryRemovedListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryRemovedEvent entryRemovedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryRemovedEvent
name|entryRemovedEvent
parameter_list|)
block|{
comment|// if the entry that is displayed in the current entry editor is removed, close the entry editor
if|if
condition|(
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
operator|)
operator|&&
name|entryEditor
operator|.
name|getEntry
argument_list|()
operator|.
name|equals
argument_list|(
name|entryRemovedEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
condition|)
block|{
name|entryEditor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|BibEntry
name|previewEntry
init|=
name|selectionListener
operator|.
name|getPreview
argument_list|()
operator|.
name|getEntry
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|previewEntry
operator|!=
literal|null
operator|)
operator|&&
name|previewEntry
operator|.
name|equals
argument_list|(
name|entryRemovedEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
condition|)
block|{
name|preview
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**      * Ensures that the search auto completer is up to date when entries are changed AKA Let the auto completer, if any,      * harvest words from the entry      */
end_comment

begin_class
DECL|class|SearchAutoCompleteListener
specifier|private
class|class
name|SearchAutoCompleteListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryAddedEvent addedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryAddedEvent
name|addedEntryEvent
parameter_list|)
block|{
name|searchAutoCompleter
operator|.
name|indexEntry
argument_list|(
name|addedEntryEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryChangedEvent entryChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryChangedEvent
name|entryChangedEvent
parameter_list|)
block|{
name|searchAutoCompleter
operator|.
name|indexEntry
argument_list|(
name|entryChangedEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Ensures that the results of the current search are updated when a new entry is inserted into the database      */
end_comment

begin_class
DECL|class|SearchListener
specifier|private
class|class
name|SearchListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryAddedEvent addedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryAddedEvent
name|addedEntryEvent
parameter_list|)
block|{
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|performSearch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryChangedEvent entryChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryChangedEvent
name|entryChangedEvent
parameter_list|)
block|{
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|setDontSelectSearchBar
argument_list|()
expr_stmt|;
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|performSearch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryRemovedEvent removedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryRemovedEvent
name|removedEntryEvent
parameter_list|)
block|{
comment|// IMO only used to update the status (found X entries)
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|performSearch
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|UndoAction
specifier|private
class|class
name|UndoAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|JComponent
name|focused
init|=
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|focused
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|focused
operator|instanceof
name|FieldEditor
operator|)
operator|&&
name|focused
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
comment|// User is currently editing a field:
comment|// Check if it is the preamble:
name|FieldEditor
name|fieldEditor
init|=
operator|(
name|FieldEditor
operator|)
name|focused
decl_stmt|;
if|if
condition|(
operator|(
name|preambleEditor
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|fieldEditor
operator|.
name|equals
argument_list|(
name|preambleEditor
operator|.
name|getFieldEditor
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|preambleEditor
operator|.
name|storeCurrentEdit
argument_list|()
expr_stmt|;
block|}
block|}
name|getUndoManager
argument_list|()
operator|.
name|undo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Undo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotUndoException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Nothing to undo"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Nothing to undo"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|OpenURLAction
specifier|private
class|class
name|OpenURLAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|bes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|field
init|=
name|FieldName
operator|.
name|DOI
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|link
init|=
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hasField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
condition|)
block|{
name|link
operator|=
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
expr_stmt|;
name|field
operator|=
name|FieldName
operator|.
name|URL
expr_stmt|;
block|}
if|if
condition|(
name|link
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|bibDatabaseContext
argument_list|,
name|link
operator|.
name|get
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No URL or DOI found in the "url" and "doi" fields.
comment|// Look for web links in the "file" field as a fallback:
name|FileListEntry
name|entry
init|=
literal|null
decl_stmt|;
name|FileListTableModel
name|tm
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|tm
operator|::
name|setContent
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tm
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|tm
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|FieldName
operator|.
name|URL
operator|.
name|equalsIgnoreCase
argument_list|(
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|FieldName
operator|.
name|PS
operator|.
name|equalsIgnoreCase
argument_list|(
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|FieldName
operator|.
name|PDF
operator|.
name|equalsIgnoreCase
argument_list|(
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|=
name|flEntry
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No URL defined"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
name|bibDatabaseContext
argument_list|,
name|entry
operator|.
name|getLink
argument_list|()
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not open link"
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not open link"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires exactly one item to be selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|RedoAction
specifier|private
class|class
name|RedoAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|JComponent
name|focused
init|=
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
decl_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|redo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Redo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotRedoException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Nothing to redo"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|PrintPreviewAction
specifier|private
class|class
name|PrintPreviewAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
throws|throws
name|Exception
block|{
name|showPreview
argument_list|()
expr_stmt|;
name|preview
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|SaveSelectedAction
specifier|private
class|class
name|SaveSelectedAction
implements|implements
name|BaseAction
block|{
DECL|field|saveType
specifier|private
specifier|final
name|SavePreferences
operator|.
name|DatabaseSaveType
name|saveType
decl_stmt|;
DECL|method|SaveSelectedAction (SavePreferences.DatabaseSaveType saveType)
specifier|public
name|SaveSelectedAction
parameter_list|(
name|SavePreferences
operator|.
name|DatabaseSaveType
name|saveType
parameter_list|)
block|{
name|this
operator|.
name|saveType
operator|=
name|saveType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
throws|throws
name|SaveException
block|{
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|withDefaultExtension
argument_list|(
name|FileType
operator|.
name|BIBTEX_DB
argument_list|)
operator|.
name|addExtensionFilter
argument_list|(
name|FileType
operator|.
name|BIBTEX_DB
argument_list|)
operator|.
name|withInitialDirectory
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DialogService
name|ds
init|=
operator|new
name|FXDialogService
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|chosenFile
init|=
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|ds
operator|.
name|showFileSaveDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|chosenFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Path
name|path
init|=
name|chosenFile
operator|.
name|get
argument_list|()
decl_stmt|;
name|saveDatabase
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|,
name|saveType
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getFileHistory
argument_list|()
operator|.
name|newFile
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Saved selected to '%0'."
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

unit|}
end_unit

