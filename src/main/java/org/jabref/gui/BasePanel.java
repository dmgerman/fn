begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotRedoException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CannotUndoException
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|Bindings
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Orientation
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|SplitPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|StackPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|BaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CleanupAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CopyBibTeXKeyAndLinkAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|GenerateBibtexKeyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|WriteXMPAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompletePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|AutoCompleteUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|PersonNameSuggestionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|autocompleter
operator|.
name|SuggestionProviders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
operator|.
name|DatabaseChangeMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|collab
operator|.
name|DatabaseChangePane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|edit
operator|.
name|ReplaceStringAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|FindFullTextAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|JabRefIcon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|actions
operator|.
name|AppendDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
operator|.
name|AbbreviateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|journals
operator|.
name|UnabbreviateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|MergeEntriesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|MergeWithFetchedEntryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldDatabaseChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldValueViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|CountingUndoManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableInsertEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|CitationStyleToClipboardWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|SendAsEMailAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStyleCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|CitationStyleOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|LayoutHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|pdf
operator|.
name|FileAnnotationCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileFinders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|KeyCollisionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|BibDatabaseContextChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|CoarseChangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|EntryAddedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|event
operator|.
name|EntryRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseSynchronizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|EntryChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|EntryEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialFieldValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreviewPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|BasePanel
specifier|public
class|class
name|BasePanel
extends|extends
name|StackPane
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasePanel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bibDatabaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|bibDatabaseContext
decl_stmt|;
DECL|field|tableModel
specifier|private
specifier|final
name|MainTableDataModel
name|tableModel
decl_stmt|;
DECL|field|citationStyleCache
specifier|private
specifier|final
name|CitationStyleCache
name|citationStyleCache
decl_stmt|;
DECL|field|annotationCache
specifier|private
specifier|final
name|FileAnnotationCache
name|annotationCache
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
comment|// The undo manager.
DECL|field|undoAction
specifier|private
specifier|final
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
specifier|private
specifier|final
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
DECL|field|undoManager
specifier|private
specifier|final
name|CountingUndoManager
name|undoManager
decl_stmt|;
comment|// Keeps track of the string dialog if it is open.
DECL|field|actions
specifier|private
specifier|final
name|Map
argument_list|<
name|Actions
argument_list|,
name|BaseAction
argument_list|>
name|actions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sidePaneManager
specifier|private
specifier|final
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|preview
specifier|private
specifier|final
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|BasePanelPreferences
name|preferences
decl_stmt|;
DECL|field|externalFileTypes
specifier|private
specifier|final
name|ExternalFileTypes
name|externalFileTypes
decl_stmt|;
DECL|field|entryEditor
specifier|private
specifier|final
name|EntryEditor
name|entryEditor
decl_stmt|;
DECL|field|mainTable
specifier|private
name|MainTable
name|mainTable
decl_stmt|;
comment|// To contain instantiated entry editors. This is to save time
comment|// As most enums, this must not be null
DECL|field|mode
specifier|private
name|BasePanelMode
name|mode
init|=
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
decl_stmt|;
DECL|field|splitPane
specifier|private
name|SplitPane
name|splitPane
decl_stmt|;
DECL|field|changePane
specifier|private
name|DatabaseChangePane
name|changePane
decl_stmt|;
DECL|field|saving
specifier|private
name|boolean
name|saving
decl_stmt|;
comment|// AutoCompleter used in the search bar
DECL|field|searchAutoCompleter
specifier|private
name|PersonNameSuggestionProvider
name|searchAutoCompleter
decl_stmt|;
DECL|field|baseChanged
specifier|private
name|boolean
name|baseChanged
decl_stmt|;
DECL|field|nonUndoableChange
specifier|private
name|boolean
name|nonUndoableChange
decl_stmt|;
comment|// Used to track whether the base has changed since last save.
DECL|field|showing
specifier|private
name|BibEntry
name|showing
decl_stmt|;
DECL|field|suggestionProviders
specifier|private
name|SuggestionProviders
name|suggestionProviders
decl_stmt|;
DECL|field|dividerPositionSubscription
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"FieldCanBeLocal"
block|,
literal|"unused"
block|}
argument_list|)
specifier|private
name|Subscription
name|dividerPositionSubscription
decl_stmt|;
comment|// the query the user searches when this BasePanel is active
DECL|field|currentSearchQuery
specifier|private
name|Optional
argument_list|<
name|SearchQuery
argument_list|>
name|currentSearchQuery
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|changeMonitor
specifier|private
name|Optional
argument_list|<
name|DatabaseChangeMonitor
argument_list|>
name|changeMonitor
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|method|BasePanel (JabRefFrame frame, BasePanelPreferences preferences, BibDatabaseContext bibDatabaseContext, ExternalFileTypes externalFileTypes)
specifier|public
name|BasePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanelPreferences
name|preferences
parameter_list|,
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|,
name|ExternalFileTypes
name|externalFileTypes
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|this
operator|.
name|bibDatabaseContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|externalFileTypes
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|externalFileTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|undoManager
operator|=
name|frame
operator|.
name|getUndoManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|frame
operator|.
name|getDialogService
argument_list|()
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getMetaData
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|sidePaneManager
operator|=
name|frame
operator|.
name|getSidePaneManager
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableModel
operator|=
operator|new
name|MainTableDataModel
argument_list|(
name|getBibDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
name|citationStyleCache
operator|=
operator|new
name|CitationStyleCache
argument_list|(
name|bibDatabaseContext
argument_list|)
expr_stmt|;
name|annotationCache
operator|=
operator|new
name|FileAnnotationCache
argument_list|(
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
expr_stmt|;
name|setupMainPanel
argument_list|()
expr_stmt|;
name|setupActions
argument_list|()
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|SearchListener
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|EntryRemovedListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure that at each addition of a new entry, the entry is added to the groups interface
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|GroupTreeListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure that all entry changes mark the panel as changed
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|UpdateTimestampListener
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|entryEditor
operator|=
operator|new
name|EntryEditor
argument_list|(
name|this
argument_list|,
name|preferences
operator|.
name|getEntryEditorPreferences
argument_list|()
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|,
name|dialogService
argument_list|,
name|externalFileTypes
argument_list|,
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|)
expr_stmt|;
name|this
operator|.
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
name|this
argument_list|,
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|preferences
operator|.
name|getKeyBindings
argument_list|()
argument_list|,
name|preferences
operator|.
name|getPreviewPreferences
argument_list|()
argument_list|,
name|dialogService
argument_list|,
name|externalFileTypes
argument_list|)
expr_stmt|;
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|preview
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (BibDatabaseContextChangedEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|BibDatabaseContextChangedEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns a collection of suggestion providers, which are populated from the current library.      */
DECL|method|getSuggestionProviders ()
specifier|public
name|SuggestionProviders
name|getSuggestionProviders
parameter_list|()
block|{
return|return
name|suggestionProviders
return|;
block|}
DECL|method|getTabTitle ()
specifier|public
name|String
name|getTabTitle
parameter_list|()
block|{
name|StringBuilder
name|title
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|DatabaseLocation
name|databaseLocation
init|=
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|boolean
name|isAutosaveEnabled
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|LOCAL_AUTO_SAVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|databaseLocation
operator|==
name|DatabaseLocation
operator|.
name|LOCAL
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// check if file is modified
name|String
name|changeFlag
init|=
name|isModified
argument_list|()
operator|&&
operator|!
name|isAutosaveEnabled
condition|?
literal|"*"
else|:
literal|""
decl_stmt|;
name|title
operator|.
name|append
argument_list|(
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|changeFlag
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|title
operator|.
name|append
argument_list|(
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDatabase
argument_list|()
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
comment|// if the database is not empty and no file is assigned,
comment|// the database came from an import and has to be treated somehow
comment|// -> mark as changed
comment|// This also happens internally at basepanel to ensure consistency line 224
name|title
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|databaseLocation
operator|==
name|DatabaseLocation
operator|.
name|SHARED
condition|)
block|{
name|title
operator|.
name|append
argument_list|(
name|this
operator|.
name|bibDatabaseContext
operator|.
name|getDBMSSynchronizer
argument_list|()
operator|.
name|getDBName
argument_list|()
operator|+
literal|" ["
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"shared"
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|title
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isModified ()
specifier|public
name|boolean
name|isModified
parameter_list|()
block|{
return|return
name|baseChanged
return|;
block|}
DECL|method|getMode ()
specifier|public
name|BasePanelMode
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|setMode (BasePanelMode mode)
specifier|public
name|void
name|setMode
parameter_list|(
name|BasePanelMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
DECL|method|frame ()
specifier|public
name|JabRefFrame
name|frame
parameter_list|()
block|{
return|return
name|frame
return|;
block|}
DECL|method|output (String s)
specifier|public
name|void
name|output
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setupActions ()
specifier|private
name|void
name|setupActions
parameter_list|()
block|{
name|SaveDatabaseAction
name|saveAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
name|CleanupAction
name|cleanUpAction
init|=
operator|new
name|CleanupAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|UNDO
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|REDO
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
comment|// The action for opening an entry editor.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|EDIT
argument_list|,
name|this
operator|::
name|showAndEdit
argument_list|)
expr_stmt|;
comment|// The action for saving a database.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|,
name|saveAction
operator|::
name|save
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE_AS
argument_list|,
name|saveAction
operator|::
name|saveAs
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SAVE_SELECTED_AS_PLAIN
argument_list|,
name|saveAction
operator|::
name|saveSelectedAsPlain
argument_list|)
expr_stmt|;
comment|// The action for copying selected entries.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|,
name|this
operator|::
name|copy
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PRINT_PREVIEW
argument_list|,
operator|new
name|PrintPreviewAction
argument_list|()
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|CUT
argument_list|,
name|this
operator|::
name|cut
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|DELETE
argument_list|,
parameter_list|()
lambda|->
name|delete
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// The action for pasting entries or cell contents.
comment|//  - more robust detection of available content flavors (doesn't only look at first one offered)
comment|//  - support for parsing string-flavor clipboard contents which are bibtex entries.
comment|//    This allows you to (a) paste entire bibtex entries from a text editor, web browser, etc
comment|//                       (b) copy and paste entries between multiple instances of JabRef (since
comment|//         only the text representation seems to get as far as the X clipboard, at least on my system)
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PASTE
argument_list|,
name|this
operator|::
name|paste
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SELECT_ALL
argument_list|,
name|mainTable
operator|.
name|getSelectionModel
argument_list|()
operator|::
name|selectAll
argument_list|)
expr_stmt|;
comment|// The action for auto-generating keys.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MAKE_KEY
argument_list|,
operator|new
name|GenerateBibtexKeyAction
argument_list|(
name|this
argument_list|,
name|frame
operator|.
name|getDialogService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// The action for cleaning up entry.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|CLEANUP
argument_list|,
name|cleanUpAction
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MERGE_ENTRIES
argument_list|,
parameter_list|()
lambda|->
operator|new
name|MergeEntriesAction
argument_list|(
name|frame
argument_list|)
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
comment|// The action for copying the selected entry's key.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_KEY
argument_list|,
name|this
operator|::
name|copyKey
argument_list|)
expr_stmt|;
comment|// The action for copying the selected entry's title.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_TITLE
argument_list|,
name|this
operator|::
name|copyTitle
argument_list|)
expr_stmt|;
comment|// The action for copying a cite for the selected entry.
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITE_KEY
argument_list|,
name|this
operator|::
name|copyCiteKey
argument_list|)
expr_stmt|;
comment|// The action for copying the BibTeX key and the title for the first selected entry
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_TITLE
argument_list|,
name|this
operator|::
name|copyKeyAndTitle
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_ASCII_DOC
argument_list|,
parameter_list|()
lambda|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|ASCII_DOC
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_XSLFO
argument_list|,
parameter_list|()
lambda|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|XSL_FO
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_HTML
argument_list|,
parameter_list|()
lambda|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|HTML
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_RTF
argument_list|,
parameter_list|()
lambda|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|RTF
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_TEXT
argument_list|,
parameter_list|()
lambda|->
name|copyCitationToClipboard
argument_list|(
name|CitationStyleOutputFormat
operator|.
name|TEXT
argument_list|)
argument_list|)
expr_stmt|;
comment|// The action for copying the BibTeX keys as hyperlinks to the urls of the selected entries
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_LINK
argument_list|,
operator|new
name|CopyBibTeXKeyAndLinkAction
argument_list|(
name|mainTable
argument_list|,
name|Globals
operator|.
name|clipboardManager
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MERGE_DATABASE
argument_list|,
operator|new
name|AppendDatabaseAction
argument_list|(
name|frame
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_EXTERNAL_FILE
argument_list|,
name|this
operator|::
name|openExternalFile
argument_list|)
expr_stmt|;
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_FOLDER
argument_list|,
parameter_list|()
lambda|->
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
operator|=
name|FileUtil
operator|.
name|getListOfLinkedFiles
argument_list|(
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|,
name|bibDatabaseContext
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
argument_list|)
argument_list|;             for
operator|(
name|final
name|Path
name|f
operator|:
name|files
operator|)
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openFolderAndSelectFile
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not open folder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_CONSOLE
argument_list|,
parameter_list|()
lambda|->
name|JabRefDesktop
operator|.
name|openConsole
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PULL_CHANGES_FROM_SHARED_DATABASE
argument_list|,
parameter_list|()
lambda|->
block|{
name|DatabaseSynchronizer
name|dbmsSynchronizer
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDBMSSynchronizer
argument_list|()
decl_stmt|;
name|dbmsSynchronizer
operator|.
name|pullChanges
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|OPEN_URL
argument_list|,
operator|new
name|OpenURLAction
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|MERGE_WITH_FETCHED_ENTRY
argument_list|,
operator|new
name|MergeWithFetchedEntryAction
argument_list|(
name|this
argument_list|,
name|frame
operator|.
name|getDialogService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|REPLACE_ALL
argument_list|,
parameter_list|()
lambda|->
operator|(
operator|new
name|ReplaceStringAction
argument_list|(
name|this
argument_list|)
operator|)
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
argument_list|,
name|undoManager
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
argument_list|,
name|undoManager
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
argument_list|,
name|undoManager
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|SpecialFieldValue
name|prio
range|:
name|SpecialField
operator|.
name|PRIORITY
operator|.
name|getValues
argument_list|()
control|)
block|{
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|prio
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|PRIORITY
argument_list|,
name|undoManager
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|prio
argument_list|,
name|this
operator|.
name|frame
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_for
for|for
control|(
name|SpecialFieldValue
name|rank
range|:
name|SpecialField
operator|.
name|RANKING
operator|.
name|getValues
argument_list|()
control|)
block|{
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|rank
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|RANKING
argument_list|,
name|undoManager
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|rank
argument_list|,
name|this
operator|.
name|frame
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_for
for|for
control|(
name|SpecialFieldValue
name|status
range|:
name|SpecialField
operator|.
name|READ_STATUS
operator|.
name|getValues
argument_list|()
control|)
block|{
name|actions
operator|.
name|put
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|status
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldViewModel
argument_list|(
name|SpecialField
operator|.
name|READ_STATUS
argument_list|,
name|undoManager
argument_list|)
operator|.
name|getSpecialFieldAction
argument_list|(
name|status
argument_list|,
name|this
operator|.
name|frame
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|TOGGLE_PREVIEW
argument_list|,
parameter_list|()
lambda|->
block|{
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
decl_stmt|;
name|boolean
name|enabled
init|=
operator|!
name|previewPreferences
operator|.
name|isPreviewPanelEnabled
argument_list|()
decl_stmt|;
name|PreviewPreferences
name|newPreviewPreferences
init|=
name|previewPreferences
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewPanelEnabled
argument_list|(
name|enabled
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|newPreviewPreferences
argument_list|)
expr_stmt|;
name|setPreviewActive
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|NEXT_PREVIEW_STYLE
argument_list|,
name|this
operator|::
name|nextPreviewStyle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|PREVIOUS_PREVIEW_STYLE
argument_list|,
name|this
operator|::
name|previousPreviewStyle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|SEND_AS_EMAIL
argument_list|,
operator|new
name|SendAsEMailAction
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|WRITE_XMP
argument_list|,
operator|new
name|WriteXMPAction
argument_list|(
name|this
argument_list|)
operator|::
name|execute
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_ISO
argument_list|,
operator|new
name|AbbreviateAction
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_MEDLINE
argument_list|,
operator|new
name|AbbreviateAction
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|UNABBREVIATE
argument_list|,
operator|new
name|UnabbreviateAction
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|actions
operator|.
name|put
argument_list|(
name|Actions
operator|.
name|DOWNLOAD_FULL_TEXT
argument_list|,
operator|new
name|FindFullTextAction
argument_list|(
name|this
argument_list|)
operator|::
name|execute
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**      * Generates and copies citations based on the selected entries to the clipboard      *      * @param outputFormat the desired {@link CitationStyleOutputFormat}      */
end_comment

begin_function
DECL|method|copyCitationToClipboard (CitationStyleOutputFormat outputFormat)
unit|private
name|void
name|copyCitationToClipboard
parameter_list|(
name|CitationStyleOutputFormat
name|outputFormat
parameter_list|)
block|{
name|CitationStyleToClipboardWorker
name|worker
init|=
operator|new
name|CitationStyleToClipboardWorker
argument_list|(
name|this
argument_list|,
name|outputFormat
argument_list|,
name|dialogService
argument_list|,
name|Globals
operator|.
name|clipboardManager
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|worker
operator|.
name|copyCitationStyleToClipboard
argument_list|(
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Removes the selected entries from the database      *      * @param cut If false the user will get asked if he really wants to delete the entries, and it will be localized as      *            "deleted". If true the action will be localized as "cut"      */
end_comment

begin_function
DECL|method|delete (boolean cut)
specifier|public
name|void
name|delete
parameter_list|(
name|boolean
name|cut
parameter_list|)
block|{
name|delete
argument_list|(
name|cut
argument_list|,
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Removes the selected entries from the database      *      * @param cut If false the user will get asked if he really wants to delete the entries, and it will be localized as      *            "deleted". If true the action will be localized as "cut"      */
end_comment

begin_function
DECL|method|delete (boolean cut, List<BibEntry> entries)
specifier|private
name|void
name|delete
parameter_list|(
name|boolean
name|cut
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|cut
operator|&&
operator|!
name|showDeleteConfirmationDialog
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|NamedCompound
name|compound
decl_stmt|;
if|if
condition|(
name|cut
condition|)
block|{
name|compound
operator|=
operator|new
name|NamedCompound
argument_list|(
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"cut entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"cut entry"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compound
operator|=
operator|new
name|NamedCompound
argument_list|(
operator|(
name|entries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"delete entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"delete entry"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ensureNotShowingBottomPanel
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|formatOutputMessage
argument_list|(
name|cut
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cut"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deleted"
argument_list|)
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// prevent the main table from loosing focus
name|mainTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|delete (BibEntry entry)
specifier|public
name|void
name|delete
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|delete
argument_list|(
literal|false
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|copyTitle ()
specifier|private
name|void
name|copyTitle
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectedBibEntries
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selectedBibEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Collect all non-null titles.
name|List
argument_list|<
name|String
argument_list|>
name|titles
init|=
name|selectedBibEntries
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|bibEntry
lambda|->
name|bibEntry
operator|.
name|getTitle
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|bibEntry
lambda|->
name|bibEntry
operator|.
name|getTitle
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|titles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have titles."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Globals
operator|.
name|clipboardManager
operator|.
name|setContent
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|titles
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|titles
operator|.
name|size
argument_list|()
operator|==
name|selectedBibEntries
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had titles.
name|output
argument_list|(
operator|(
name|selectedBibEntries
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied titles"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied title"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined title."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|selectedBibEntries
operator|.
name|size
argument_list|()
operator|-
name|titles
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|selectedBibEntries
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyCiteKey ()
specifier|private
name|void
name|copyCiteKey
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
name|be
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|keys
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|sb
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|keys
argument_list|)
decl_stmt|;
name|String
name|citeCommand
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|CITE_COMMAND
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|cite
lambda|->
name|cite
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
comment|// must contain \
operator|.
name|orElse
argument_list|(
literal|"\\cite"
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|clipboardManager
operator|.
name|setContent
argument_list|(
name|citeCommand
operator|+
literal|"{"
operator|+
name|sb
operator|+
literal|'}'
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|bes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had keys.
name|output
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied keys"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied key"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined BibTeX key."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|-
name|keys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyKey ()
specifier|private
name|void
name|copyKey
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
name|be
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|keys
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Globals
operator|.
name|clipboardManager
operator|.
name|setContent
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|keys
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
name|bes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had keys.
name|output
argument_list|(
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied keys"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied key"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined BibTeX key."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|-
name|keys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|copyKeyAndTitle ()
specifier|private
name|void
name|copyKeyAndTitle
parameter_list|()
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// OK: in a future version, this string should be configurable to allow arbitrary exports
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
literal|"\\bibtexkey - \\begin{title}\\format[RemoveBrackets]{\\title}\\end{title}\n"
argument_list|)
decl_stmt|;
name|Layout
name|layout
decl_stmt|;
try|try
block|{
name|layout
operator|=
operator|new
name|LayoutHelper
argument_list|(
name|sr
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|)
operator|.
name|getLayoutFromText
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not get layout"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|copied
init|=
literal|0
decl_stmt|;
comment|// Collect all non-null keys.
for|for
control|(
name|BibEntry
name|be
range|:
name|bes
control|)
block|{
if|if
condition|(
name|be
operator|.
name|hasCiteKey
argument_list|()
condition|)
block|{
name|copied
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|layout
operator|.
name|doLayout
argument_list|(
name|be
argument_list|,
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|copied
operator|==
literal|0
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"None of the selected entries have BibTeX keys."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Globals
operator|.
name|clipboardManager
operator|.
name|setContent
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|copied
operator|==
name|bes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// All entries had keys.
name|output
argument_list|(
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied keys"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied key"
argument_list|)
operator|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warning: %0 out of %1 entries have undefined BibTeX key."
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
operator|-
name|copied
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|openExternalFile ()
specifier|private
name|void
name|openExternalFile
parameter_list|()
block|{
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectedEntries
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedEntries
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires exactly one item to be selected."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|BibEntry
name|entry
init|=
name|selectedEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|hasField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
condition|)
block|{
comment|// no bibtex field
operator|new
name|SearchAndOpenFile
argument_list|(
name|entry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
operator|.
name|searchAndOpen
argument_list|()
expr_stmt|;
return|return;
block|}
name|FileListTableModel
name|fileListTableModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fileListTableModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileListTableModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// content in BibTeX field is not readable
operator|new
name|SearchAndOpenFile
argument_list|(
name|entry
argument_list|,
name|BasePanel
operator|.
name|this
argument_list|)
operator|.
name|searchAndOpen
argument_list|()
expr_stmt|;
return|return;
block|}
name|FileListEntry
name|flEntry
init|=
name|fileListTableModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExternalFileMenuItem
name|item
init|=
operator|new
name|ExternalFileMenuItem
argument_list|(
name|frame
argument_list|()
argument_list|,
literal|""
argument_list|,
name|flEntry
operator|.
name|getLink
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getIcon
argument_list|)
operator|.
name|map
argument_list|(
name|JabRefIcon
operator|::
name|getSmallIcon
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|bibDatabaseContext
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|item
operator|.
name|doClick
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method is called from JabRefFrame if a database specific action is requested by the user. Runs the command      * if it is defined, or prints an error message to the standard error stream.      *      * @param command The name of the command to run.      */
end_comment

begin_function
DECL|method|runCommand (final Actions command)
specifier|public
name|void
name|runCommand
parameter_list|(
specifier|final
name|Actions
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|actions
operator|.
name|containsKey
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"No action defined for '"
operator|+
name|command
operator|+
literal|'\''
argument_list|)
expr_stmt|;
return|return;
block|}
name|BaseAction
name|action
init|=
name|actions
operator|.
name|get
argument_list|(
name|command
argument_list|)
decl_stmt|;
try|try
block|{
name|action
operator|.
name|action
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"runCommand error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|registerUndoableChanges (List<FieldChange> changes)
specifier|public
name|void
name|registerUndoableChanges
parameter_list|(
name|List
argument_list|<
name|FieldChange
argument_list|>
name|changes
parameter_list|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save actions"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldChange
name|change
range|:
name|changes
control|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|change
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|ce
operator|.
name|hasEdits
argument_list|()
condition|)
block|{
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * This method is called from JabRefFrame when the user wants to create a new entry.      *      * @param bibEntry The new entry.      */
end_comment

begin_function
DECL|method|insertEntry (final BibEntry bibEntry)
specifier|public
name|void
name|insertEntry
parameter_list|(
specifier|final
name|BibEntry
name|bibEntry
parameter_list|)
block|{
if|if
condition|(
name|bibEntry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
comment|// Set owner and timestamp
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|bibEntry
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create an UndoableInsertEntry object.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableInsertEntry
argument_list|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|bibEntry
argument_list|)
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Added new '%0' entry."
argument_list|,
name|bibEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
comment|// The database just changed.
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_OPEN_FORM
argument_list|)
condition|)
block|{
name|showAndEdit
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
name|clearAndSelect
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Collision for bibtex key"
operator|+
name|bibEntry
operator|.
name|getId
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|editEntryAndFocusField (BibEntry entry, String fieldName)
specifier|public
name|void
name|editEntryAndFocusField
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|showAndEdit
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Focus field and entry in main table (async to give entry editor time to load)
name|entryEditor
operator|.
name|setFocusToField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|clearAndSelect
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|updateTableFont ()
specifier|public
name|void
name|updateTableFont
parameter_list|()
block|{
name|mainTable
operator|.
name|updateFont
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|createMainTable ()
specifier|private
name|void
name|createMainTable
parameter_list|()
block|{
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|SpecialFieldDatabaseChangeListener
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|mainTable
operator|=
operator|new
name|MainTable
argument_list|(
name|tableModel
argument_list|,
name|frame
argument_list|,
name|this
argument_list|,
name|bibDatabaseContext
argument_list|,
name|preferences
operator|.
name|getTablePreferences
argument_list|()
argument_list|,
name|externalFileTypes
argument_list|,
name|preferences
operator|.
name|getKeyBindings
argument_list|()
argument_list|)
expr_stmt|;
name|mainTable
operator|.
name|updateFont
argument_list|()
expr_stmt|;
comment|// Add the listener that binds selection to state manager (TODO: should be replaced by proper JavaFX binding as soon as table is implemented in JavaFX)
name|mainTable
operator|.
name|addSelectionListener
argument_list|(
name|listEvent
lambda|->
name|Globals
operator|.
name|stateManager
operator|.
name|setSelectedEntries
argument_list|(
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update entry editor and preview according to selected entries
name|mainTable
operator|.
name|addSelectionListener
argument_list|(
name|event
lambda|->
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|entry
lambda|->
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
argument_list|;
name|entryEditor
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
argument_list|;
block|}
end_function

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_comment
comment|// TODO: Register these actions globally
end_comment

begin_comment
comment|/*         String clearSearch = "clearSearch";         mainTable.getInputMap().put(Globals.getKeyPrefs().getKey(KeyBinding.CLEAR_SEARCH), clearSearch);         mainTable.getActionMap().put(clearSearch, new AbstractAction() {              @Override             public void actionPerformed(ActionEvent e) {                 // need to close these here, b/c this action overshadows the responsible actions when the main table is selected                 switch (mode) {                     case SHOWING_NOTHING:                         frame.getGlobalSearchBar().endSearch();                         break;                     case SHOWING_PREVIEW:                         getPreviewPanel().close();                         break;                     case SHOWING_EDITOR:                     case WILL_SHOW_EDITOR:                         entryEditorClosing(getEntryEditor());                         break;                     default:                         LOGGER.warn("unknown BasePanelMode: '" + mode + "', doing nothing");                         break;                 }             }         });          mainTable.getActionMap().put(Actions.CUT, new AbstractAction() {              @Override             public void actionPerformed(ActionEvent e) {                 try {                     runCommand(Actions.CUT);                 } catch (Throwable ex) {                     LOGGER.warn("Could not cut", ex);                 }             }         });         mainTable.getActionMap().put(Actions.COPY, new AbstractAction() {              @Override             public void actionPerformed(ActionEvent e) {                 try {                     runCommand(Actions.COPY);                 } catch (Throwable ex) {                     LOGGER.warn("Could not copy", ex);                 }             }         });         mainTable.getActionMap().put(Actions.PASTE, new AbstractAction() {              @Override             public void actionPerformed(ActionEvent e) {                 try {                     runCommand(Actions.PASTE);                 } catch (Throwable ex) {                     LOGGER.warn("Could not paste", ex);                 }             }         });         */
end_comment

begin_function
unit|}      public
DECL|method|setupMainPanel ()
name|void
name|setupMainPanel
parameter_list|()
block|{
name|splitPane
operator|=
operator|new
name|SplitPane
argument_list|()
expr_stmt|;
name|splitPane
operator|.
name|setOrientation
argument_list|(
name|Orientation
operator|.
name|VERTICAL
argument_list|)
expr_stmt|;
name|adjustSplitter
argument_list|()
expr_stmt|;
comment|// restore last splitting state (before mainTable is created as creation affects the stored size of the entryEditors)
name|createMainTable
argument_list|()
expr_stmt|;
name|ScrollPane
name|pane
init|=
name|mainTable
operator|.
name|getPane
argument_list|()
decl_stmt|;
name|pane
operator|.
name|setFitToHeight
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pane
operator|.
name|setFitToWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|pane
argument_list|)
expr_stmt|;
comment|// Set up name autocompleter for search:
name|instantiateSearchAutoCompleter
argument_list|()
expr_stmt|;
name|this
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|SearchAutoCompleteListener
argument_list|()
argument_list|)
expr_stmt|;
name|setupAutoCompletion
argument_list|()
expr_stmt|;
comment|// Saves the divider position as soon as it changes
comment|// We need to keep a reference to the subscription, otherwise the binding gets garbage collected
name|dividerPositionSubscription
operator|=
name|EasyBind
operator|.
name|monadic
argument_list|(
name|Bindings
operator|.
name|valueAt
argument_list|(
name|splitPane
operator|.
name|getDividers
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|SplitPane
operator|.
name|Divider
operator|::
name|positionProperty
argument_list|)
operator|.
name|subscribe
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
name|saveDividerLocation
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add changePane in case a file is present - otherwise just add the splitPane to the panel
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|bibDatabaseContext
operator|.
name|getDatabasePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// create changeMonitor and changePane so we get notifications about outside changes to the file.
name|resetChangeMonitorAndChangePane
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
comment|// if the database is not empty and no file is assigned,
comment|// the database came from an import and has to be treated somehow
comment|// -> mark as changed
name|this
operator|.
name|baseChanged
operator|=
literal|true
expr_stmt|;
block|}
name|changePane
operator|=
literal|null
expr_stmt|;
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|splitPane
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Set up auto completion for this database      */
end_comment

begin_function
DECL|method|setupAutoCompletion ()
specifier|private
name|void
name|setupAutoCompletion
parameter_list|()
block|{
name|AutoCompletePreferences
name|autoCompletePreferences
init|=
name|preferences
operator|.
name|getAutoCompletePreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|autoCompletePreferences
operator|.
name|shouldAutoComplete
argument_list|()
condition|)
block|{
name|suggestionProviders
operator|=
operator|new
name|SuggestionProviders
argument_list|(
name|autoCompletePreferences
argument_list|,
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
expr_stmt|;
name|suggestionProviders
operator|.
name|indexDatabase
argument_list|(
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure that the suggestion providers are in sync with entries
name|CoarseChangeFilter
name|changeFilter
init|=
operator|new
name|CoarseChangeFilter
argument_list|(
name|bibDatabaseContext
argument_list|)
decl_stmt|;
name|changeFilter
operator|.
name|registerListener
argument_list|(
operator|new
name|AutoCompleteUpdater
argument_list|(
name|suggestionProviders
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Create empty suggestion providers if auto completion is deactivated
name|suggestionProviders
operator|=
operator|new
name|SuggestionProviders
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|updateSearchManager ()
specifier|public
name|void
name|updateSearchManager
parameter_list|()
block|{
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|setAutoCompleter
argument_list|(
name|searchAutoCompleter
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|instantiateSearchAutoCompleter ()
specifier|private
name|void
name|instantiateSearchAutoCompleter
parameter_list|()
block|{
name|searchAutoCompleter
operator|=
operator|new
name|PersonNameSuggestionProvider
argument_list|(
name|InternalBibtexFields
operator|.
name|getPersonNameFields
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|searchAutoCompleter
operator|.
name|indexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|adjustSplitter ()
specifier|private
name|void
name|adjustSplitter
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
condition|)
block|{
name|splitPane
operator|.
name|setDividerPositions
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewPanelDividerPosition
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|splitPane
operator|.
name|setDividerPositions
argument_list|(
name|preferences
operator|.
name|getEntryEditorDividerPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getEntryEditor ()
specifier|public
name|EntryEditor
name|getEntryEditor
parameter_list|()
block|{
return|return
name|entryEditor
return|;
block|}
end_function

begin_comment
comment|/**      * Sets the entry editor as the bottom component in the split pane. If an entry editor already was shown,      * makes sure that the divider doesn't move. Updates the mode to SHOWING_EDITOR.      * Then shows the given entry.      *      * @param entry The entry to edit.      */
end_comment

begin_function
DECL|method|showAndEdit (BibEntry entry)
specifier|public
name|void
name|showAndEdit
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|showBottomPane
argument_list|(
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
name|getShowing
argument_list|()
condition|)
block|{
name|entryEditor
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|showing
operator|=
name|entry
expr_stmt|;
block|}
name|entryEditor
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|showBottomPane (BasePanelMode newMode)
specifier|private
name|void
name|showBottomPane
parameter_list|(
name|BasePanelMode
name|newMode
parameter_list|)
block|{
name|Node
name|pane
decl_stmt|;
switch|switch
condition|(
name|newMode
condition|)
block|{
case|case
name|SHOWING_PREVIEW
case|:
name|pane
operator|=
name|preview
expr_stmt|;
break|break;
case|case
name|SHOWING_EDITOR
case|:
name|pane
operator|=
name|entryEditor
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"new mode not recognized: "
operator|+
name|newMode
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|splitPane
operator|.
name|getItems
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|splitPane
operator|.
name|getItems
argument_list|()
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|pane
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|splitPane
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|pane
argument_list|)
expr_stmt|;
block|}
name|mode
operator|=
name|newMode
expr_stmt|;
name|adjustSplitter
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|showAndEdit ()
specifier|private
name|void
name|showAndEdit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|showAndEdit
argument_list|(
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Sets the given preview panel as the bottom component in the split panel. Updates the mode to SHOWING_PREVIEW.      *      * @param entry The entry to show in the preview.      */
end_comment

begin_function
DECL|method|showPreview (BibEntry entry)
specifier|private
name|void
name|showPreview
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|showBottomPane
argument_list|(
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
argument_list|)
expr_stmt|;
name|preview
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|showPreview ()
specifier|private
name|void
name|showPreview
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|showPreview
argument_list|(
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|nextPreviewStyle ()
specifier|public
name|void
name|nextPreviewStyle
parameter_list|()
block|{
name|cyclePreview
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewCyclePosition
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|previousPreviewStyle ()
specifier|public
name|void
name|previousPreviewStyle
parameter_list|()
block|{
name|cyclePreview
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getPreviewCyclePosition
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|cyclePreview (int newPosition)
specifier|private
name|void
name|cyclePreview
parameter_list|(
name|int
name|newPosition
parameter_list|)
block|{
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewCyclePosition
argument_list|(
name|newPosition
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
name|preview
operator|.
name|updateLayout
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Removes the bottom component.      */
end_comment

begin_function
DECL|method|closeBottomPane ()
specifier|public
name|void
name|closeBottomPane
parameter_list|()
block|{
name|mode
operator|=
name|BasePanelMode
operator|.
name|SHOWING_NOTHING
expr_stmt|;
name|splitPane
operator|.
name|getItems
argument_list|()
operator|.
name|removeAll
argument_list|(
name|entryEditor
argument_list|,
name|preview
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method selects the given entry, and scrolls it into view in the table. If an entryEditor is shown, it is      * given focus afterwards.      */
end_comment

begin_function
DECL|method|clearAndSelect (final BibEntry bibEntry)
specifier|public
name|void
name|clearAndSelect
parameter_list|(
specifier|final
name|BibEntry
name|bibEntry
parameter_list|)
block|{
name|mainTable
operator|.
name|clearAndSelect
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|selectPreviousEntry ()
specifier|public
name|void
name|selectPreviousEntry
parameter_list|()
block|{
name|mainTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearAndSelect
argument_list|(
name|mainTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|selectNextEntry ()
specifier|public
name|void
name|selectNextEntry
parameter_list|()
block|{
name|mainTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|clearAndSelect
argument_list|(
name|mainTable
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method is called from an EntryEditor when it should be closed. We relay to the selection listener, which      * takes care of the rest.      *      * @param editor The entry editor to close.      */
end_comment

begin_function
DECL|method|entryEditorClosing (EntryEditor editor)
specifier|public
name|void
name|entryEditorClosing
parameter_list|(
name|EntryEditor
name|editor
parameter_list|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|isPreviewPanelEnabled
argument_list|()
condition|)
block|{
name|showPreview
argument_list|(
name|editor
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|closeBottomPane
argument_list|()
expr_stmt|;
block|}
name|mainTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Closes the entry editor or preview panel if it is showing the given entry.      */
end_comment

begin_function
DECL|method|ensureNotShowingBottomPanel (BibEntry entry)
specifier|public
name|void
name|ensureNotShowingBottomPanel
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
operator|)
operator|&&
operator|(
name|entryEditor
operator|.
name|getEntry
argument_list|()
operator|==
name|entry
operator|)
operator|)
operator|||
operator|(
operator|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
operator|)
operator|&&
operator|(
name|preview
operator|.
name|getEntry
argument_list|()
operator|==
name|entry
operator|)
operator|)
condition|)
block|{
name|closeBottomPane
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|updateEntryEditorIfShowing ()
specifier|public
name|void
name|updateEntryEditorIfShowing
parameter_list|()
block|{
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|BibEntry
name|currentEntry
init|=
name|entryEditor
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|showAndEdit
argument_list|(
name|currentEntry
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|markBaseChanged ()
specifier|public
name|void
name|markBaseChanged
parameter_list|()
block|{
name|baseChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|markBasedChangedInternal
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|SwingUtilities
operator|.
name|invokeAndWait
argument_list|(
parameter_list|()
lambda|->
name|markBasedChangedInternal
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Problem marking database as changed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|markBasedChangedInternal ()
specifier|private
name|void
name|markBasedChangedInternal
parameter_list|()
block|{
comment|// Put an asterisk behind the filename to indicate the database has changed.
name|frame
operator|.
name|setWindowTitle
argument_list|()
expr_stmt|;
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
name|frame
operator|::
name|updateAllTabTitles
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|markNonUndoableBaseChanged ()
specifier|public
name|void
name|markNonUndoableBaseChanged
parameter_list|()
block|{
name|nonUndoableChange
operator|=
literal|true
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|markChangedOrUnChanged ()
specifier|private
specifier|synchronized
name|void
name|markChangedOrUnChanged
parameter_list|()
block|{
if|if
condition|(
name|getUndoManager
argument_list|()
operator|.
name|hasChanged
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|baseChanged
condition|)
block|{
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|baseChanged
operator|&&
operator|!
name|nonUndoableChange
condition|)
block|{
name|baseChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|frame
operator|.
name|setTabTitle
argument_list|(
name|this
argument_list|,
name|getTabTitle
argument_list|()
argument_list|,
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|setTabTitle
argument_list|(
name|this
argument_list|,
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|frame
operator|.
name|setWindowTitle
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getDatabase ()
specifier|public
name|BibDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|bibDatabaseContext
operator|.
name|getDatabase
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|showDeleteConfirmationDialog (int numberOfEntries)
specifier|public
name|boolean
name|showDeleteConfirmationDialog
parameter_list|(
name|int
name|numberOfEntries
parameter_list|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CONFIRM_DELETE
argument_list|)
condition|)
block|{
name|String
name|title
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Really delete the selected entry?"
argument_list|)
decl_stmt|;
name|String
name|okButton
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
decl_stmt|;
name|String
name|cancelButton
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Keep entry"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberOfEntries
operator|>
literal|1
condition|)
block|{
name|title
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete multiple entries"
argument_list|)
expr_stmt|;
name|message
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Really delete the %0 selected entries?"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numberOfEntries
argument_list|)
argument_list|)
expr_stmt|;
name|okButton
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete entries"
argument_list|)
expr_stmt|;
name|cancelButton
operator|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Keep entries"
argument_list|)
expr_stmt|;
block|}
return|return
name|dialogService
operator|.
name|showConfirmationDialogWithOptOutAndWait
argument_list|(
name|title
argument_list|,
name|message
argument_list|,
name|okButton
argument_list|,
name|cancelButton
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
name|optOut
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|CONFIRM_DELETE
argument_list|,
operator|!
name|optOut
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Depending on whether a preview or an entry editor is showing, save the current divider location in the correct preference setting.      */
end_comment

begin_function
DECL|method|saveDividerLocation (Number position)
specifier|private
name|void
name|saveDividerLocation
parameter_list|(
name|Number
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_PREVIEW
condition|)
block|{
name|PreviewPreferences
name|previewPreferences
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
operator|.
name|getBuilder
argument_list|()
operator|.
name|withPreviewPanelDividerPosition
argument_list|(
name|position
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|storePreviewPreferences
argument_list|(
name|previewPreferences
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|BasePanelMode
operator|.
name|SHOWING_EDITOR
condition|)
block|{
name|preferences
operator|.
name|setEntryEditorDividerPosition
argument_list|(
name|position
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Perform necessary cleanup when this BasePanel is closed.      */
end_comment

begin_function
DECL|method|cleanUp ()
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|unregister
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Get an array containing the currently selected entries. The array is stable and not changed if the selection      * changes      *      * @return A list containing the selected entries. Is never null.      */
end_comment

begin_function
DECL|method|getSelectedEntries ()
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSelectedEntries
parameter_list|()
block|{
return|return
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
return|;
block|}
end_function

begin_function
DECL|method|getBibDatabaseContext ()
specifier|public
name|BibDatabaseContext
name|getBibDatabaseContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bibDatabaseContext
return|;
block|}
end_function

begin_function
DECL|method|markExternalChangesAsResolved ()
specifier|public
name|void
name|markExternalChangesAsResolved
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|markExternalChangesAsResolved
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getSidePaneManager ()
specifier|public
name|SidePaneManager
name|getSidePaneManager
parameter_list|()
block|{
return|return
name|sidePaneManager
return|;
block|}
end_function

begin_function
DECL|method|setNonUndoableChange (boolean nonUndoableChange)
specifier|public
name|void
name|setNonUndoableChange
parameter_list|(
name|boolean
name|nonUndoableChange
parameter_list|)
block|{
name|this
operator|.
name|nonUndoableChange
operator|=
name|nonUndoableChange
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setBaseChanged (boolean baseChanged)
specifier|public
name|void
name|setBaseChanged
parameter_list|(
name|boolean
name|baseChanged
parameter_list|)
block|{
name|this
operator|.
name|baseChanged
operator|=
name|baseChanged
expr_stmt|;
block|}
end_function

begin_function
DECL|method|isSaving ()
specifier|public
name|boolean
name|isSaving
parameter_list|()
block|{
return|return
name|saving
return|;
block|}
end_function

begin_function
DECL|method|setSaving (boolean saving)
specifier|public
name|void
name|setSaving
parameter_list|(
name|boolean
name|saving
parameter_list|)
block|{
name|this
operator|.
name|saving
operator|=
name|saving
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getShowing ()
specifier|private
name|BibEntry
name|getShowing
parameter_list|()
block|{
return|return
name|showing
return|;
block|}
end_function

begin_function
DECL|method|formatOutputMessage (String start, int count)
specifier|public
name|String
name|formatOutputMessage
parameter_list|(
name|String
name|start
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s %d %s."
argument_list|,
name|start
argument_list|,
name|count
argument_list|,
operator|(
name|count
operator|>
literal|1
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
name|Localization
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|setPreviewActive (boolean enabled)
specifier|private
name|void
name|setPreviewActive
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|showPreview
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|preview
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|getUndoManager ()
specifier|public
name|CountingUndoManager
name|getUndoManager
parameter_list|()
block|{
return|return
name|undoManager
return|;
block|}
end_function

begin_function
DECL|method|getMainTable ()
specifier|public
name|MainTable
name|getMainTable
parameter_list|()
block|{
return|return
name|mainTable
return|;
block|}
end_function

begin_function
DECL|method|getCurrentSearchQuery ()
specifier|public
name|Optional
argument_list|<
name|SearchQuery
argument_list|>
name|getCurrentSearchQuery
parameter_list|()
block|{
return|return
name|currentSearchQuery
return|;
block|}
end_function

begin_comment
comment|/**      * Set the query the user currently searches while this basepanel is active      *      * @param currentSearchQuery can be null      */
end_comment

begin_function
DECL|method|setCurrentSearchQuery (SearchQuery currentSearchQuery)
specifier|public
name|void
name|setCurrentSearchQuery
parameter_list|(
name|SearchQuery
name|currentSearchQuery
parameter_list|)
block|{
name|this
operator|.
name|currentSearchQuery
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|currentSearchQuery
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getCitationStyleCache ()
specifier|public
name|CitationStyleCache
name|getCitationStyleCache
parameter_list|()
block|{
return|return
name|citationStyleCache
return|;
block|}
end_function

begin_function
DECL|method|getPreviewPanel ()
specifier|public
name|PreviewPanel
name|getPreviewPanel
parameter_list|()
block|{
return|return
name|preview
return|;
block|}
end_function

begin_function
DECL|method|getAnnotationCache ()
specifier|public
name|FileAnnotationCache
name|getAnnotationCache
parameter_list|()
block|{
return|return
name|annotationCache
return|;
block|}
end_function

begin_function
DECL|method|resetChangeMonitorAndChangePane ()
specifier|public
name|void
name|resetChangeMonitorAndChangePane
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|unregister
argument_list|)
expr_stmt|;
name|changeMonitor
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|DatabaseChangeMonitor
argument_list|(
name|bibDatabaseContext
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|,
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|)
argument_list|)
expr_stmt|;
name|changePane
operator|=
operator|new
name|DatabaseChangePane
argument_list|(
name|splitPane
argument_list|,
name|bibDatabaseContext
argument_list|,
name|changeMonitor
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|changePane
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|updateTimeStamp ()
specifier|public
name|void
name|updateTimeStamp
parameter_list|()
block|{
name|changeMonitor
operator|.
name|ifPresent
argument_list|(
name|DatabaseChangeMonitor
operator|::
name|markAsSaved
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|copy ()
specifier|public
name|void
name|copy
parameter_list|()
block|{
name|mainTable
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|paste ()
specifier|public
name|void
name|paste
parameter_list|()
block|{
name|mainTable
operator|.
name|paste
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|cut ()
specifier|public
name|void
name|cut
parameter_list|()
block|{
name|mainTable
operator|.
name|cut
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|SearchAndOpenFile
specifier|private
specifier|static
class|class
name|SearchAndOpenFile
block|{
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|basePanel
specifier|private
specifier|final
name|BasePanel
name|basePanel
decl_stmt|;
DECL|method|SearchAndOpenFile (final BibEntry entry, final BasePanel basePanel)
specifier|public
name|SearchAndOpenFile
parameter_list|(
specifier|final
name|BibEntry
name|entry
parameter_list|,
specifier|final
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|basePanel
operator|=
name|basePanel
expr_stmt|;
block|}
DECL|method|searchAndOpen ()
specifier|public
name|void
name|searchAndOpen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|RUN_AUTOMATIC_FILE_SEARCH
argument_list|)
condition|)
block|{
comment|/*  The search can lead to an unexpected 100% CPU usage which is perceived                     as a bug, if the search incidentally starts at a directory with lots                     of stuff below. It is now disabled by default. */
return|return;
block|}
specifier|final
name|Set
argument_list|<
name|ExternalFileType
argument_list|>
name|types
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeSelection
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getFileDirectoriesAsPaths
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
name|types
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ExternalFileType
operator|::
name|getExtension
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run the search operation:
name|FileFinder
name|fileFinder
init|=
name|FileFinders
operator|.
name|constructFromConfiguration
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getAutoLinkPreferences
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|fileFinder
operator|.
name|findAssociatedFiles
argument_list|(
name|entry
argument_list|,
name|dirs
argument_list|,
name|extensions
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|file
init|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|type
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
name|file
argument_list|,
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problems with finding/or opening files "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|GroupTreeListener
specifier|private
class|class
name|GroupTreeListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryAddedEvent addedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryAddedEvent
name|addedEntryEvent
parameter_list|)
block|{
comment|// if the added entry is an undo don't add it to the current group
if|if
condition|(
name|addedEntryEvent
operator|.
name|getEntryEventSource
argument_list|()
operator|==
name|EntryEventSource
operator|.
name|UNDO
condition|)
block|{
return|return;
block|}
comment|// Automatically add new entry to the selected group (or set of groups)
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|addedEntryEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|stateManager
operator|.
name|getSelectedGroup
argument_list|(
name|bibDatabaseContext
argument_list|)
operator|.
name|forEach
argument_list|(
name|selectedGroup
lambda|->
name|selectedGroup
operator|.
name|addEntriesToGroup
argument_list|(
name|entries
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|EntryRemovedListener
specifier|private
class|class
name|EntryRemovedListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryRemovedEvent entryRemovedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryRemovedEvent
name|entryRemovedEvent
parameter_list|)
block|{
name|ensureNotShowingBottomPanel
argument_list|(
name|entryRemovedEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Ensures that the search auto completer is up to date when entries are changed AKA Let the auto completer, if any,      * harvest words from the entry      * Actual methods for autocomplete indexing  must run in javafx thread      */
end_comment

begin_class
DECL|class|SearchAutoCompleteListener
specifier|private
class|class
name|SearchAutoCompleteListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryAddedEvent addedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryAddedEvent
name|addedEntryEvent
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|searchAutoCompleter
operator|.
name|indexEntry
argument_list|(
name|addedEntryEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryChangedEvent entryChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryChangedEvent
name|entryChangedEvent
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|searchAutoCompleter
operator|.
name|indexEntry
argument_list|(
name|entryChangedEvent
operator|.
name|getBibEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**      * Ensures that the results of the current search are updated when a new entry is inserted into the database      * Actual methods for performing search must run in javafx thread      */
end_comment

begin_class
DECL|class|SearchListener
specifier|private
class|class
name|SearchListener
block|{
annotation|@
name|Subscribe
DECL|method|listen (EntryAddedEvent addedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryAddedEvent
name|addedEntryEvent
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|performSearch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryChangedEvent entryChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryChangedEvent
name|entryChangedEvent
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|performSearch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryRemovedEvent removedEntryEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryRemovedEvent
name|removedEntryEvent
parameter_list|)
block|{
comment|// IMO only used to update the status (found X entries)
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|performSearch
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
annotation|@
name|Subscribe
DECL|method|listen (EntryChangedEvent entryChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryChangedEvent
name|entryChangedEvent
parameter_list|)
block|{
name|this
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
DECL|class|UndoAction
specifier|private
class|class
name|UndoAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|getUndoManager
argument_list|()
operator|.
name|undo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Undo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotUndoException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Nothing to undo"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Nothing to undo"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|OpenURLAction
specifier|private
class|class
name|OpenURLAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|mainTable
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|bes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|field
init|=
name|FieldName
operator|.
name|DOI
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|link
init|=
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|)
decl_stmt|;
if|if
condition|(
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|hasField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
condition|)
block|{
name|link
operator|=
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
expr_stmt|;
name|field
operator|=
name|FieldName
operator|.
name|URL
expr_stmt|;
block|}
if|if
condition|(
name|link
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|bibDatabaseContext
argument_list|,
name|link
operator|.
name|get
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No URL or DOI found in the "url" and "doi" fields.
comment|// Look for web links in the "file" field as a fallback:
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|files
init|=
name|bes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFiles
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|LinkedFile
argument_list|>
name|linkedFile
init|=
name|files
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|file
lambda|->
operator|(
name|FieldName
operator|.
name|URL
operator|.
name|equalsIgnoreCase
argument_list|(
name|file
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|||
name|FieldName
operator|.
name|PS
operator|.
name|equalsIgnoreCase
argument_list|(
name|file
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|||
name|FieldName
operator|.
name|PDF
operator|.
name|equalsIgnoreCase
argument_list|(
name|file
operator|.
name|getFileType
argument_list|()
argument_list|)
operator|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|linkedFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
name|bibDatabaseContext
argument_list|,
name|linkedFile
operator|.
name|get
argument_list|()
operator|.
name|getLink
argument_list|()
argument_list|,
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|fromLinkedFile
argument_list|(
name|linkedFile
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"External viewer called"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not open link"
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Could not open link"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No URL defined"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires exactly one item to be selected."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|RedoAction
specifier|private
class|class
name|RedoAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
try|try
block|{
name|getUndoManager
argument_list|()
operator|.
name|redo
argument_list|()
expr_stmt|;
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Redo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CannotRedoException
name|ex
parameter_list|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Nothing to redo"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|markChangedOrUnChanged
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
DECL|class|PrintPreviewAction
specifier|private
class|class
name|PrintPreviewAction
implements|implements
name|BaseAction
block|{
annotation|@
name|Override
DECL|method|action ()
specifier|public
name|void
name|action
parameter_list|()
block|{
name|showPreview
argument_list|()
expr_stmt|;
name|preview
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

