begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.bibtexextractor
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|bibtexextractor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|StandardEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_class
DECL|class|BibtexExtractor
specifier|public
class|class
name|BibtexExtractor
block|{
DECL|field|authorTag
specifier|private
specifier|static
specifier|final
name|String
name|authorTag
init|=
literal|"[author_tag]"
decl_stmt|;
DECL|field|urlTag
specifier|private
specifier|static
specifier|final
name|String
name|urlTag
init|=
literal|"[url_tag]"
decl_stmt|;
DECL|field|yearTag
specifier|private
specifier|static
specifier|final
name|String
name|yearTag
init|=
literal|"[year_tag]"
decl_stmt|;
DECL|field|pagesTag
specifier|private
specifier|static
specifier|final
name|String
name|pagesTag
init|=
literal|"[pages_tag]"
decl_stmt|;
DECL|field|titleTag
specifier|private
specifier|static
specifier|final
name|String
name|titleTag
init|=
literal|"[title_tag]"
decl_stmt|;
DECL|field|journalTag
specifier|private
specifier|static
specifier|final
name|String
name|journalTag
init|=
literal|"[journal_tag]"
decl_stmt|;
DECL|field|INITIALS_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|INITIALS_GROUP
init|=
literal|"INITIALS"
decl_stmt|;
DECL|field|LASTNAME_GROUP
specifier|private
specifier|static
specifier|final
name|String
name|LASTNAME_GROUP
init|=
literal|"LASTNAME"
decl_stmt|;
DECL|field|URL_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|URL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?:^|[\\W])((ht|f)tp(s?):\\/\\/|www\\.)"
operator|+
literal|"(([\\w\\-]+\\.)+?([\\w\\-.~]+\\/?)*"
operator|+
literal|"[\\p{Alnum}.,%_=?&#\\-+()\\[\\]\\*$~@!:/{};']*)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|YEAR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|YEAR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d{4}"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|AUTHOR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|AUTHOR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<"
operator|+
name|LASTNAME_GROUP
operator|+
literal|">\\p{Lu}\\w+),?\\s(?<"
operator|+
name|INITIALS_GROUP
operator|+
literal|">(\\p{Lu}\\.\\s){1,2})"
operator|+
literal|"\\s*(and|,|\\.)*"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|AUTHOR_PATTERN_2
specifier|private
specifier|static
specifier|final
name|Pattern
name|AUTHOR_PATTERN_2
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<"
operator|+
name|INITIALS_GROUP
operator|+
literal|">(\\p{Lu}\\.\\s){1,2})(?<"
operator|+
name|LASTNAME_GROUP
operator|+
literal|">\\p{Lu}\\w+)"
operator|+
literal|"\\s*(and|,|\\.)*"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|PAGES_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|PAGES_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(p.)?\\s?\\d+(-\\d+)?"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
DECL|field|urls
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|authors
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|authors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|year
specifier|private
name|String
name|year
init|=
literal|""
decl_stmt|;
DECL|field|pages
specifier|private
name|String
name|pages
init|=
literal|""
decl_stmt|;
DECL|field|title
specifier|private
name|String
name|title
init|=
literal|""
decl_stmt|;
DECL|field|isArticle
specifier|private
name|boolean
name|isArticle
init|=
literal|true
decl_stmt|;
DECL|field|journalOrPublisher
specifier|private
name|String
name|journalOrPublisher
init|=
literal|""
decl_stmt|;
DECL|method|extract (String input)
specifier|public
name|BibEntry
name|extract
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|inputWithoutUrls
init|=
name|findUrls
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|String
name|inputWithoutAuthors
init|=
name|findAuthors
argument_list|(
name|inputWithoutUrls
argument_list|)
decl_stmt|;
name|String
name|inputWithoutYear
init|=
name|findYear
argument_list|(
name|inputWithoutAuthors
argument_list|)
decl_stmt|;
name|String
name|inputWithoutPages
init|=
name|findPages
argument_list|(
name|inputWithoutYear
argument_list|)
decl_stmt|;
name|String
name|nonparsed
init|=
name|findParts
argument_list|(
name|inputWithoutPages
argument_list|)
decl_stmt|;
return|return
name|generateEntity
argument_list|(
name|nonparsed
argument_list|)
return|;
block|}
DECL|method|generateEntity (String input)
specifier|private
name|BibEntry
name|generateEntity
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|EntryType
name|type
init|=
name|isArticle
condition|?
name|StandardEntryType
operator|.
name|Article
else|:
name|StandardEntryType
operator|.
name|Book
decl_stmt|;
name|BibEntry
name|extractedEntity
init|=
operator|new
name|BibEntry
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|AUTHOR
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|" and "
argument_list|,
name|authors
argument_list|)
argument_list|)
expr_stmt|;
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|URL
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|urls
argument_list|)
argument_list|)
expr_stmt|;
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|YEAR
argument_list|,
name|year
argument_list|)
expr_stmt|;
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PAGES
argument_list|,
name|pages
argument_list|)
expr_stmt|;
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|TITLE
argument_list|,
name|title
argument_list|)
expr_stmt|;
if|if
condition|(
name|isArticle
condition|)
block|{
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|JOURNAL
argument_list|,
name|journalOrPublisher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|PUBLISHER
argument_list|,
name|journalOrPublisher
argument_list|)
expr_stmt|;
block|}
name|extractedEntity
operator|.
name|setField
argument_list|(
name|StandardField
operator|.
name|COMMENT
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|extractedEntity
return|;
block|}
DECL|method|findUrls (String input)
specifier|private
name|String
name|findUrls
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|URL_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|matcher
operator|.
name|start
argument_list|(
literal|1
argument_list|)
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fixSpaces
argument_list|(
name|matcher
operator|.
name|replaceAll
argument_list|(
name|urlTag
argument_list|)
argument_list|)
return|;
block|}
DECL|method|findYear (String input)
specifier|private
name|String
name|findYear
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|YEAR_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|yearCandidate
init|=
name|input
operator|.
name|substring
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|intYearCandidate
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|yearCandidate
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|intYearCandidate
operator|>
literal|1700
operator|)
operator|&&
operator|(
name|intYearCandidate
operator|<=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|)
condition|)
block|{
name|year
operator|=
name|yearCandidate
expr_stmt|;
return|return
name|fixSpaces
argument_list|(
name|input
operator|.
name|replace
argument_list|(
name|year
argument_list|,
name|yearTag
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|input
return|;
block|}
DECL|method|findAuthors (String input)
specifier|private
name|String
name|findAuthors
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|currentInput
init|=
name|findAuthorsByPattern
argument_list|(
name|input
argument_list|,
name|AUTHOR_PATTERN
argument_list|)
decl_stmt|;
return|return
name|findAuthorsByPattern
argument_list|(
name|currentInput
argument_list|,
name|AUTHOR_PATTERN_2
argument_list|)
return|;
block|}
DECL|method|findAuthorsByPattern (String input, Pattern pattern)
specifier|private
name|String
name|findAuthorsByPattern
parameter_list|(
name|String
name|input
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|authors
operator|.
name|add
argument_list|(
name|GenerateAuthor
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
name|LASTNAME_GROUP
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
name|INITIALS_GROUP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fixSpaces
argument_list|(
name|matcher
operator|.
name|replaceAll
argument_list|(
name|authorTag
argument_list|)
argument_list|)
return|;
block|}
DECL|method|GenerateAuthor (String lastName, String initials)
specifier|private
name|String
name|GenerateAuthor
parameter_list|(
name|String
name|lastName
parameter_list|,
name|String
name|initials
parameter_list|)
block|{
return|return
name|lastName
operator|+
literal|", "
operator|+
name|initials
return|;
block|}
DECL|method|findPages (String input)
specifier|private
name|String
name|findPages
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|PAGES_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|pages
operator|=
name|input
operator|.
name|substring
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fixSpaces
argument_list|(
name|matcher
operator|.
name|replaceFirst
argument_list|(
name|pagesTag
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fixSpaces (String input)
specifier|private
name|String
name|fixSpaces
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|replaceAll
argument_list|(
literal|"[,.!?;:]"
argument_list|,
literal|"$0 "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\p{Lt}"
argument_list|,
literal|" $0"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|findParts (String input)
specifier|private
name|String
name|findParts
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lastParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|input
decl_stmt|;
name|int
name|afterAuthorsIndex
init|=
name|input
operator|.
name|lastIndexOf
argument_list|(
name|authorTag
argument_list|)
decl_stmt|;
if|if
condition|(
name|afterAuthorsIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|input
return|;
block|}
else|else
block|{
name|afterAuthorsIndex
operator|+=
name|authorTag
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|int
name|delimiterIndex
init|=
name|input
operator|.
name|lastIndexOf
argument_list|(
literal|"//"
argument_list|)
decl_stmt|;
if|if
condition|(
name|delimiterIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|lastParts
operator|.
name|add
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|afterAuthorsIndex
argument_list|,
name|delimiterIndex
argument_list|)
operator|.
name|replace
argument_list|(
name|yearTag
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
name|pagesTag
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|lastParts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|delimiterIndex
operator|+
literal|2
argument_list|)
operator|.
name|split
argument_list|(
literal|",|\\."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastParts
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|afterAuthorsIndex
argument_list|)
operator|.
name|split
argument_list|(
literal|",|\\."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|nonDigitParts
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|lastParts
control|)
block|{
if|if
condition|(
name|part
operator|.
name|matches
argument_list|(
literal|".*\\d.*"
argument_list|)
condition|)
block|{
break|break;
block|}
name|nonDigitParts
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nonDigitParts
operator|>
literal|0
condition|)
block|{
name|title
operator|=
name|lastParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|line
operator|.
name|replace
argument_list|(
name|title
argument_list|,
name|titleTag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonDigitParts
operator|>
literal|1
condition|)
block|{
name|journalOrPublisher
operator|=
name|lastParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|line
operator|.
name|replace
argument_list|(
name|journalOrPublisher
argument_list|,
name|journalTag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nonDigitParts
operator|>
literal|2
condition|)
block|{
name|isArticle
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|fixSpaces
argument_list|(
name|line
argument_list|)
return|;
block|}
block|}
end_class

end_unit

