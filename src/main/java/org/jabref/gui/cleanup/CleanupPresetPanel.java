begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.cleanup
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|cleanup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|CleanupPreset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|cleanup
operator|.
name|Cleanups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|FilePreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|airhacks
operator|.
name|afterburner
operator|.
name|views
operator|.
name|ViewLoader
import|;
end_import

begin_class
DECL|class|CleanupPresetPanel
specifier|public
class|class
name|CleanupPresetPanel
extends|extends
name|VBox
block|{
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|cleanupRenamePDFLabel
annotation|@
name|FXML
specifier|private
name|Label
name|cleanupRenamePDFLabel
decl_stmt|;
DECL|field|cleanUpDOI
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpDOI
decl_stmt|;
DECL|field|cleanUpEprint
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpEprint
decl_stmt|;
DECL|field|cleanUpISSN
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpISSN
decl_stmt|;
DECL|field|cleanUpMovePDF
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpMovePDF
decl_stmt|;
DECL|field|cleanUpMakePathsRelative
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpMakePathsRelative
decl_stmt|;
DECL|field|cleanUpRenamePDF
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpRenamePDF
decl_stmt|;
DECL|field|cleanUpRenamePDFonlyRelativePaths
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpRenamePDFonlyRelativePaths
decl_stmt|;
DECL|field|cleanUpUpgradeExternalLinks
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpUpgradeExternalLinks
decl_stmt|;
DECL|field|cleanUpBiblatex
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpBiblatex
decl_stmt|;
DECL|field|cleanUpBibtex
annotation|@
name|FXML
specifier|private
name|CheckBox
name|cleanUpBibtex
decl_stmt|;
DECL|field|formatterContainer
annotation|@
name|FXML
specifier|private
name|VBox
name|formatterContainer
decl_stmt|;
DECL|field|cleanUpFormatters
specifier|private
name|FieldFormatterCleanupsPanel
name|cleanUpFormatters
decl_stmt|;
DECL|method|CleanupPresetPanel (BibDatabaseContext databaseContext, CleanupPreset cleanupPreset, FilePreferences filePreferences)
specifier|public
name|CleanupPresetPanel
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|CleanupPreset
name|cleanupPreset
parameter_list|,
name|FilePreferences
name|filePreferences
parameter_list|)
block|{
name|this
operator|.
name|databaseContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
comment|// Load FXML
name|ViewLoader
operator|.
name|view
argument_list|(
name|this
argument_list|)
operator|.
name|root
argument_list|(
name|this
argument_list|)
operator|.
name|load
argument_list|()
expr_stmt|;
name|init
argument_list|(
name|cleanupPreset
argument_list|,
name|filePreferences
argument_list|)
expr_stmt|;
block|}
DECL|method|init (CleanupPreset cleanupPreset, FilePreferences filePreferences)
specifier|private
name|void
name|init
parameter_list|(
name|CleanupPreset
name|cleanupPreset
parameter_list|,
name|FilePreferences
name|filePreferences
parameter_list|)
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|firstExistingDir
init|=
name|databaseContext
operator|.
name|getFirstExistingFileDir
argument_list|(
name|filePreferences
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstExistingDir
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|cleanUpMovePDF
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move linked files to default file directory %0"
argument_list|,
name|firstExistingDir
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cleanUpMovePDF
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move linked files to default file directory %0"
argument_list|,
literal|"..."
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since the directory does not exist, we cannot move it to there. So, this option is not checked - regardless of the presets stored in the preferences.
name|cleanUpMovePDF
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cleanUpMovePDF
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|cleanUpRenamePDF
operator|.
name|selectedProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUpUpgradeExternalLinks
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Upgrade external PDF/PS links to use the '%0' field."
argument_list|,
name|StandardField
operator|.
name|FILE
operator|.
name|getDisplayName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpFormatters
operator|=
operator|new
name|FieldFormatterCleanupsPanel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Run field formatter:"
argument_list|)
argument_list|,
name|Cleanups
operator|.
name|DEFAULT_SAVE_ACTIONS
argument_list|)
expr_stmt|;
name|formatterContainer
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|cleanUpFormatters
argument_list|)
expr_stmt|;
name|String
name|currentPattern
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Filename format pattern"
argument_list|)
operator|.
name|concat
argument_list|(
literal|": "
argument_list|)
operator|.
name|concat
argument_list|(
name|filePreferences
operator|.
name|getFileNamePattern
argument_list|()
argument_list|)
decl_stmt|;
name|cleanupRenamePDFLabel
operator|.
name|setText
argument_list|(
name|currentPattern
argument_list|)
expr_stmt|;
name|updateDisplay
argument_list|(
name|cleanupPreset
argument_list|)
expr_stmt|;
block|}
DECL|method|updateDisplay (CleanupPreset preset)
specifier|private
name|void
name|updateDisplay
parameter_list|(
name|CleanupPreset
name|preset
parameter_list|)
block|{
name|cleanUpDOI
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpEprint
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEANUP_EPRINT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cleanUpMovePDF
operator|.
name|isDisabled
argument_list|()
condition|)
block|{
name|cleanUpMovePDF
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|MOVE_PDF
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cleanUpMakePathsRelative
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|MAKE_PATHS_RELATIVE
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpRenamePDF
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isRenamePDFActive
argument_list|()
argument_list|)
expr_stmt|;
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpUpgradeExternalLinks
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_UPGRADE_EXTERNAL_LINKS
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpBiblatex
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBLATEX
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpBibtex
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpISSN
operator|.
name|setSelected
argument_list|(
name|preset
operator|.
name|isActive
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_ISSN
argument_list|)
argument_list|)
expr_stmt|;
name|cleanUpFormatters
operator|.
name|setValues
argument_list|(
name|preset
operator|.
name|getFormatterCleanups
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCleanupPreset ()
specifier|public
name|CleanupPreset
name|getCleanupPreset
parameter_list|()
block|{
name|Set
argument_list|<
name|CleanupPreset
operator|.
name|CleanupStep
argument_list|>
name|activeJobs
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanUpMovePDF
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|MOVE_PDF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpDOI
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_DOI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpEprint
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEANUP_EPRINT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpISSN
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_ISSN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpMakePathsRelative
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|MAKE_PATHS_RELATIVE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpRenamePDF
operator|.
name|isSelected
argument_list|()
condition|)
block|{
if|if
condition|(
name|cleanUpRenamePDFonlyRelativePaths
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|RENAME_PDF_ONLY_RELATIVE_PATHS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|RENAME_PDF
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cleanUpUpgradeExternalLinks
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CLEAN_UP_UPGRADE_EXTERNAL_LINKS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpBiblatex
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBLATEX
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cleanUpBibtex
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|CONVERT_TO_BIBTEX
argument_list|)
expr_stmt|;
block|}
name|activeJobs
operator|.
name|add
argument_list|(
name|CleanupPreset
operator|.
name|CleanupStep
operator|.
name|FIX_FILE_LINKS
argument_list|)
expr_stmt|;
return|return
operator|new
name|CleanupPreset
argument_list|(
name|activeJobs
argument_list|,
name|cleanUpFormatters
operator|.
name|getFormatterCleanups
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

