begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.copyfiles
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|copyfiles
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CopyFilesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|LinkedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|OptionalUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CopyFilesTask
specifier|public
class|class
name|CopyFilesTask
extends|extends
name|Task
argument_list|<
name|List
argument_list|<
name|CopyFilesResultItemViewModel
argument_list|>
argument_list|>
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CopyFilesAction
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LOGFILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOGFILE_PREFIX
init|=
literal|"copyFileslog_"
decl_stmt|;
DECL|field|LOGFILE_EXT
specifier|private
specifier|static
specifier|final
name|String
name|LOGFILE_EXT
init|=
literal|".log"
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|field|exportPath
specifier|private
specifier|final
name|Path
name|exportPath
decl_stmt|;
DECL|field|localizedSucessMessage
specifier|private
specifier|final
name|String
name|localizedSucessMessage
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied file successfully"
argument_list|)
decl_stmt|;
DECL|field|localizedErrorMessage
specifier|private
specifier|final
name|String
name|localizedErrorMessage
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not copy file"
argument_list|)
operator|+
literal|": "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"File exists"
argument_list|)
decl_stmt|;
DECL|field|totalFilesCount
specifier|private
specifier|final
name|long
name|totalFilesCount
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|results
specifier|private
specifier|final
name|List
argument_list|<
name|CopyFilesResultItemViewModel
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|newPath
specifier|private
name|Optional
argument_list|<
name|Path
argument_list|>
name|newPath
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|numberSucessful
specifier|private
name|int
name|numberSucessful
decl_stmt|;
DECL|field|totalFilesCounter
specifier|private
name|int
name|totalFilesCounter
decl_stmt|;
DECL|field|resolvePathFilename
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|Path
argument_list|,
name|Path
argument_list|,
name|Path
argument_list|>
name|resolvePathFilename
init|=
parameter_list|(
name|path
parameter_list|,
name|file
parameter_list|)
lambda|->
block|{
return|return
name|path
operator|.
name|resolve
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
return|;
block|}
decl_stmt|;
DECL|method|CopyFilesTask (BibDatabaseContext databaseContext, List<BibEntry> entries, Path path)
specifier|public
name|CopyFilesTask
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|databaseContext
operator|=
name|databaseContext
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|exportPath
operator|=
name|path
expr_stmt|;
name|totalFilesCount
operator|=
name|entries
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getFiles
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|protected
name|List
argument_list|<
name|CopyFilesResultItemViewModel
argument_list|>
name|call
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|updateMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copying files..."
argument_list|)
argument_list|)
expr_stmt|;
name|updateProgress
argument_list|(
literal|0
argument_list|,
name|totalFilesCount
argument_list|)
expr_stmt|;
name|LocalDateTime
name|currentTime
init|=
name|LocalDateTime
operator|.
name|now
argument_list|()
decl_stmt|;
name|String
name|currentDate
init|=
name|currentTime
operator|.
name|format
argument_list|(
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"yyyy-MM-dd-HH-mm-ss"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|bw
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|exportPath
operator|.
name|resolve
argument_list|(
name|LOGFILE_PREFIX
operator|+
name|currentDate
operator|+
name|LOGFILE_EXT
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
break|break;
block|}
name|List
argument_list|<
name|LinkedFile
argument_list|>
name|files
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
break|break;
block|}
name|updateMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copying file %0 of entry %1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
operator|+
literal|1
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LinkedFile
name|fileName
init|=
name|files
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|fileToExport
init|=
name|fileName
operator|.
name|findIn
argument_list|(
name|databaseContext
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getFilePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|newPath
operator|=
name|OptionalUtil
operator|.
name|combine
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|exportPath
argument_list|)
argument_list|,
name|fileToExport
argument_list|,
name|resolvePathFilename
argument_list|)
expr_stmt|;
if|if
condition|(
name|newPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Path
name|newFile
init|=
name|newPath
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|FileUtil
operator|.
name|copyFile
argument_list|(
name|fileToExport
operator|.
name|get
argument_list|()
argument_list|,
name|newFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|updateProgress
argument_list|(
name|totalFilesCounter
operator|++
argument_list|,
name|totalFilesCount
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isCancelled
argument_list|()
condition|)
block|{
name|updateMessage
argument_list|(
literal|"Cancelled"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
name|updateMessage
argument_list|(
name|localizedSucessMessage
argument_list|)
expr_stmt|;
name|numberSucessful
operator|++
expr_stmt|;
name|writeLogMessage
argument_list|(
name|newFile
argument_list|,
name|bw
argument_list|,
name|localizedSucessMessage
argument_list|)
expr_stmt|;
name|addResultToList
argument_list|(
name|newFile
argument_list|,
name|success
argument_list|,
name|localizedSucessMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateMessage
argument_list|(
name|localizedErrorMessage
argument_list|)
expr_stmt|;
name|writeLogMessage
argument_list|(
name|newFile
argument_list|,
name|bw
argument_list|,
name|localizedErrorMessage
argument_list|)
expr_stmt|;
name|addResultToList
argument_list|(
name|newFile
argument_list|,
name|success
argument_list|,
name|localizedErrorMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|updateMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Finished copying"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sucessMessage
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied %0 files of %1 sucessfully to %2"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numberSucessful
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|totalFilesCounter
argument_list|)
argument_list|,
name|newPath
operator|.
name|map
argument_list|(
name|Path
operator|::
name|getParent
argument_list|)
operator|.
name|map
argument_list|(
name|Path
operator|::
name|toString
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|updateMessage
argument_list|(
name|sucessMessage
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|sucessMessage
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
DECL|method|writeLogMessage (Path newFile, BufferedWriter bw, String logMessage)
specifier|private
name|void
name|writeLogMessage
parameter_list|(
name|Path
name|newFile
parameter_list|,
name|BufferedWriter
name|bw
parameter_list|,
name|String
name|logMessage
parameter_list|)
block|{
try|try
block|{
name|bw
operator|.
name|write
argument_list|(
name|logMessage
operator|+
literal|": "
operator|+
name|newFile
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"error writing log file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addResultToList (Path newFile, boolean success, String logMessage)
specifier|private
name|void
name|addResultToList
parameter_list|(
name|Path
name|newFile
parameter_list|,
name|boolean
name|success
parameter_list|,
name|String
name|logMessage
parameter_list|)
block|{
name|CopyFilesResultItemViewModel
name|result
init|=
operator|new
name|CopyFilesResultItemViewModel
argument_list|(
name|newFile
argument_list|,
name|success
argument_list|,
name|logMessage
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

