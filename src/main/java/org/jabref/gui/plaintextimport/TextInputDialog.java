begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.plaintextimport
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|plaintextimport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|DefaultListCellRenderer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|TitledBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ListSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|EditorKit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Style
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyleConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyleContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|StyledDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|ClipBoardManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|EntryMarker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FXDialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|OSXCompatibleToolbar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|OverlayPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|BibEntryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|FreeCiteImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * import from plain text => simple mark/copy/paste into bibtex entry  *<p>  * TODO  * - change colors and fonts  * - delete selected text  * - make textarea editable  * - create several bibtex entries in dialog  * - if the dialog works with an existing entry (right click menu item), the cancel option doesn't work well  */
end_comment

begin_class
DECL|class|TextInputDialog
specifier|public
class|class
name|TextInputDialog
extends|extends
name|JabRefDialog
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TextInputDialog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|okButton
specifier|private
specifier|final
name|JButton
name|okButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|cancelButton
specifier|private
specifier|final
name|JButton
name|cancelButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|insertButton
specifier|private
specifier|final
name|JButton
name|insertButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|parseWithFreeCiteButton
specifier|private
specifier|final
name|JButton
name|parseWithFreeCiteButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Parse with FreeCite"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|panel1
specifier|private
specifier|final
name|JPanel
name|panel1
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|buttons
specifier|private
specifier|final
name|JPanel
name|buttons
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|rawPanel
specifier|private
specifier|final
name|JPanel
name|rawPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|sourcePanel
specifier|private
specifier|final
name|JPanel
name|sourcePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|fieldList
specifier|private
name|JList
argument_list|<
name|String
argument_list|>
name|fieldList
decl_stmt|;
DECL|field|override
specifier|private
specifier|final
name|JRadioButton
name|override
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Override"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|append
specifier|private
specifier|final
name|JRadioButton
name|append
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|toolBar
specifier|private
specifier|final
name|JToolBar
name|toolBar
init|=
operator|new
name|OSXCompatibleToolbar
argument_list|()
decl_stmt|;
DECL|field|allFields
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|requiredFields
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|requiredFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|optionalFields
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|optionalFields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|inputMenu
specifier|private
specifier|final
name|JPopupMenu
name|inputMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|document
specifier|private
name|StyledDocument
name|document
decl_stmt|;
comment|// content from inputPane
DECL|field|textPane
specifier|private
specifier|final
name|JTextPane
name|textPane
init|=
operator|new
name|JTextPane
argument_list|()
decl_stmt|;
DECL|field|sourcePreview
specifier|private
specifier|final
name|JTextArea
name|sourcePreview
init|=
operator|new
name|JTextArea
argument_list|()
decl_stmt|;
DECL|field|markedTextStore
specifier|private
specifier|final
name|TagToMarkedTextStore
name|markedTextStore
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|okPressed
specifier|private
name|boolean
name|okPressed
decl_stmt|;
DECL|method|TextInputDialog (JabRefFrame frame, BibEntry bibEntry)
specifier|public
name|TextInputDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BibEntry
name|bibEntry
parameter_list|)
block|{
name|super
argument_list|(
name|frame
argument_list|,
literal|true
argument_list|,
name|TextInputDialog
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|entry
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
name|markedTextStore
operator|=
operator|new
name|TagToMarkedTextStore
argument_list|()
expr_stmt|;
name|jbInit
argument_list|()
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|updateSourceView
argument_list|()
expr_stmt|;
block|}
DECL|method|jbInit ()
specifier|private
name|void
name|jbInit
parameter_list|()
block|{
name|getContentPane
argument_list|()
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|typeStr
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Plain text import"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|typeStr
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"for"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setTitle
argument_list|(
name|typeStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|panel1
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|initRawPanel
argument_list|()
expr_stmt|;
name|initButtonPanel
argument_list|()
expr_stmt|;
name|initSourcePanel
argument_list|()
expr_stmt|;
name|JTabbedPane
name|tabbed
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|add
argument_list|(
name|rawPanel
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Raw source"
argument_list|)
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|add
argument_list|(
name|sourcePanel
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 source"
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Panel Layout
name|panel1
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|panel1
operator|.
name|add
argument_list|(
name|tabbed
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|panel1
operator|.
name|add
argument_list|(
name|buttons
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// Key bindings:
name|ActionMap
name|am
init|=
name|buttons
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|buttons
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DIALOG
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Panel with text import functionality
DECL|method|initRawPanel ()
specifier|private
name|void
name|initRawPanel
parameter_list|()
block|{
name|rawPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Textarea
name|textPane
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|document
operator|=
name|textPane
operator|.
name|getStyledDocument
argument_list|()
expr_stmt|;
name|addStylesToDocument
argument_list|()
expr_stmt|;
try|try
block|{
name|document
operator|.
name|insertString
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|,
name|document
operator|.
name|getStyle
argument_list|(
literal|"regular"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem setting style"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|OverlayPanel
name|testPanel
init|=
operator|new
name|OverlayPanel
argument_list|(
name|textPane
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"paste text here"
argument_list|)
argument_list|)
decl_stmt|;
name|testPanel
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|450
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|testPanel
operator|.
name|setMaximumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|450
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup fields (required to be done before setting up popup menu)
name|fieldList
operator|=
operator|new
name|JList
argument_list|<>
argument_list|(
name|getAllFields
argument_list|()
argument_list|)
expr_stmt|;
name|fieldList
operator|.
name|setCellRenderer
argument_list|(
operator|new
name|SimpleCellRenderer
argument_list|(
name|fieldList
operator|.
name|getFont
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ListSelectionModel
name|listSelectionModel
init|=
name|fieldList
operator|.
name|getSelectionModel
argument_list|()
decl_stmt|;
name|listSelectionModel
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|listSelectionModel
operator|.
name|addListSelectionListener
argument_list|(
operator|new
name|FieldListSelectionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|fieldList
operator|.
name|addMouseListener
argument_list|(
operator|new
name|FieldListMouseListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// After the call to getAllFields
name|initPopupMenuAndToolbar
argument_list|()
expr_stmt|;
comment|//Add listener to components that can bring up popup menus.
name|MouseListener
name|popupListener
init|=
operator|new
name|PopupListener
argument_list|(
name|inputMenu
argument_list|)
decl_stmt|;
name|textPane
operator|.
name|addMouseListener
argument_list|(
name|popupListener
argument_list|)
expr_stmt|;
name|testPanel
operator|.
name|addMouseListener
argument_list|(
name|popupListener
argument_list|)
expr_stmt|;
name|JPanel
name|leftPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
decl_stmt|;
name|leftPanel
operator|.
name|add
argument_list|(
name|toolBar
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|leftPanel
operator|.
name|add
argument_list|(
name|testPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|JPanel
name|inputPanel
init|=
name|setUpFieldListPanel
argument_list|()
decl_stmt|;
comment|// parse with FreeCite button
name|parseWithFreeCiteButton
operator|.
name|addActionListener
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
name|parseWithFreeCiteAndAddEntries
argument_list|()
condition|)
block|{
name|okPressed
operator|=
literal|false
expr_stmt|;
comment|// we do not want to have the super method to handle our entries, we do it on our own
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rawPanel
operator|.
name|add
argument_list|(
name|leftPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|rawPanel
operator|.
name|add
argument_list|(
name|inputPanel
argument_list|,
name|BorderLayout
operator|.
name|EAST
argument_list|)
expr_stmt|;
name|JLabel
name|desc
init|=
operator|new
name|JLabel
argument_list|(
literal|"<html><h3>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Plain text import"
argument_list|)
operator|+
literal|"</h3><p>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"This is a simple copy and paste dialog. First load or paste some text into "
operator|+
literal|"the text input area.<br>After that, you can mark text and assign it to a BibTeX field."
argument_list|)
operator|+
literal|"</p></html>"
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|rawPanel
operator|.
name|add
argument_list|(
name|desc
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpFieldListPanel ()
specifier|private
name|JPanel
name|setUpFieldListPanel
parameter_list|()
block|{
name|JPanel
name|inputPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
comment|// Panel Layout
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|inputPanel
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
comment|// Border
name|TitledBorder
name|titledBorder1
init|=
operator|new
name|TitledBorder
argument_list|(
name|BorderFactory
operator|.
name|createLineBorder
argument_list|(
operator|new
name|Color
argument_list|(
literal|153
argument_list|,
literal|153
argument_list|,
literal|153
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Work options"
argument_list|)
argument_list|)
decl_stmt|;
name|inputPanel
operator|.
name|setBorder
argument_list|(
name|titledBorder1
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|JScrollPane
name|fieldScroller
init|=
operator|new
name|JScrollPane
argument_list|(
name|fieldList
argument_list|)
decl_stmt|;
name|fieldScroller
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|)
expr_stmt|;
comment|// insert buttons
name|insertButton
operator|.
name|addActionListener
argument_list|(
name|event
lambda|->
name|insertTextForTag
argument_list|(
name|override
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Radio buttons
name|append
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append the selected text to BibTeX field"
argument_list|)
argument_list|)
expr_stmt|;
name|append
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_A
argument_list|)
expr_stmt|;
name|append
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|override
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Override the BibTeX field by the selected text"
argument_list|)
argument_list|)
expr_stmt|;
name|override
operator|.
name|setMnemonic
argument_list|(
name|KeyEvent
operator|.
name|VK_O
argument_list|)
expr_stmt|;
name|override
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//Group the radio buttons.
name|ButtonGroup
name|group
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|override
argument_list|)
expr_stmt|;
name|JPanel
name|radioPanel
init|=
operator|new
name|JPanel
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|radioPanel
operator|.
name|add
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|radioPanel
operator|.
name|add
argument_list|(
name|override
argument_list|)
expr_stmt|;
comment|// insert sub components
name|JLabel
name|label1
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Available BibTeX fields"
argument_list|)
argument_list|)
decl_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|label1
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|label1
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|gridheight
operator|=
literal|8
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|fieldScroller
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|fieldScroller
argument_list|)
expr_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|HORIZONTAL
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|2
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|radioPanel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|radioPanel
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|insertButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|inputPanel
operator|.
name|add
argument_list|(
name|insertButton
argument_list|)
expr_stmt|;
return|return
name|inputPanel
return|;
block|}
DECL|method|initPopupMenuAndToolbar ()
specifier|private
name|void
name|initPopupMenuAndToolbar
parameter_list|()
block|{
comment|// copy/paste Menu
name|PasteAction
name|pasteAction
init|=
operator|new
name|PasteAction
argument_list|()
decl_stmt|;
name|ClearAction
name|clearAction
init|=
operator|new
name|ClearAction
argument_list|()
decl_stmt|;
name|JMenuItem
name|pasteMI
init|=
operator|new
name|JMenuItem
argument_list|(
name|pasteAction
argument_list|)
decl_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|clearAction
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|pasteMI
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
comment|// Right-click append/override
name|JMenu
name|appendMenu
init|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append"
argument_list|)
argument_list|)
decl_stmt|;
name|appendMenu
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append the selected text to BibTeX field"
argument_list|)
argument_list|)
expr_stmt|;
name|JMenu
name|overrideMenu
init|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Override"
argument_list|)
argument_list|)
decl_stmt|;
name|overrideMenu
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Override the BibTeX field by the selected text"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|allFields
control|)
block|{
name|appendMenu
operator|.
name|add
argument_list|(
operator|new
name|JMenuItem
argument_list|(
operator|new
name|MenuTextForTagAction
argument_list|(
name|field
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|overrideMenu
operator|.
name|add
argument_list|(
operator|new
name|JMenuItem
argument_list|(
operator|new
name|MenuTextForTagAction
argument_list|(
name|field
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inputMenu
operator|.
name|add
argument_list|(
name|appendMenu
argument_list|)
expr_stmt|;
name|inputMenu
operator|.
name|add
argument_list|(
name|overrideMenu
argument_list|)
expr_stmt|;
comment|// Toolbar
name|toolBar
operator|.
name|add
argument_list|(
name|clearAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setBorderPainted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|pasteAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
operator|new
name|LoadAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initButtonPanel ()
specifier|private
name|void
name|initButtonPanel
parameter_list|()
block|{
name|okButton
operator|.
name|addActionListener
argument_list|(
name|event
lambda|->
block|{
name|okPressed
operator|=
literal|true
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|cancelButton
operator|.
name|addActionListener
argument_list|(
name|event
lambda|->
name|dispose
argument_list|()
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|(
name|buttons
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|parseWithFreeCiteButton
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|cancelButton
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
block|}
comment|// Panel with BibTeX source code
DECL|method|initSourcePanel ()
specifier|private
name|void
name|initSourcePanel
parameter_list|()
block|{
name|sourcePreview
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourcePreview
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Monospaced"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|JScrollPane
name|paneScrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|sourcePreview
argument_list|)
decl_stmt|;
name|paneScrollPane
operator|.
name|setVerticalScrollBarPolicy
argument_list|(
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_ALWAYS
argument_list|)
expr_stmt|;
name|paneScrollPane
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|500
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|paneScrollPane
operator|.
name|setMinimumSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|sourcePanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePanel
operator|.
name|add
argument_list|(
name|paneScrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
DECL|method|addStylesToDocument ()
specifier|private
name|void
name|addStylesToDocument
parameter_list|()
block|{
comment|//Initialize some styles.
name|Style
name|defaultStyle
init|=
name|StyleContext
operator|.
name|getDefaultStyleContext
argument_list|()
operator|.
name|getStyle
argument_list|(
name|StyleContext
operator|.
name|DEFAULT_STYLE
argument_list|)
decl_stmt|;
name|Style
name|regularStyle
init|=
name|document
operator|.
name|addStyle
argument_list|(
literal|"regular"
argument_list|,
name|defaultStyle
argument_list|)
decl_stmt|;
name|StyleConstants
operator|.
name|setFontFamily
argument_list|(
name|defaultStyle
argument_list|,
literal|"SansSerif"
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setFontSize
argument_list|(
name|defaultStyle
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|Style
name|s
init|=
name|document
operator|.
name|addStyle
argument_list|(
literal|"used"
argument_list|,
name|regularStyle
argument_list|)
decl_stmt|;
name|StyleConstants
operator|.
name|setBold
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|s
argument_list|,
name|Color
operator|.
name|blue
argument_list|)
expr_stmt|;
name|s
operator|=
name|document
operator|.
name|addStyle
argument_list|(
literal|"marked"
argument_list|,
name|regularStyle
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setBold
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StyleConstants
operator|.
name|setForeground
argument_list|(
name|s
argument_list|,
name|Color
operator|.
name|red
argument_list|)
expr_stmt|;
block|}
DECL|method|insertTextForTag (boolean overrideField)
specifier|private
name|void
name|insertTextForTag
parameter_list|(
name|boolean
name|overrideField
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|fieldList
operator|.
name|getSelectedValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldName
operator|!=
literal|null
condition|)
block|{
name|String
name|txt
init|=
name|textPane
operator|.
name|getSelectedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|!=
literal|null
condition|)
block|{
name|int
name|selectionStart
init|=
name|textPane
operator|.
name|getSelectionStart
argument_list|()
decl_stmt|;
name|int
name|selectionEnd
init|=
name|textPane
operator|.
name|getSelectionEnd
argument_list|()
decl_stmt|;
comment|// unselect text
name|textPane
operator|.
name|setSelectionEnd
argument_list|(
name|selectionStart
argument_list|)
expr_stmt|;
comment|// mark the selected text as "used"
name|document
operator|.
name|setCharacterAttributes
argument_list|(
name|selectionStart
argument_list|,
name|selectionEnd
operator|-
name|selectionStart
argument_list|,
name|document
operator|.
name|getStyle
argument_list|(
literal|"marked"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// override an existing entry
if|if
condition|(
name|overrideField
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|txt
argument_list|)
expr_stmt|;
comment|// erase old text selection
name|markedTextStore
operator|.
name|setStyleForTag
argument_list|(
name|fieldName
argument_list|,
literal|"regular"
argument_list|,
name|document
argument_list|)
expr_stmt|;
comment|// delete all previous styles
name|markedTextStore
operator|.
name|insertPosition
argument_list|(
name|fieldName
argument_list|,
name|selectionStart
argument_list|,
name|selectionEnd
argument_list|)
expr_stmt|;
comment|// insert new selection style
block|}
else|else
block|{
comment|// memorize the selection for text highlighting
name|markedTextStore
operator|.
name|appendPosition
argument_list|(
name|fieldName
argument_list|,
name|selectionStart
argument_list|,
name|selectionEnd
argument_list|)
expr_stmt|;
comment|// get old text from BibTeX tag
name|Optional
argument_list|<
name|String
argument_list|>
name|old
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// merge old and selected text
if|if
condition|(
name|old
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// insert a new name with an additional "and"
if|if
condition|(
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|fieldName
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PERSON_NAMES
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|old
operator|.
name|get
argument_list|()
operator|+
literal|" and "
operator|+
name|txt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FieldName
operator|.
name|KEYWORDS
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
comment|// Add keyword
name|entry
operator|.
name|addKeyword
argument_list|(
name|txt
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|old
operator|.
name|get
argument_list|()
operator|+
name|txt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// "null"+"txt" Strings forbidden
name|entry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make the new data in BibTeX source code visible
name|updateSourceView
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|okPressed ()
specifier|public
name|boolean
name|okPressed
parameter_list|()
block|{
return|return
name|okPressed
return|;
block|}
comment|/**      * tries to parse the pasted reference with freecite      *      * @return true if successful, false otherwise      */
DECL|method|parseWithFreeCiteAndAddEntries ()
specifier|private
name|boolean
name|parseWithFreeCiteAndAddEntries
parameter_list|()
block|{
name|FreeCiteImporter
name|fimp
init|=
operator|new
name|FreeCiteImporter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|textPane
operator|.
name|getText
argument_list|()
decl_stmt|;
comment|// we have to remove line breaks (but keep empty lines)
comment|// otherwise, the result is broken
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
name|OS
operator|.
name|NEWLINE
operator|.
name|concat
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|,
literal|"##NEWLINE##"
argument_list|)
expr_stmt|;
comment|// possible URL line breaks are removed completely.
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
literal|"/"
operator|.
name|concat
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|)
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
name|OS
operator|.
name|NEWLINE
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|text
operator|=
name|text
operator|.
name|replace
argument_list|(
literal|"##NEWLINE##"
argument_list|,
name|OS
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|ParserResult
name|importerResult
init|=
name|fimp
operator|.
name|importEntries
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|importerResult
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
name|frame
operator|.
name|showMessage
argument_list|(
name|importerResult
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BibEntry
argument_list|>
name|importedEntries
init|=
name|importerResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|importedEntries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|importedEntries
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|markEntries
init|=
name|EntryMarker
operator|.
name|shouldMarkEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|BibEntry
name|e
range|:
name|importedEntries
control|)
block|{
if|if
condition|(
name|markEntries
condition|)
block|{
name|EntryMarker
operator|.
name|markEntry
argument_list|(
name|entry
argument_list|,
name|EntryMarker
operator|.
name|IMPORT_MARK_LEVEL
argument_list|,
literal|false
argument_list|,
operator|new
name|NamedCompound
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|insertEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// update the bibtex source view and available List
DECL|method|updateSourceView ()
specifier|private
name|void
name|updateSourceView
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|BibEntryWriter
argument_list|(
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|write
argument_list|(
name|entry
argument_list|,
name|sw
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|sourcePreview
operator|.
name|setText
argument_list|(
name|sw
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error in entry"
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|fieldList
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
DECL|method|getAllFields ()
specifier|private
name|String
index|[]
name|getAllFields
parameter_list|()
block|{
name|Optional
argument_list|<
name|EntryType
argument_list|>
name|type
init|=
name|EntryTypes
operator|.
name|getType
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|allFields
operator|.
name|addAll
argument_list|(
name|type
operator|.
name|get
argument_list|()
operator|.
name|getAllFields
argument_list|()
argument_list|)
expr_stmt|;
name|requiredFields
operator|.
name|addAll
argument_list|(
name|type
operator|.
name|get
argument_list|()
operator|.
name|getRequiredFieldsFlat
argument_list|()
argument_list|)
expr_stmt|;
name|optionalFields
operator|.
name|addAll
argument_list|(
name|type
operator|.
name|get
argument_list|()
operator|.
name|getPrimaryOptionalFields
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|InternalBibtexFields
operator|.
name|getAllPublicFieldNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|allFields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|allFields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|class|PasteAction
specifier|private
class|class
name|PasteAction
extends|extends
name|BasicAction
block|{
DECL|method|PasteAction ()
specifier|public
name|PasteAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paste"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paste from clipboard"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|PASTE
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|String
name|data
init|=
operator|new
name|ClipBoardManager
argument_list|()
operator|.
name|getClipboardContents
argument_list|()
decl_stmt|;
name|int
name|selStart
init|=
name|textPane
operator|.
name|getSelectionStart
argument_list|()
decl_stmt|;
name|int
name|selEnd
init|=
name|textPane
operator|.
name|getSelectionEnd
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|selEnd
operator|-
name|selStart
operator|)
operator|>
literal|0
condition|)
block|{
name|textPane
operator|.
name|replaceSelection
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|int
name|cPos
init|=
name|textPane
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
try|try
block|{
name|document
operator|.
name|insertString
argument_list|(
name|cPos
argument_list|,
name|data
argument_list|,
name|document
operator|.
name|getStyle
argument_list|(
literal|"regular"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not paste text"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|LoadAction
specifier|private
class|class
name|LoadAction
extends|extends
name|BasicAction
block|{
DECL|method|LoadAction ()
specifier|public
name|LoadAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Open file"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|OPEN
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|addExtensionFilter
argument_list|(
name|FileType
operator|.
name|TXT
argument_list|)
operator|.
name|withDefaultExtension
argument_list|(
name|FileType
operator|.
name|TXT
argument_list|)
operator|.
name|withInitialDirectory
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|DialogService
name|ds
init|=
operator|new
name|FXDialogService
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|path
init|=
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|ds
operator|.
name|showFileOpenDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Path
name|file
init|=
name|path
operator|.
name|get
argument_list|()
decl_stmt|;
name|document
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|document
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|EditorKit
name|eKit
init|=
name|textPane
operator|.
name|getEditorKit
argument_list|()
decl_stmt|;
if|if
condition|(
name|eKit
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|fis
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|eKit
operator|.
name|read
argument_list|(
name|fis
argument_list|,
name|document
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|document
operator|.
name|setLogicalStyle
argument_list|(
literal|0
argument_list|,
name|document
operator|.
name|getStyle
argument_list|(
literal|"regular"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|BadLocationException
decl||
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem reading or inserting file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ClearAction
specifier|private
class|class
name|ClearAction
extends|extends
name|BasicAction
block|{
DECL|method|ClearAction ()
specifier|public
name|ClearAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear inputarea"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|NEW
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|textPane
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FieldListSelectionHandler
class|class
name|FieldListSelectionHandler
implements|implements
name|ListSelectionListener
block|{
DECL|field|lastIndex
specifier|private
name|int
name|lastIndex
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|valueChanged (ListSelectionEvent e)
specifier|public
name|void
name|valueChanged
parameter_list|(
name|ListSelectionEvent
name|e
parameter_list|)
block|{
name|ListSelectionModel
name|lsm
init|=
operator|(
name|ListSelectionModel
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|lsm
operator|.
name|getAnchorSelectionIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
name|lastIndex
condition|)
block|{
name|boolean
name|isAdjusting
init|=
name|e
operator|.
name|getValueIsAdjusting
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAdjusting
condition|)
block|{
if|if
condition|(
name|lastIndex
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|tag1
init|=
name|fieldList
operator|.
name|getModel
argument_list|()
operator|.
name|getElementAt
argument_list|(
name|lastIndex
argument_list|)
decl_stmt|;
name|markedTextStore
operator|.
name|setStyleForTag
argument_list|(
name|tag1
argument_list|,
literal|"used"
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
name|String
name|tag2
init|=
name|fieldList
operator|.
name|getModel
argument_list|()
operator|.
name|getElementAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|markedTextStore
operator|.
name|setStyleForTag
argument_list|(
name|tag2
argument_list|,
literal|"marked"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|lastIndex
operator|=
name|index
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// simple JList Renderer
comment|// based on : Advanced JList Programming at developers.sun.com
DECL|class|SimpleCellRenderer
specifier|private
class|class
name|SimpleCellRenderer
extends|extends
name|DefaultListCellRenderer
block|{
DECL|field|baseFont
specifier|private
specifier|final
name|Font
name|baseFont
decl_stmt|;
DECL|field|usedFont
specifier|private
specifier|final
name|Font
name|usedFont
decl_stmt|;
DECL|field|okIcon
specifier|private
specifier|final
name|Icon
name|okIcon
init|=
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|PLAIN_TEXT_IMPORT_DONE
operator|.
name|getSmallIcon
argument_list|()
decl_stmt|;
DECL|field|needIcon
specifier|private
specifier|final
name|Icon
name|needIcon
init|=
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|PLAIN_TEXT_IMPORT_TODO
operator|.
name|getSmallIcon
argument_list|()
decl_stmt|;
DECL|field|requiredColor
specifier|private
specifier|final
name|Color
name|requiredColor
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_REQ_FIELD_BACKGROUND
argument_list|)
decl_stmt|;
DECL|field|optionalColor
specifier|private
specifier|final
name|Color
name|optionalColor
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getColor
argument_list|(
name|JabRefPreferences
operator|.
name|TABLE_OPT_FIELD_BACKGROUND
argument_list|)
decl_stmt|;
DECL|method|SimpleCellRenderer (Font normFont)
specifier|public
name|SimpleCellRenderer
parameter_list|(
name|Font
name|normFont
parameter_list|)
block|{
name|baseFont
operator|=
name|normFont
expr_stmt|;
name|usedFont
operator|=
name|baseFont
operator|.
name|deriveFont
argument_list|(
name|Font
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
block|}
comment|/* This is the only method defined by ListCellRenderer.  We just          * reconfigure the Jlabel each time we're called.          */
annotation|@
name|Override
DECL|method|getListCellRendererComponent (JList<?> list, Object value, int index, boolean iss, boolean chf)
specifier|public
name|Component
name|getListCellRendererComponent
parameter_list|(
name|JList
argument_list|<
name|?
argument_list|>
name|list
parameter_list|,
name|Object
name|value
parameter_list|,
comment|// value to display
name|int
name|index
parameter_list|,
comment|// cell index
name|boolean
name|iss
parameter_list|,
comment|// is the cell selected
name|boolean
name|chf
parameter_list|)
comment|// the list and the cell have the focus
block|{
comment|/* The DefaultListCellRenderer class will take care of              * the JLabels text property, it's foreground and background              * colors, and so on.              */
name|super
operator|.
name|getListCellRendererComponent
argument_list|(
name|list
argument_list|,
name|value
argument_list|,
name|index
argument_list|,
name|iss
argument_list|,
name|chf
argument_list|)
expr_stmt|;
comment|/* We additionally set the JLabels icon property here.              */
name|String
name|s
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|this
operator|.
name|setForeground
argument_list|(
name|Color
operator|.
name|gray
argument_list|)
expr_stmt|;
name|this
operator|.
name|setFont
argument_list|(
name|usedFont
argument_list|)
expr_stmt|;
name|this
operator|.
name|setIcon
argument_list|(
name|okIcon
argument_list|)
expr_stmt|;
name|this
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Filled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|setIcon
argument_list|(
name|needIcon
argument_list|)
expr_stmt|;
name|this
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field is missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiredFields
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|this
operator|.
name|setBackground
argument_list|(
name|requiredColor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optionalFields
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|this
operator|.
name|setBackground
argument_list|(
name|optionalColor
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
DECL|class|FieldListMouseListener
specifier|private
class|class
name|FieldListMouseListener
extends|extends
name|MouseAdapter
block|{
annotation|@
name|Override
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|insertTextForTag
argument_list|(
name|override
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MenuTextForTagAction
specifier|private
class|class
name|MenuTextForTagAction
extends|extends
name|AbstractAction
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|overrideField
specifier|private
specifier|final
name|Boolean
name|overrideField
decl_stmt|;
DECL|method|MenuTextForTagAction (String field, Boolean overrideField)
specifier|public
name|MenuTextForTagAction
parameter_list|(
name|String
name|field
parameter_list|,
name|Boolean
name|overrideField
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|overrideField
operator|=
name|overrideField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// To enable correct marking of used values
name|fieldList
operator|.
name|setSelectedValue
argument_list|(
name|field
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|insertTextForTag
argument_list|(
name|overrideField
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|PopupListener
class|class
name|PopupListener
extends|extends
name|MouseAdapter
block|{
DECL|field|popMenu
specifier|private
specifier|final
name|JPopupMenu
name|popMenu
decl_stmt|;
DECL|method|PopupListener (JPopupMenu menu)
specifier|public
name|PopupListener
parameter_list|(
name|JPopupMenu
name|menu
parameter_list|)
block|{
name|popMenu
operator|=
name|menu
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|maybeShowPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeShowPopup (MouseEvent e)
specifier|private
name|void
name|maybeShowPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|popMenu
operator|.
name|show
argument_list|(
name|e
operator|.
name|getComponent
argument_list|()
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|BasicAction
specifier|abstract
class|class
name|BasicAction
extends|extends
name|AbstractAction
block|{
DECL|method|BasicAction (String text, String description, Icon icon)
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|BasicAction (String text)
specifier|public
name|BasicAction
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
specifier|abstract
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
function_decl|;
block|}
end_class

end_unit

