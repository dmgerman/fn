begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Worker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|ImportInspectionDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|DuplicateCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|FetcherException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|IdBasedFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|WebFetchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fetcher
operator|.
name|DoiFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|EntryTypeViewModel
specifier|public
class|class
name|EntryTypeViewModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntryTypeViewModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|searchingProperty
specifier|private
specifier|final
name|BooleanProperty
name|searchingProperty
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|field|selectedItemProperty
specifier|private
specifier|final
name|ObjectProperty
argument_list|<
name|IdBasedFetcher
argument_list|>
name|selectedItemProperty
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fetchers
specifier|private
specifier|final
name|ListProperty
argument_list|<
name|IdBasedFetcher
argument_list|>
name|fetchers
init|=
operator|new
name|SimpleListProperty
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|idText
specifier|private
specifier|final
name|StringProperty
name|idText
init|=
operator|new
name|SimpleStringProperty
argument_list|()
decl_stmt|;
DECL|field|focusAndSelectAllProperty
specifier|private
specifier|final
name|BooleanProperty
name|focusAndSelectAllProperty
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|field|fetcherWorker
specifier|private
name|Task
argument_list|<
name|Optional
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
name|fetcherWorker
init|=
operator|new
name|FetcherWorker
argument_list|()
decl_stmt|;
DECL|field|basePanel
specifier|private
specifier|final
name|BasePanel
name|basePanel
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|method|EntryTypeViewModel (JabRefPreferences preferences, BasePanel basePanel, DialogService dialogService)
specifier|public
name|EntryTypeViewModel
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|,
name|BasePanel
name|basePanel
parameter_list|,
name|DialogService
name|dialogService
parameter_list|)
block|{
name|this
operator|.
name|basePanel
operator|=
name|basePanel
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|preferences
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|fetchers
operator|.
name|addAll
argument_list|(
name|WebFetchers
operator|.
name|getIdBasedFetchers
argument_list|(
name|preferences
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|selectedItemProperty
operator|.
name|setValue
argument_list|(
name|getLastSelectedFetcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|searchingProperty ()
specifier|public
name|BooleanProperty
name|searchingProperty
parameter_list|()
block|{
return|return
name|searchingProperty
return|;
block|}
DECL|method|selectedItemProperty ()
specifier|public
name|ObjectProperty
argument_list|<
name|IdBasedFetcher
argument_list|>
name|selectedItemProperty
parameter_list|()
block|{
return|return
name|selectedItemProperty
return|;
block|}
DECL|method|idTextProperty ()
specifier|public
name|StringProperty
name|idTextProperty
parameter_list|()
block|{
return|return
name|idText
return|;
block|}
DECL|method|getFocusAndSelectAllProperty ()
specifier|public
name|BooleanProperty
name|getFocusAndSelectAllProperty
parameter_list|()
block|{
return|return
name|focusAndSelectAllProperty
return|;
block|}
DECL|method|storeSelectedFetcher ()
specifier|public
name|void
name|storeSelectedFetcher
parameter_list|()
block|{
name|prefs
operator|.
name|setIdBasedFetcherForEntryGenerator
argument_list|(
name|selectedItemProperty
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastSelectedFetcher ()
specifier|private
name|IdBasedFetcher
name|getLastSelectedFetcher
parameter_list|()
block|{
return|return
name|fetchers
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|fetcher
lambda|->
name|fetcher
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|prefs
operator|.
name|getIdBasedFetcherForEntryGenerator
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
operator|new
name|DoiFetcher
argument_list|(
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|fetcherItemsProperty ()
specifier|public
name|ListProperty
argument_list|<
name|IdBasedFetcher
argument_list|>
name|fetcherItemsProperty
parameter_list|()
block|{
return|return
name|fetchers
return|;
block|}
DECL|method|stopFetching ()
specifier|public
name|void
name|stopFetching
parameter_list|()
block|{
if|if
condition|(
name|fetcherWorker
operator|.
name|getState
argument_list|()
operator|==
name|Worker
operator|.
name|State
operator|.
name|RUNNING
condition|)
block|{
name|fetcherWorker
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FetcherWorker
specifier|private
class|class
name|FetcherWorker
extends|extends
name|Task
argument_list|<
name|Optional
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
block|{
DECL|field|fetcher
specifier|private
name|IdBasedFetcher
name|fetcher
init|=
literal|null
decl_stmt|;
DECL|field|searchID
specifier|private
name|String
name|searchID
init|=
literal|""
decl_stmt|;
annotation|@
name|Override
DECL|method|call ()
specifier|protected
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|call
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|FetcherException
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|bibEntry
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
name|searchingProperty
argument_list|()
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|storeSelectedFetcher
argument_list|()
expr_stmt|;
name|fetcher
operator|=
name|selectedItemProperty
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|searchID
operator|=
name|idText
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|searchID
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bibEntry
operator|=
name|fetcher
operator|.
name|performSearchById
argument_list|(
name|searchID
argument_list|)
expr_stmt|;
block|}
return|return
name|bibEntry
return|;
block|}
block|}
DECL|method|runFetcherWorker ()
specifier|public
name|void
name|runFetcherWorker
parameter_list|()
block|{
name|fetcherWorker
operator|.
name|run
argument_list|()
expr_stmt|;
name|fetcherWorker
operator|.
name|setOnFailed
argument_list|(
name|event
lambda|->
block|{
name|Throwable
name|exception
init|=
name|fetcherWorker
operator|.
name|getException
argument_list|()
decl_stmt|;
name|String
name|fetcherExceptionMessage
init|=
name|exception
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|String
name|fetcher
init|=
name|selectedItemProperty
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|searchId
init|=
name|idText
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|FetcherException
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error while fetching from %0"
argument_list|,
name|fetcher
operator|+
literal|"."
operator|+
literal|"\n"
operator|+
name|fetcherExceptionMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No files found."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Fetcher '%0' did not find an entry for id '%1'."
argument_list|,
name|fetcher
argument_list|,
name|searchId
argument_list|)
operator|+
literal|"\n"
operator|+
name|fetcherExceptionMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception during fetching when using fetcher '%s' with entry id '%s'."
argument_list|,
name|searchId
argument_list|,
name|fetcher
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|searchingProperty
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetcherWorker
operator|=
operator|new
name|FetcherWorker
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|fetcherWorker
operator|.
name|setOnSucceeded
argument_list|(
name|evt
lambda|->
block|{
name|Optional
argument_list|<
name|BibEntry
argument_list|>
name|result
init|=
name|fetcherWorker
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|BibEntry
name|bibEntry
init|=
name|result
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|DuplicateCheck
operator|.
name|containsDuplicate
argument_list|(
name|basePanel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|bibEntry
argument_list|,
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|)
condition|)
block|{
comment|//If there are duplicates starts ImportInspectionDialog
name|ImportInspectionDialog
name|diag
init|=
operator|new
name|ImportInspectionDialog
argument_list|(
name|basePanel
operator|.
name|frame
argument_list|()
argument_list|,
name|basePanel
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|diag
operator|.
name|addEntries
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|bibEntry
argument_list|)
argument_list|)
expr_stmt|;
name|diag
operator|.
name|entryListComplete
argument_list|()
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|diag
operator|.
name|toFront
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Regenerate CiteKey of imported BibEntry
operator|new
name|BibtexKeyGenerator
argument_list|(
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|prefs
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|)
operator|.
name|generateAndSetKey
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|insertEntry
argument_list|(
name|bibEntry
argument_list|)
expr_stmt|;
block|}
comment|// close();
block|}
elseif|else
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|idText
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|dialogService
operator|.
name|showWarningDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Empty search ID"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"The given search ID was empty."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fetcherWorker
operator|=
operator|new
name|FetcherWorker
argument_list|()
expr_stmt|;
name|focusAndSelectAllProperty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|searchingProperty
argument_list|()
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

