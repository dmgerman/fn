begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JProgressBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ObservableValue
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Menu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|SeparatorMenuItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|SplitPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tab
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TabPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToolBar
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Pane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|AutoLinkFilesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|BibtexKeyPatternAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ConnectToSharedDatabaseCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CopyFilesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CustomizeEntryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|CustomizeKeyBindingAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|EditExternalFileTypesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ErrorConsoleAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|FindUnlinkedFilesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|IntegrityCheckAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|LibraryPropertiesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|LookupIdentifierAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ManageCustomExportsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ManageCustomImportsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ManageJournalsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ManageKeywordsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ManageProtectedTermsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|MassSetFieldAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|MergeEntriesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|MnemonicAwareAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewEntryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewEntryFromPlainTextAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|NewSubLibraryAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|OldDatabaseCommandWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|OpenBrowserAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SearchForUpdateAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SetupGeneralFieldsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ShowDocumentViewerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ShowPreferencesAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|StandardActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|dialogs
operator|.
name|AutosaveUIManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|ExportCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveAllAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|AboutAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|ImportCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|ImportInspectionDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|actions
operator|.
name|OpenDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|menus
operator|.
name|FileHistoryMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|push
operator|.
name|PushToApplicationButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|push
operator|.
name|PushToApplications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|GlobalSearchBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldValueViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|CountingUndoManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autosaveandbackup
operator|.
name|AutosaveManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autosaveandbackup
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|IdFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|OutputPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|WebFetchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|undo
operator|.
name|AddUndoableActionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|undo
operator|.
name|UndoChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|undo
operator|.
name|UndoRedoEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BiblatexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexEntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|specialfields
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|LastFocusedTabPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|SearchPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|osx
operator|.
name|macadapter
operator|.
name|MacAdapter
import|;
end_import

begin_comment
comment|/**  * The main window of the application.  */
end_comment

begin_class
DECL|class|JabRefFrame
specifier|public
class|class
name|JabRefFrame
extends|extends
name|BorderPane
implements|implements
name|OutputPrinter
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JabRefFrame
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Frame titles.
DECL|field|FRAME_TITLE
specifier|public
specifier|static
specifier|final
name|String
name|FRAME_TITLE
init|=
literal|"JabRef"
decl_stmt|;
DECL|field|splitPane
specifier|private
specifier|final
name|SplitPane
name|splitPane
init|=
operator|new
name|SplitPane
argument_list|()
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
decl_stmt|;
DECL|field|globalSearchBar
specifier|private
specifier|final
name|GlobalSearchBar
name|globalSearchBar
init|=
operator|new
name|GlobalSearchBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|statusLine
specifier|private
specifier|final
name|JLabel
name|statusLine
init|=
operator|new
name|JLabel
argument_list|(
literal|""
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|;
DECL|field|statusLabel
specifier|private
specifier|final
name|JLabel
name|statusLabel
init|=
operator|new
name|JLabel
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Status"
argument_list|)
operator|+
literal|':'
argument_list|,
name|SwingConstants
operator|.
name|LEFT
argument_list|)
decl_stmt|;
DECL|field|progressBar
specifier|private
specifier|final
name|JProgressBar
name|progressBar
init|=
operator|new
name|JProgressBar
argument_list|()
decl_stmt|;
DECL|field|fileHistory
specifier|private
specifier|final
name|FileHistoryMenu
name|fileHistory
init|=
operator|new
name|FileHistoryMenu
argument_list|(
name|prefs
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// Here we instantiate menu/toolbar actions. Actions regarding
comment|// the currently open database are defined as a GeneralAction
comment|// with a unique command string. This causes the appropriate
comment|// BasePanel's runCommand() method to be called with that command.
comment|// Note: GeneralAction's constructor automatically gets translations
comment|// for the name and message strings.
DECL|field|mark
specifier|private
specifier|final
name|AbstractAction
name|mark
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|MARK_ENTRIES
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Mark entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Mark entries"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|MARK_ENTRIES
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|MARK_ENTRIES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|markSpecific
specifier|private
specifier|final
name|JMenu
name|markSpecific
init|=
name|JabRefFrame
operator|.
name|subMenu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Mark specific color"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|unmark
specifier|private
specifier|final
name|AbstractAction
name|unmark
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|UNMARK_ENTRIES
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unmark entries"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|UNMARK_ENTRIES
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|UNMARK_ENTRIES
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|unmarkAll
specifier|private
specifier|final
name|AbstractAction
name|unmarkAll
init|=
operator|new
name|GeneralAction
argument_list|(
name|Actions
operator|.
name|UNMARK_ALL
argument_list|,
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Unmark all"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|toggleRelevance
specifier|private
specifier|final
name|AbstractAction
name|toggleRelevance
init|=
operator|new
name|GeneralAction
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getMenuString
argument_list|()
argument_list|,
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|RELEVANCE
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getToolTipText
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|RELEVANCE
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|toggleQualityAssured
specifier|private
specifier|final
name|AbstractAction
name|toggleQualityAssured
init|=
operator|new
name|GeneralAction
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getMenuString
argument_list|()
argument_list|,
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|QUALITY
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getToolTipText
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|QUALITY_ASSURED
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|togglePrinted
specifier|private
specifier|final
name|AbstractAction
name|togglePrinted
init|=
operator|new
name|GeneralAction
argument_list|(
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|,
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getMenuString
argument_list|()
argument_list|,
operator|new
name|SpecialFieldValueViewModel
argument_list|(
name|SpecialField
operator|.
name|PRINTED
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getToolTipText
argument_list|()
argument_list|,
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|PRINTED
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
comment|// Lists containing different subsets of actions for different purposes
DECL|field|specialFieldButtons
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|specialFieldButtons
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|openDatabaseOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|openDatabaseOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|severalDatabasesOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|severalDatabasesOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|openAndSavedDatabasesOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|openAndSavedDatabasesOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sharedDatabaseOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|sharedDatabaseOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|noSharedDatabaseActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|noSharedDatabaseActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|oneEntryOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|oneEntryOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|oneEntryWithFileOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|oneEntryWithFileOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|oneEntryWithURLorDOIOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|oneEntryWithURLorDOIOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|twoEntriesOnlyActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|twoEntriesOnlyActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|atLeastOneEntryActions
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|atLeastOneEntryActions
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|mainStage
specifier|private
specifier|final
name|Stage
name|mainStage
decl_stmt|;
comment|// The sidepane manager takes care of populating the sidepane.
DECL|field|sidePaneManager
specifier|private
name|SidePaneManager
name|sidePaneManager
decl_stmt|;
DECL|field|tabbedPane
specifier|private
specifier|final
name|TabPane
name|tabbedPane
init|=
operator|new
name|TabPane
argument_list|()
decl_stmt|;
DECL|field|pushApplications
specifier|private
name|PushToApplications
name|pushApplications
decl_stmt|;
DECL|field|undoManager
specifier|private
specifier|final
name|CountingUndoManager
name|undoManager
init|=
operator|new
name|CountingUndoManager
argument_list|()
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|sidePane
specifier|private
name|SidePane
name|sidePane
decl_stmt|;
DECL|method|JabRefFrame (Stage mainStage)
specifier|public
name|JabRefFrame
parameter_list|(
name|Stage
name|mainStage
parameter_list|)
block|{
name|this
operator|.
name|mainStage
operator|=
name|mainStage
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
operator|new
name|FXDialogService
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|subMenu (String name)
specifier|private
specifier|static
name|JMenu
name|subMenu
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|i
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
decl_stmt|;
name|JMenu
name|res
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
name|res
operator|=
operator|new
name|JMenu
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|mnemonic
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|.
name|setMnemonic
argument_list|(
operator|(
name|int
operator|)
name|mnemonic
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
operator|new
name|JMenu
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**      * Takes a list of Object and calls the method setEnabled on them, depending on whether it is an Action or a      * Component.      *      * @param list List that should contain Actions and Components.      */
DECL|method|setEnabled (List<Object> list, boolean enabled)
specifier|private
specifier|static
name|void
name|setEnabled
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|Object
name|actionOrComponent
range|:
name|list
control|)
block|{
if|if
condition|(
name|actionOrComponent
operator|instanceof
name|Action
condition|)
block|{
operator|(
operator|(
name|Action
operator|)
name|actionOrComponent
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actionOrComponent
operator|instanceof
name|Component
condition|)
block|{
operator|(
operator|(
name|Component
operator|)
name|actionOrComponent
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|actionOrComponent
operator|instanceof
name|JPanel
condition|)
block|{
name|JPanel
name|root
init|=
operator|(
name|JPanel
operator|)
name|actionOrComponent
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|root
operator|.
name|getComponentCount
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|root
operator|.
name|getComponent
argument_list|(
name|index
argument_list|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|sidePaneManager
operator|=
operator|new
name|SidePaneManager
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|sidePane
operator|=
name|sidePaneManager
operator|.
name|getPane
argument_list|()
expr_stmt|;
name|initLayout
argument_list|()
expr_stmt|;
name|initActions
argument_list|()
expr_stmt|;
name|initKeyBindings
argument_list|()
expr_stmt|;
comment|//setBounds(GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds());
comment|//WindowLocation pw = new WindowLocation(this, JabRefPreferences.POS_X, JabRefPreferences.POS_Y, JabRefPreferences.SIZE_X,
comment|//        JabRefPreferences.SIZE_Y);
comment|//pw.displayWindowAtStoredLocation();
name|tabbedPane
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|/*          * The following state listener makes sure focus is registered with the          * correct database when the user switches tabs. Without this,          * cut/paste/copy operations would some times occur in the wrong tab.          */
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
argument_list|,
name|e
lambda|->
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BasePanel
name|currentBasePanel
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentBasePanel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Poor-mans binding to global state
comment|// We need to invoke this in the JavaFX thread as all the listeners sit there
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
name|Globals
operator|.
name|stateManager
operator|.
name|activeDatabaseProperty
argument_list|()
operator|.
name|setValue
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|currentBasePanel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|new
name|SearchPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
operator|.
name|isGlobalSearch
argument_list|()
condition|)
block|{
name|globalSearchBar
operator|.
name|performSearch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|content
init|=
literal|""
decl_stmt|;
name|Optional
argument_list|<
name|SearchQuery
argument_list|>
name|currentSearchQuery
init|=
name|currentBasePanel
operator|.
name|getCurrentSearchQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentSearchQuery
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|content
operator|=
name|currentSearchQuery
operator|.
name|get
argument_list|()
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|globalSearchBar
operator|.
name|setSearchTerm
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|currentBasePanel
operator|.
name|getPreviewPanel
argument_list|()
operator|.
name|updateLayout
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// groupSidePane.getToggleCommand().setSelected(sidePaneManager.isComponentVisible(GroupSidePane.class));
comment|//previewToggle.setSelected(Globals.prefs.getPreviewPreferences().isPreviewPanelEnabled());
comment|//generalFetcher.getToggleCommand().setSelected(sidePaneManager.isComponentVisible(GeneralFetcher.class));
comment|//openOfficePanel.getToggleCommand().setSelected(sidePaneManager.isComponentVisible(OpenOfficeSidePanel.class));
comment|// TODO: Can't notify focus listener since it is expecting a swing component
comment|//Globals.getFocusListener().setFocused(currentBasePanel.getMainTable());
name|setWindowTitle
argument_list|()
expr_stmt|;
comment|// Update search autocompleter with information for the correct database:
name|currentBasePanel
operator|.
name|updateSearchManager
argument_list|()
expr_stmt|;
name|currentBasePanel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|postUndoRedoEvent
argument_list|()
expr_stmt|;
name|currentBasePanel
operator|.
name|getMainTable
argument_list|()
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|//Note: The registration of Apple event is at the end of initialization, because
comment|//if the events happen too early (ie when the window is not initialized yet), the
comment|//opened (double-clicked) documents are not displayed.
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
try|try
block|{
operator|new
name|MacAdapter
argument_list|()
operator|.
name|registerMacEvents
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not interface with Mac OS X methods."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|initShowTrackingNotification
argument_list|()
expr_stmt|;
block|}
DECL|method|initKeyBindings ()
specifier|private
name|void
name|initKeyBindings
parameter_list|()
block|{
name|addEventFilter
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
name|event
lambda|->
block|{
name|Optional
argument_list|<
name|KeyBinding
argument_list|>
name|keyBinding
init|=
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|mapToKeyBinding
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyBinding
operator|.
name|isPresent
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|keyBinding
operator|.
name|get
argument_list|()
condition|)
block|{
case|case
name|FOCUS_ENTRY_TABLE
case|:
name|getCurrentBasePanel
argument_list|()
operator|.
name|getMainTable
argument_list|()
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|NEXT_LIBRARY
case|:
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectNext
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|PREVIOUS_LIBRARY
case|:
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectPrevious
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|INCREASE_TABLE_FONT_SIZE
case|:
name|increaseTableFontSize
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECREASE_TABLE_FONT_SIZE
case|:
name|decreaseTableFontSize
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|DEFAULT_TABLE_FONT_SIZE
case|:
name|setDefaultTableFontSize
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
default|default:
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initShowTrackingNotification ()
specifier|private
name|void
name|initShowTrackingNotification
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|shouldAskToCollectTelemetry
argument_list|()
condition|)
block|{
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|submit
argument_list|(
operator|new
name|TimerTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
name|JabRefFrame
operator|.
name|this
operator|::
name|showTrackingNotification
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
comment|// run in one minute
block|}
block|}
DECL|method|showTrackingNotification ()
specifier|private
name|Void
name|showTrackingNotification
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|shouldCollectTelemetry
argument_list|()
condition|)
block|{
name|boolean
name|shouldCollect
init|=
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Telemetry: Help make JabRef better"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"To improve the user experience, we would like to collect anonymous statistics on the features you use. We will only record what features you access and how often you do it. We will neither collect any personal data nor the content of bibliographic items. If you choose to allow data collection, you can later disable it via Options -> Preferences -> General."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Share anonymous statistics"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Don't share"
argument_list|)
argument_list|)
decl_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|setShouldCollectTelemetry
argument_list|(
name|shouldCollect
argument_list|)
expr_stmt|;
block|}
name|Globals
operator|.
name|prefs
operator|.
name|askedToCollectTelemetry
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|refreshTitleAndTabs ()
specifier|public
name|void
name|refreshTitleAndTabs
parameter_list|()
block|{
name|setWindowTitle
argument_list|()
expr_stmt|;
name|updateAllTabTitles
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the title of the main window.      */
DECL|method|setWindowTitle ()
specifier|public
name|void
name|setWindowTitle
parameter_list|()
block|{
name|BasePanel
name|panel
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
comment|// no database open
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|//setTitle(FRAME_TITLE);
return|return;
block|}
name|String
name|mode
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|getFormattedName
argument_list|()
decl_stmt|;
name|String
name|modeInfo
init|=
name|String
operator|.
name|format
argument_list|(
literal|" (%s)"
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 mode"
argument_list|,
name|mode
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isAutosaveEnabled
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|LOCAL_AUTO_SAVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|LOCAL
condition|)
block|{
name|String
name|changeFlag
init|=
name|panel
operator|.
name|isModified
argument_list|()
operator|&&
operator|!
name|isAutosaveEnabled
condition|?
literal|"*"
else|:
literal|""
decl_stmt|;
name|String
name|databaseFile
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|map
argument_list|(
name|File
operator|::
name|getPath
argument_list|)
operator|.
name|orElse
argument_list|(
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|)
decl_stmt|;
comment|//setTitle(FRAME_TITLE + " - " + databaseFile + changeFlag + modeInfo);
block|}
elseif|else
if|if
condition|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|SHARED
condition|)
block|{
comment|//setTitle(FRAME_TITLE + " - " + panel.getBibDatabaseContext().getDBMSSynchronizer().getDBName() + " ["
comment|//        + Localization.lang("shared") + "]" + modeInfo);
block|}
block|}
comment|/**      * The MacAdapter calls this method when a "BIB" file has been double-clicked from the Finder.      */
DECL|method|openAction (String filePath)
specifier|public
name|void
name|openAction
parameter_list|(
name|String
name|filePath
parameter_list|)
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
comment|// all the logic is done in openIt. Even raising an existing panel
name|getOpenDatabaseAction
argument_list|()
operator|.
name|openFile
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * The MacAdapter calls this method when "About" is selected from the application menu.      */
DECL|method|about ()
specifier|public
name|void
name|about
parameter_list|()
block|{
name|HelpAction
operator|.
name|getCommand
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
DECL|method|prefs ()
specifier|public
name|JabRefPreferences
name|prefs
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
comment|/**      * Tears down all things started by JabRef      *<p>      * FIXME: Currently some threads remain and therefore hinder JabRef to be closed properly      *      * @param filenames the filenames of all currently opened files - used for storing them if prefs openLastEdited is set to true      */
DECL|method|tearDownJabRef (List<String> filenames)
specifier|private
name|void
name|tearDownJabRef
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|filenames
parameter_list|)
block|{
name|Globals
operator|.
name|stopBackgroundTasks
argument_list|()
expr_stmt|;
name|Globals
operator|.
name|shutdownThreadPools
argument_list|()
expr_stmt|;
comment|//dispose();
comment|//prefs.putBoolean(JabRefPreferences.WINDOW_MAXIMISED, getExtendedState() == Frame.MAXIMIZED_BOTH);
comment|// Store divider location for side pane:
name|double
name|width
init|=
name|splitPane
operator|.
name|getDividerPositions
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|width
operator|>
literal|0
condition|)
block|{
name|prefs
operator|.
name|putDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIDE_PANE_WIDTH
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|OPEN_LAST_EDITED
argument_list|)
condition|)
block|{
comment|// Here we store the names of all current files. If
comment|// there is no current file, we remove any
comment|// previously stored filename.
if|if
condition|(
name|filenames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefs
operator|.
name|remove
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LAST_EDITED
argument_list|,
name|filenames
argument_list|)
expr_stmt|;
name|File
name|focusedDatabase
init|=
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
operator|new
name|LastFocusedTabPreferences
argument_list|(
name|prefs
argument_list|)
operator|.
name|setLastFocusedTab
argument_list|(
name|focusedDatabase
argument_list|)
expr_stmt|;
block|}
block|}
name|fileHistory
operator|.
name|storeHistory
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|customExports
operator|.
name|store
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|customImports
operator|.
name|store
argument_list|()
expr_stmt|;
name|prefs
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// dispose all windows, even if they are not displayed anymore
for|for
control|(
name|Window
name|window
range|:
name|Window
operator|.
name|getWindows
argument_list|()
control|)
block|{
name|window
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * General info dialog.  The MacAdapter calls this method when "Quit"      * is selected from the application menu, Cmd-Q is pressed, or "Quit" is selected from the Dock.      * The function returns a boolean indicating if quitting is ok or not.      *<p>      * Non-OSX JabRef calls this when choosing "Quit" from the menu      *<p>      * SIDE EFFECT: tears down JabRef      *      * @return true if the user chose to quit; false otherwise      */
DECL|method|quit ()
specifier|public
name|boolean
name|quit
parameter_list|()
block|{
comment|// Ask here if the user really wants to close, if the base
comment|// has not been saved since last save.
name|boolean
name|close
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filenames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BibDatabaseContext
name|context
init|=
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|isModified
argument_list|()
operator|&&
operator|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|LOCAL
operator|)
condition|)
block|{
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|context
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|map
argument_list|(
name|File
operator|::
name|getAbsolutePath
argument_list|)
operator|.
name|orElse
argument_list|(
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|showSaveDialog
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CANCEL_OPTION
operator|)
operator|||
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|CLOSED_OPTION
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
comment|//getCurrentBasePanel().runCommand("save");
name|SaveDatabaseAction
name|saveAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
decl_stmt|;
name|saveAction
operator|.
name|runCommand
argument_list|()
expr_stmt|;
if|if
condition|(
name|saveAction
operator|.
name|isCanceled
argument_list|()
operator|||
operator|!
name|saveAction
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
comment|// The action was either canceled or unsuccessful.
comment|// Break!
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to save library"
argument_list|)
argument_list|)
expr_stmt|;
name|close
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Something prevented the file
comment|// from being saved. Break!!!
name|close
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|SHARED
condition|)
block|{
name|context
operator|.
name|convertToLocalDatabase
argument_list|()
expr_stmt|;
name|context
operator|.
name|getDBMSSynchronizer
argument_list|()
operator|.
name|closeSharedDatabase
argument_list|()
expr_stmt|;
name|context
operator|.
name|clearDBMSSynchronizer
argument_list|()
expr_stmt|;
block|}
name|AutosaveManager
operator|.
name|shutdown
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|BackupManager
operator|.
name|shutdown
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|map
argument_list|(
name|File
operator|::
name|getAbsolutePath
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|filenames
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|close
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|isSaving
argument_list|()
condition|)
block|{
comment|// There is a database still being saved, so we need to wait.
name|WaitForSaveOperation
name|w
init|=
operator|new
name|WaitForSaveOperation
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
comment|// This method won't return until canceled or the save operation is done.
if|if
condition|(
name|w
operator|.
name|canceled
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// The user clicked cancel.
block|}
block|}
block|}
name|tearDownJabRef
argument_list|(
name|filenames
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|initLayout ()
specifier|private
name|void
name|initLayout
parameter_list|()
block|{
name|setProgressBarVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushApplications
operator|=
operator|new
name|PushToApplications
argument_list|()
expr_stmt|;
name|BorderPane
name|head
init|=
operator|new
name|BorderPane
argument_list|()
decl_stmt|;
name|head
operator|.
name|setTop
argument_list|(
name|createMenu
argument_list|()
argument_list|)
expr_stmt|;
name|head
operator|.
name|setCenter
argument_list|(
name|createToolbar
argument_list|()
argument_list|)
expr_stmt|;
name|setTop
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|splitPane
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|sidePane
argument_list|,
name|tabbedPane
argument_list|)
expr_stmt|;
comment|// We need to wait with setting the divider since it gets reset a few times during the initial set-up
name|mainStage
operator|.
name|showingProperty
argument_list|()
operator|.
name|addListener
argument_list|(
operator|new
name|ChangeListener
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|changed
parameter_list|(
name|ObservableValue
argument_list|<
name|?
extends|extends
name|Boolean
argument_list|>
name|observable
parameter_list|,
name|Boolean
name|oldValue
parameter_list|,
name|Boolean
name|showing
parameter_list|)
block|{
if|if
condition|(
name|showing
condition|)
block|{
name|splitPane
operator|.
name|setDividerPositions
argument_list|(
name|prefs
operator|.
name|getDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIDE_PANE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|splitPane
operator|.
name|getDividers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|positionProperty
argument_list|()
argument_list|,
name|position
lambda|->
name|prefs
operator|.
name|putDouble
argument_list|(
name|JabRefPreferences
operator|.
name|SIDE_PANE_WIDTH
argument_list|,
name|position
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mainStage
operator|.
name|showingProperty
argument_list|()
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|observable
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|setCenter
argument_list|(
name|splitPane
argument_list|)
expr_stmt|;
name|UIManager
operator|.
name|put
argument_list|(
literal|"TabbedPane.contentBorderInsets"
argument_list|,
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|anchor
operator|=
name|GridBagConstraints
operator|.
name|WEST
expr_stmt|;
name|JPanel
name|status
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|status
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLabel
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLabel
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|statusLine
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|statusLine
argument_list|)
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|insets
operator|=
operator|new
name|Insets
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|progressBar
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|progressBar
argument_list|)
expr_stmt|;
name|statusLabel
operator|.
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|ENTRY_EDITOR_LABEL_COLOR
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createToolbar ()
specifier|private
name|Node
name|createToolbar
parameter_list|()
block|{
name|Pane
name|leftSpacer
init|=
operator|new
name|Pane
argument_list|()
decl_stmt|;
name|HBox
operator|.
name|setHgrow
argument_list|(
name|leftSpacer
argument_list|,
name|Priority
operator|.
name|SOMETIMES
argument_list|)
expr_stmt|;
name|Pane
name|rightSpacer
init|=
operator|new
name|Pane
argument_list|()
decl_stmt|;
name|HBox
operator|.
name|setHgrow
argument_list|(
name|rightSpacer
argument_list|,
name|Priority
operator|.
name|SOMETIMES
argument_list|)
expr_stmt|;
name|ActionFactory
name|factory
init|=
operator|new
name|ActionFactory
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
argument_list|)
decl_stmt|;
name|Button
name|newLibrary
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|BIBLATEX_DEFAULT_MODE
argument_list|)
condition|)
block|{
name|newLibrary
operator|=
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|NEW_LIBRARY_BIBLATEX
argument_list|,
operator|new
name|NewDatabaseAction
argument_list|(
name|this
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newLibrary
operator|=
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|NEW_LIBRARY_BIBTEX
argument_list|,
operator|new
name|NewDatabaseAction
argument_list|(
name|this
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HBox
name|leftSide
init|=
operator|new
name|HBox
argument_list|(
name|newLibrary
argument_list|,
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|OPEN_LIBRARY
argument_list|,
operator|new
name|OpenDatabaseAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|SAVE_LIBRARY
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|leftSpacer
argument_list|)
decl_stmt|;
name|leftSide
operator|.
name|minWidthProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|sidePane
operator|.
name|widthProperty
argument_list|()
argument_list|)
expr_stmt|;
name|leftSide
operator|.
name|prefWidthProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|sidePane
operator|.
name|widthProperty
argument_list|()
argument_list|)
expr_stmt|;
name|leftSide
operator|.
name|maxWidthProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|sidePane
operator|.
name|widthProperty
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBar
name|toolBar
init|=
operator|new
name|ToolBar
argument_list|(
name|leftSide
argument_list|,
name|globalSearchBar
argument_list|,
name|rightSpacer
argument_list|,
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|NEW_ENTRY
argument_list|,
operator|new
name|NewEntryAction
argument_list|(
name|this
argument_list|,
name|BiblatexEntryTypes
operator|.
name|ARTICLE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|toolBar
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"mainToolbar"
argument_list|)
expr_stmt|;
return|return
name|toolBar
return|;
block|}
comment|/**      * Returns the indexed BasePanel.      *      * @param i Index of base      */
DECL|method|getBasePanelAt (int i)
specifier|public
name|BasePanel
name|getBasePanelAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContent
argument_list|()
return|;
block|}
comment|/**      * Returns a list of BasePanel.      *      */
DECL|method|getBasePanelList ()
specifier|public
name|List
argument_list|<
name|BasePanel
argument_list|>
name|getBasePanelList
parameter_list|()
block|{
name|List
argument_list|<
name|BasePanel
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getBasePanelCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|returnList
operator|.
name|add
argument_list|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|returnList
return|;
block|}
DECL|method|showBasePanelAt (int i)
specifier|public
name|void
name|showBasePanelAt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|showBasePanel (BasePanel bp)
specifier|public
name|void
name|showBasePanel
parameter_list|(
name|BasePanel
name|bp
parameter_list|)
block|{
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|getTab
argument_list|(
name|bp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the currently viewed BasePanel.      */
DECL|method|getCurrentBasePanel ()
specifier|public
name|BasePanel
name|getCurrentBasePanel
parameter_list|()
block|{
if|if
condition|(
operator|(
name|tabbedPane
operator|==
literal|null
operator|)
operator|||
operator|(
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|BasePanel
operator|)
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|getContent
argument_list|()
return|;
block|}
comment|/**      * @return the BasePanel count.      */
DECL|method|getBasePanelCount ()
specifier|public
name|int
name|getBasePanelCount
parameter_list|()
block|{
return|return
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getTab (BasePanel comp)
specifier|private
name|Tab
name|getTab
parameter_list|(
name|BasePanel
name|comp
parameter_list|)
block|{
for|for
control|(
name|Tab
name|tab
range|:
name|tabbedPane
operator|.
name|getTabs
argument_list|()
control|)
block|{
if|if
condition|(
name|tab
operator|.
name|getContent
argument_list|()
operator|==
name|comp
condition|)
block|{
return|return
name|tab
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @deprecated do not operate on tabs but on BibDatabaseContexts      */
annotation|@
name|Deprecated
DECL|method|getTabbedPane ()
specifier|public
name|TabPane
name|getTabbedPane
parameter_list|()
block|{
return|return
name|tabbedPane
return|;
block|}
DECL|method|setTabTitle (BasePanel comp, String title, String toolTip)
specifier|public
name|void
name|setTabTitle
parameter_list|(
name|BasePanel
name|comp
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|toolTip
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
name|Tab
name|tab
init|=
name|getTab
argument_list|(
name|comp
argument_list|)
decl_stmt|;
name|tab
operator|.
name|setText
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|tab
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|toolTip
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * JavaFX Menus      * @return Menubar      */
DECL|method|createMenu ()
specifier|private
name|MenuBar
name|createMenu
parameter_list|()
block|{
name|ActionFactory
name|factory
init|=
operator|new
name|ActionFactory
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
argument_list|)
decl_stmt|;
name|Menu
name|file
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"File"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|edit
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Edit"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|library
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Library"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|quality
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Quality"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|view
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"View"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|tools
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Tools"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|options
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
decl_stmt|;
name|Menu
name|help
init|=
operator|new
name|Menu
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Help"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEW_LIBRARY_BIBTEX
argument_list|,
operator|new
name|NewDatabaseAction
argument_list|(
name|this
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBTEX
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEW_LIBRARY_BIBLATEX
argument_list|,
operator|new
name|NewDatabaseAction
argument_list|(
name|this
argument_list|,
name|BibDatabaseMode
operator|.
name|BIBLATEX
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_LIBRARY
argument_list|,
name|getOpenDatabaseAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SAVE_LIBRARY
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SAVE_LIBRARY_AS
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|SAVE_AS
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SAVE_ALL
argument_list|,
operator|new
name|SaveAllAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createSubMenu
argument_list|(
name|StandardActions
operator|.
name|IMPORT_EXPORT
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MERGE_DATABASE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|MERGE_DATABASE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
comment|// TODO: merge with import
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|IMPORT_INTO_CURRENT_LIBRARY
argument_list|,
operator|new
name|ImportCommand
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|IMPORT_INTO_NEW_LIBRARY
argument_list|,
operator|new
name|ImportCommand
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|EXPORT_ALL
argument_list|,
operator|new
name|ExportCommand
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|EXPORT_SELECTED
argument_list|,
operator|new
name|ExportCommand
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SAVE_SELECTED_AS_PLAIN_BIBTEX
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|SAVE_SELECTED_AS_PLAIN
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CONNECT_TO_SHARED_DB
argument_list|,
operator|new
name|ConnectToSharedDatabaseCommand
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|PULL_CHANGES_FROM_SHARED_DB
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|PULL_CHANGES_FROM_SHARED_DATABASE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|fileHistory
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CLOSE_LIBRARY
argument_list|,
operator|new
name|CloseDatabaseAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|QUIT
argument_list|,
operator|new
name|CloseAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|UNDO
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|UNDO
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|REDO
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|REDO
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CUT
argument_list|,
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|CUT
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY
argument_list|,
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|COPY
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createSubMenu
argument_list|(
name|StandardActions
operator|.
name|COPY_MORE
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_TITLE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|COPY_TITLE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_KEY
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|COPY_KEY
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_CITE_KEY
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|COPY_CITE_KEY
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_KEY_AND_TITLE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_TITLE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_KEY_AND_LINK
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|COPY_KEY_AND_LINK
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_CITATION_PREVIEW
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|COPY_CITATION_HTML
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|EXPORT_SELECTED_TO_CLIPBOARD
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|EXPORT_TO_CLIPBOARD
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|PASTE
argument_list|,
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|PASTE
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SEND_AS_EMAIL
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|SEND_AS_EMAIL
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|)
expr_stmt|;
comment|/*         edit.add(mark);         for (int i = 0; i< EntryMarker.MAX_MARKING_LEVEL; i++) {             markSpecific.add(new MarkEntriesAction(this, i).getMenuItem());         }         edit.add(markSpecific);         edit.add(unmark);         edit.add(unmarkAll);         edit.addSeparator();         */
comment|/* TODO         if (Globals.prefs.getBoolean(JabRefPreferences.SPECIALFIELDSENABLED)) {             boolean menuitem = false;             if (Globals.prefs.getBoolean(JabRefPreferences.SHOWCOLUMN_RANKING)) {                 rankSubMenu = new JMenu();                 // TODO RightClickMenu.createSpecialFieldMenu(rankSubMenu, SpecialField.RANKING, this);                 edit.add(rankSubMenu);                 menuitem = true;             }             if (Globals.prefs.getBoolean(JabRefPreferences.SHOWCOLUMN_RELEVANCE)) {                 edit.add(toggleRelevance);                 menuitem = true;             }             if (Globals.prefs.getBoolean(JabRefPreferences.SHOWCOLUMN_QUALITY)) {                 edit.add(toggleQualityAssured);                 menuitem = true;             }             if (Globals.prefs.getBoolean(JabRefPreferences.SHOWCOLUMN_PRIORITY)) {                 rankSubMenu = new JMenu();                 // TODO RightClickMenu.createSpecialFieldMenu(rankSubMenu, SpecialField.PRIORITY, this);                 edit.add(rankSubMenu);                 menuitem = true;             }             if (Globals.prefs.getBoolean(JabRefPreferences.SHOWCOLUMN_PRINTED)) {                 edit.add(togglePrinted);                 menuitem = true;             }             if (Globals.prefs.getBoolean(JabRefPreferences.SHOWCOLUMN_READ)) {                 rankSubMenu = new JMenu();                 // TODO RightClickMenu.createSpecialFieldMenu(rankSubMenu, SpecialField.READ_STATUS, this);                 edit.add(rankSubMenu);                 menuitem = true;             }             if (menuitem) {                 edit.addSeparator();             }         }         */
name|edit
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_KEYWORDS
argument_list|,
operator|new
name|ManageKeywordsAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|REPLACE_ALL
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|REPLACE_ALL
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MASS_SET_FIELDS
argument_list|,
operator|new
name|MassSetFieldAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|library
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEW_ARTICLE
argument_list|,
operator|new
name|NewEntryAction
argument_list|(
name|this
argument_list|,
name|BibtexEntryTypes
operator|.
name|ARTICLE
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEW_ENTRY
argument_list|,
operator|new
name|NewEntryAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEW_ENTRY_FROM_PLAINTEX
argument_list|,
operator|new
name|NewEntryFromPlainTextAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|DELETE_ENTRY
argument_list|,
operator|new
name|EditAction
argument_list|(
name|Actions
operator|.
name|DELETE
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|LIBRARY_PROPERTIES
argument_list|,
operator|new
name|LibraryPropertiesAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|EDIT_PREAMBLE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|EDIT_PREAMBLE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|EDIT_STRINGS
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|EDIT_STRINGS
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Menu
name|lookupIdentifiers
init|=
name|factory
operator|.
name|createSubMenu
argument_list|(
name|StandardActions
operator|.
name|LOOKUP_DOC_IDENTIFIER
argument_list|)
decl_stmt|;
for|for
control|(
name|IdFetcher
argument_list|<
name|?
argument_list|>
name|fetcher
range|:
name|WebFetchers
operator|.
name|getIdFetchers
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
control|)
block|{
name|LookupIdentifierAction
argument_list|<
name|?
argument_list|>
name|identifierAction
init|=
operator|new
name|LookupIdentifierAction
argument_list|<>
argument_list|(
name|this
argument_list|,
name|fetcher
argument_list|)
decl_stmt|;
name|lookupIdentifiers
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|identifierAction
operator|.
name|getAction
argument_list|()
argument_list|,
name|identifierAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|quality
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|FIND_DUPLICATES
argument_list|,
operator|new
name|DuplicateSearch
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MERGE_ENTRIES
argument_list|,
operator|new
name|MergeEntriesAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|RESOLVE_DUPLICATE_KEYS
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|RESOLVE_DUPLICATE_KEYS
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CHECK_INTEGRITY
argument_list|,
operator|new
name|IntegrityCheckAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CLEANUP_ENTRIES
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|CLEANUP
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|GENERATE_CITE_KEY
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|MAKE_KEY
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SET_FILE_LINKS
argument_list|,
operator|new
name|AutoLinkFilesAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|FIND_UNLINKED_FILES
argument_list|,
operator|new
name|FindUnlinkedFilesAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|lookupIdentifiers
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|DOWNLOAD_FULL_TEXT
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|DOWNLOAD_FULL_TEXT
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SidePaneComponent
name|webSearch
init|=
name|sidePaneManager
operator|.
name|getComponent
argument_list|(
name|SidePaneType
operator|.
name|WEB_SEARCH
argument_list|)
decl_stmt|;
name|SidePaneComponent
name|groups
init|=
name|sidePaneManager
operator|.
name|getComponent
argument_list|(
name|SidePaneType
operator|.
name|GROUPS
argument_list|)
decl_stmt|;
name|SidePaneComponent
name|openOffice
init|=
name|sidePaneManager
operator|.
name|getComponent
argument_list|(
name|SidePaneType
operator|.
name|OPEN_OFFICE
argument_list|)
decl_stmt|;
name|view
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|webSearch
operator|.
name|getToggleAction
argument_list|()
argument_list|,
name|webSearch
operator|.
name|getToggleCommand
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|groups
operator|.
name|getToggleAction
argument_list|()
argument_list|,
name|groups
operator|.
name|getToggleCommand
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|TOGGLE_PREVIEW
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|TOGGLE_PREVIEW
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|EDIT_ENTRY
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|EDIT
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SHOW_PDV_VIEWER
argument_list|,
operator|new
name|ShowDocumentViewerAction
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SELECT_ALL
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|SELECT_ALL
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEXT_PREVIEW_STYLE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|NEXT_PREVIEW_STYLE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|PREVIOUS_PREVIEW_STYLE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|PREVIOUS_PREVIEW_STYLE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PushToApplicationButton
name|pushToExternal
init|=
operator|new
name|PushToApplicationButton
argument_list|(
name|this
argument_list|,
name|pushApplications
operator|.
name|getApplications
argument_list|()
argument_list|)
decl_stmt|;
name|tools
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|NEW_SUB_LIBRARY_FROM_AUX
argument_list|,
operator|new
name|NewSubLibraryAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|WRITE_XMP
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|WRITE_XMP
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|openOffice
operator|.
name|getToggleAction
argument_list|()
argument_list|,
name|openOffice
operator|.
name|getToggleCommand
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|pushToExternal
operator|.
name|getMenuAction
argument_list|()
argument_list|,
name|pushToExternal
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_FOLDER
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|OPEN_FOLDER
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_FILE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|OPEN_EXTERNAL_FILE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_URL
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|OPEN_URL
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_CONSOLE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|OPEN_CONSOLE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY_LINKED_FILES
argument_list|,
operator|new
name|CopyFilesAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|ABBREVIATE_ISO
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_ISO
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|ABBREVIATE_MEDLINE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|ABBREVIATE_MEDLINE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|UNABBREVIATE
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|UNABBREVIATE
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SHOW_PREFS
argument_list|,
operator|new
name|ShowPreferencesAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SETUP_GENERAL_FIELDS
argument_list|,
operator|new
name|SetupGeneralFieldsAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_CUSTOM_IMPORTS
argument_list|,
operator|new
name|ManageCustomImportsAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_CUSTOM_EXPORTS
argument_list|,
operator|new
name|ManageCustomExportsAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_EXTERNAL_FILETYPES
argument_list|,
operator|new
name|EditExternalFileTypesAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_JOURNALS
argument_list|,
operator|new
name|ManageJournalsAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CUSTOMIZE_KEYBINDING
argument_list|,
operator|new
name|CustomizeKeyBindingAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_PROTECTED_TERMS
argument_list|,
operator|new
name|ManageProtectedTermsAction
argument_list|(
name|this
argument_list|,
name|Globals
operator|.
name|protectedTermsLoader
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_CONTENT_SELECTORS
argument_list|,
operator|new
name|OldDatabaseCommandWrapper
argument_list|(
name|Actions
operator|.
name|MANAGE_SELECTORS
argument_list|,
name|this
argument_list|,
name|Globals
operator|.
name|stateManager
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CUSTOMIZE_ENTRY_TYPES
argument_list|,
operator|new
name|CustomizeEntryAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|MANAGE_CITE_KEY_PATTERNS
argument_list|,
operator|new
name|BibtexKeyPatternAction
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|help
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|HELP
argument_list|,
name|HelpAction
operator|.
name|getCommand
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_FORUM
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"http://discourse.jabref.org/"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|ERROR_CONSOLE
argument_list|,
operator|new
name|ErrorConsoleAction
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SEARCH_FOR_UPDATES
argument_list|,
operator|new
name|SearchForUpdateAction
argument_list|()
argument_list|)
argument_list|,
name|factory
operator|.
name|createSubMenu
argument_list|(
name|StandardActions
operator|.
name|WEB_MENU
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_WEBPAGE
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://jabref.org/"
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_BLOG
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://blog.jabref.org/"
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_FACEBOOK
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://www.facebook.com/JabRef/"
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_TWITTER
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://twitter.com/jabref_org"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|FORK_ME
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://github.com/JabRef/jabref"
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_DEV_VERSION_LINK
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://builds.jabref.org/master/"
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|OPEN_CHANGELOG
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://github.com/JabRef/jabref/blob/master/CHANGELOG.md"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|DONATE
argument_list|,
operator|new
name|OpenBrowserAction
argument_list|(
literal|"https://donations.jabref.org"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|ABOUT
argument_list|,
operator|new
name|AboutAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|MenuBar
name|menu
init|=
operator|new
name|MenuBar
argument_list|()
decl_stmt|;
name|menu
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"mainMenu"
argument_list|)
expr_stmt|;
name|menu
operator|.
name|getMenus
argument_list|()
operator|.
name|addAll
argument_list|(
name|file
argument_list|,
name|edit
argument_list|,
name|library
argument_list|,
name|quality
argument_list|,
name|tools
argument_list|,
name|view
argument_list|,
name|options
argument_list|,
name|help
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setUseSystemMenuBar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
DECL|method|addParserResult (ParserResult pr, boolean focusPanel)
specifier|public
name|void
name|addParserResult
parameter_list|(
name|ParserResult
name|pr
parameter_list|,
name|boolean
name|focusPanel
parameter_list|)
block|{
if|if
condition|(
name|pr
operator|.
name|toOpenTab
argument_list|()
condition|)
block|{
comment|// Add the entries to the open tab.
name|BasePanel
name|panel
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|// There is no open tab to add to, so we create a new tab:
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|focusPanel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|addImportedEntries
argument_list|(
name|panel
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// only add tab if DB is not already open
name|Optional
argument_list|<
name|BasePanel
argument_list|>
name|panel
init|=
name|getBasePanelList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|getTab
argument_list|(
name|panel
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addTab
argument_list|(
name|pr
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|focusPanel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * displays the String on the Status Line visible on the bottom of the JabRef mainframe      */
DECL|method|output (final String s)
specifier|public
name|void
name|output
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|statusLine
operator|.
name|setText
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|statusLine
operator|.
name|repaint
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initActions ()
specifier|private
name|void
name|initActions
parameter_list|()
block|{
comment|/*         openDatabaseOnlyActions.clear();         openDatabaseOnlyActions.addAll(Arrays.asList(manageSelectors, mergeDatabaseAction, newSubDatabaseAction, save, copyPreview,                 saveAs, saveSelectedAs, saveSelectedAsPlain, undo, redo, cut, deleteEntry, copy, paste, mark, markSpecific, unmark,                 unmarkAll, rankSubMenu, editEntry, selectAll, copyKey, copyCiteKey, copyKeyAndTitle, copyKeyAndLink, editPreamble, editStrings,                 groupSidePane.getToggleCommand(), makeKeyAction, normalSearch, generalFetcher.getToggleCommand(), mergeEntries, cleanupEntries, exportToClipboard, replaceAll,                 sendAsEmail, downloadFullText, lookupIdentifiers, writeXmpAction, openOfficePanel.getToggleCommand(), findUnlinkedFiles, addToGroup, removeFromGroup,                 moveToGroup, autoLinkFile, resolveDuplicateKeys, openUrl, openFolder, openFile, togglePreview,                 dupliCheck, autoSetFile, newEntryAction, newSpec, customizeAction, plainTextImport, getMassSetField(), getManageKeywords(),                 pushExternalButton.getMenuAction(), closeDatabaseAction, getNextPreviewStyleAction(), getPreviousPreviewStyleAction(), checkIntegrity,                 databaseProperties, abbreviateIso, abbreviateMedline,                 unabbreviate, exportAll, exportSelected, importCurrent, saveAll, focusTable, increaseFontSize, decreseFontSize, defaultFontSize,                 toggleRelevance, toggleQualityAssured, togglePrinted, pushExternalButton.getComponent()));         openDatabaseOnlyActions.addAll(newSpecificEntryAction);         openDatabaseOnlyActions.addAll(specialFieldButtons);         severalDatabasesOnlyActions.clear();         severalDatabasesOnlyActions.addAll(Arrays                 .asList(nextTab, prevTab, sortTabs));         openAndSavedDatabasesOnlyActions.addAll(Collections.singletonList(openConsole));         sharedDatabaseOnlyActions.addAll(Collections.singletonList(pullChangesFromSharedDatabase));         noSharedDatabaseActions.addAll(Arrays.asList(save, saveAll));         oneEntryOnlyActions.clear();         oneEntryOnlyActions.addAll(Arrays.asList(editEntry));         oneEntryWithFileOnlyActions.clear();         oneEntryWithFileOnlyActions.addAll(Arrays.asList(openFolder, openFile));         oneEntryWithURLorDOIOnlyActions.clear();         oneEntryWithURLorDOIOnlyActions.addAll(Arrays.asList(openUrl));         twoEntriesOnlyActions.clear();         twoEntriesOnlyActions.addAll(Arrays.asList(mergeEntries));         atLeastOneEntryActions.clear();         atLeastOneEntryActions.addAll(Arrays.asList(downloadFullText, lookupIdentifiers, exportLinkedFiles));         tabbedPane.getTabs().addListener(this::updateEnabledState);         */
block|}
comment|/**      * Enable or Disable all actions based on the number of open tabs.      *<p>      * The action that are affected are set in initActions.      */
DECL|method|updateEnabledState (ListChangeListener.Change<? extends Tab> change)
specifier|public
name|void
name|updateEnabledState
parameter_list|(
name|ListChangeListener
operator|.
name|Change
argument_list|<
name|?
extends|extends
name|Tab
argument_list|>
name|change
parameter_list|)
block|{
name|int
name|tabCount
init|=
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|change
operator|.
name|next
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|change
operator|.
name|wasAdded
argument_list|()
operator|||
name|change
operator|.
name|wasRemoved
argument_list|()
condition|)
block|{
name|setEnabled
argument_list|(
name|openDatabaseOnlyActions
argument_list|,
name|tabCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|severalDatabasesOnlyActions
argument_list|,
name|tabCount
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tabCount
operator|==
literal|0
condition|)
block|{
name|setEnabled
argument_list|(
name|openAndSavedDatabasesOnlyActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|sharedDatabaseOnlyActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|oneEntryOnlyActions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tabCount
operator|>
literal|0
condition|)
block|{
name|BasePanel
name|current
init|=
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
name|boolean
name|saved
init|=
name|current
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabasePath
argument_list|()
operator|.
name|isPresent
argument_list|()
decl_stmt|;
name|setEnabled
argument_list|(
name|openAndSavedDatabasesOnlyActions
argument_list|,
name|saved
argument_list|)
expr_stmt|;
name|boolean
name|isShared
init|=
name|current
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|SHARED
decl_stmt|;
name|setEnabled
argument_list|(
name|sharedDatabaseOnlyActions
argument_list|,
name|isShared
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|noSharedDatabaseActions
argument_list|,
operator|!
name|isShared
argument_list|)
expr_stmt|;
name|boolean
name|oneEntrySelected
init|=
name|current
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
decl_stmt|;
name|setEnabled
argument_list|(
name|oneEntryOnlyActions
argument_list|,
name|oneEntrySelected
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|oneEntryWithFileOnlyActions
argument_list|,
name|isExistFile
argument_list|(
name|current
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|oneEntryWithURLorDOIOnlyActions
argument_list|,
name|isExistURLorDOI
argument_list|(
name|current
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|twoEntriesSelected
init|=
name|current
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
decl_stmt|;
name|setEnabled
argument_list|(
name|twoEntriesOnlyActions
argument_list|,
name|twoEntriesSelected
argument_list|)
expr_stmt|;
name|boolean
name|atLeastOneEntrySelected
init|=
operator|!
name|current
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|setEnabled
argument_list|(
name|atLeastOneEntryActions
argument_list|,
name|atLeastOneEntrySelected
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method causes all open BasePanels to set up their tables      * anew. When called from PrefsDialog3, this updates to the new      * settings.      */
DECL|method|setupAllTables ()
specifier|public
name|void
name|setupAllTables
parameter_list|()
block|{
comment|// This action can be invoked without an open database, so
comment|// we have to check if we have one before trying to invoke
comment|// methods to execute changes in the preferences.
comment|// We want to notify all tabs about the changes to
comment|// avoid problems when changing the column set.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|BasePanel
name|bf
init|=
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Update tables:
if|if
condition|(
name|bf
operator|.
name|getDatabase
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
name|bf
operator|::
name|setupMainPanel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|collectDatabaseFilePaths ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|collectDatabaseFilePaths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getBasePanelCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
try|try
block|{
comment|// db file exists
if|if
condition|(
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dbPaths
operator|.
name|add
argument_list|(
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbPaths
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Invalid database file path: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dbPaths
return|;
block|}
DECL|method|getUniquePathParts ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getUniquePathParts
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbPaths
init|=
name|collectDatabaseFilePaths
argument_list|()
decl_stmt|;
return|return
name|FileUtil
operator|.
name|uniquePathSubstrings
argument_list|(
name|dbPaths
argument_list|)
return|;
block|}
DECL|method|updateAllTabTitles ()
specifier|public
name|void
name|updateAllTabTitles
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|getUniquePathParts
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getBasePanelCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uniqPath
init|=
name|paths
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|File
argument_list|>
name|file
init|=
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|uniqPath
operator|.
name|equals
argument_list|(
name|file
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|uniqPath
operator|.
name|contains
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
comment|// remove filename
name|uniqPath
operator|=
name|uniqPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uniqPath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separator
argument_list|)
argument_list|)
expr_stmt|;
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setText
argument_list|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getTabTitle
argument_list|()
operator|+
literal|" \u2014 "
operator|+
name|uniqPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set original filename (again)
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setText
argument_list|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getTabTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setText
argument_list|(
name|getBasePanelAt
argument_list|(
name|i
argument_list|)
operator|.
name|getTabTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|file
operator|.
name|map
argument_list|(
name|File
operator|::
name|getAbsolutePath
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addTab (BasePanel basePanel, boolean raisePanel)
specifier|public
name|void
name|addTab
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// add tab
name|Tab
name|newTab
init|=
operator|new
name|Tab
argument_list|(
name|basePanel
operator|.
name|getTabTitle
argument_list|()
argument_list|,
name|basePanel
argument_list|)
decl_stmt|;
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|add
argument_list|(
name|newTab
argument_list|)
expr_stmt|;
comment|// update all tab titles
name|updateAllTabTitles
argument_list|()
expr_stmt|;
if|if
condition|(
name|raisePanel
condition|)
block|{
name|tabbedPane
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|newTab
argument_list|)
expr_stmt|;
block|}
comment|// Register undo/redo listener
name|basePanel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|UndoRedoEventManager
argument_list|()
argument_list|)
expr_stmt|;
name|BibDatabaseContext
name|context
init|=
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|readyForAutosave
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|AutosaveManager
name|autosaver
init|=
name|AutosaveManager
operator|.
name|start
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|autosaver
operator|.
name|registerListener
argument_list|(
operator|new
name|AutosaveUIManager
argument_list|(
name|basePanel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BackupManager
operator|.
name|start
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Track opening
name|trackOpenNewDatabase
argument_list|(
name|basePanel
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|trackOpenNewDatabase (BasePanel basePanel)
specifier|private
name|void
name|trackOpenNewDatabase
parameter_list|(
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|measurements
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|measurements
operator|.
name|put
argument_list|(
literal|"NumberOfEntries"
argument_list|,
operator|(
name|double
operator|)
name|basePanel
operator|.
name|getDatabaseContext
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntryCount
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|getTelemetryClient
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|client
lambda|->
name|client
operator|.
name|trackEvent
argument_list|(
literal|"OpenNewDatabase"
argument_list|,
name|properties
argument_list|,
name|measurements
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addTab (BibDatabaseContext databaseContext, boolean raisePanel)
specifier|public
name|BasePanel
name|addTab
parameter_list|(
name|BibDatabaseContext
name|databaseContext
parameter_list|,
name|boolean
name|raisePanel
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|databaseContext
argument_list|)
expr_stmt|;
name|BasePanel
name|bp
init|=
operator|new
name|BasePanel
argument_list|(
name|this
argument_list|,
name|BasePanelPreferences
operator|.
name|from
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|,
name|databaseContext
argument_list|,
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|addTab
argument_list|(
name|bp
argument_list|,
name|raisePanel
argument_list|)
expr_stmt|;
return|return
name|bp
return|;
block|}
DECL|method|readyForAutosave (BibDatabaseContext context)
specifier|private
name|boolean
name|readyForAutosave
parameter_list|(
name|BibDatabaseContext
name|context
parameter_list|)
block|{
return|return
operator|(
operator|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|SHARED
operator|)
operator|||
operator|(
operator|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|LOCAL
operator|)
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|LOCAL_AUTO_SAVE
argument_list|)
operator|)
operator|)
operator|&&
name|context
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|isPresent
argument_list|()
return|;
block|}
comment|/**      * This method does the job of adding imported entries into the active      * database, or into a new one. It shows the ImportInspectionDialog if      * preferences indicate it should be used. Otherwise it imports directly.      *  @param panel     The BasePanel to add to.      * @param entries   The entries to add.      */
DECL|method|addImportedEntries (final BasePanel panel, final List<BibEntry> entries)
specifier|private
name|void
name|addImportedEntries
parameter_list|(
specifier|final
name|BasePanel
name|panel
parameter_list|,
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|ImportInspectionDialog
name|diag
init|=
operator|new
name|ImportInspectionDialog
argument_list|(
name|JabRefFrame
operator|.
name|this
argument_list|,
name|panel
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|diag
operator|.
name|addEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|diag
operator|.
name|entryListComplete
argument_list|()
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|diag
operator|.
name|toFront
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileHistory ()
specifier|public
name|FileHistoryMenu
name|getFileHistory
parameter_list|()
block|{
return|return
name|fileHistory
return|;
block|}
comment|/**      * Set the visibility of the progress bar in the right end of the      * status line at the bottom of the frame.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarVisible (final boolean visible)
specifier|public
name|void
name|setProgressBarVisible
parameter_list|(
specifier|final
name|boolean
name|visible
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the current value of the progress bar.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarValue (final int value)
specifier|public
name|void
name|setProgressBarValue
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the indeterminate status of the progress bar.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarIndeterminate (final boolean value)
specifier|public
name|void
name|setProgressBarIndeterminate
parameter_list|(
specifier|final
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setIndeterminate
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the maximum value of the progress bar. Always call this method      * before using the progress bar, to set a maximum value appropriate to      * the task at hand.      *<p>      * If not called on the event dispatch thread, this method uses      * SwingUtilities.invokeLater() to do the actual operation on the EDT.      */
DECL|method|setProgressBarMaximum (final int value)
specifier|public
name|void
name|setProgressBarMaximum
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|progressBar
operator|.
name|setMaximum
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|progressBar
operator|.
name|setMaximum
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return a boolean, if the selected entry have file      * @param selectEntryList A selected entries list of the current base pane      * @return true, if the selected entry contains file.      * false, if multiple entries are selected or the selected entry doesn't contains file      */
DECL|method|isExistFile (List<BibEntry> selectEntryList)
specifier|private
name|boolean
name|isExistFile
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectEntryList
parameter_list|)
block|{
if|if
condition|(
name|selectEntryList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|BibEntry
name|selectedEntry
init|=
name|selectEntryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|selectedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|isPresent
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return a boolean, if the selected entry have url or doi      * @param selectEntryList A selected entries list of the current base pane      * @return true, if the selected entry contains url or doi.      * false, if multiple entries are selected or the selected entry doesn't contains url or doi      */
DECL|method|isExistURLorDOI (List<BibEntry> selectEntryList)
specifier|private
name|boolean
name|isExistURLorDOI
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectEntryList
parameter_list|)
block|{
if|if
condition|(
name|selectEntryList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|BibEntry
name|selectedEntry
init|=
name|selectEntryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|selectedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|||
name|selectedEntry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|DOI
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|showMessage (String message, String title, int msgType)
specifier|public
name|void
name|showMessage
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|title
parameter_list|,
name|int
name|msgType
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|message
argument_list|,
name|title
argument_list|,
name|msgType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStatus (String s)
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|output
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|showMessage (String message)
specifier|public
name|void
name|showMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|showSaveDialog (String filename)
specifier|private
name|int
name|showSaveDialog
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|Object
index|[]
name|options
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save changes"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Discard changes"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Return to JabRef"
argument_list|)
block|}
decl_stmt|;
return|return
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
literal|null
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Library '%0' has changed."
argument_list|,
name|filename
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Save before closing"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|options
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|method|closeTab (Tab tab)
specifier|private
name|void
name|closeTab
parameter_list|(
name|Tab
name|tab
parameter_list|)
block|{
name|closeTab
argument_list|(
name|getBasePanel
argument_list|(
name|tab
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getBasePanel (Tab tab)
specifier|private
name|BasePanel
name|getBasePanel
parameter_list|(
name|Tab
name|tab
parameter_list|)
block|{
return|return
operator|(
name|BasePanel
operator|)
name|tab
operator|.
name|getContent
argument_list|()
return|;
block|}
DECL|method|closeTab (BasePanel panel)
specifier|private
name|void
name|closeTab
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
comment|// empty tab without database
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BibDatabaseContext
name|context
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|.
name|isModified
argument_list|()
operator|&&
operator|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|LOCAL
operator|)
condition|)
block|{
if|if
condition|(
name|confirmClose
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|removeTab
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|SHARED
condition|)
block|{
name|context
operator|.
name|convertToLocalDatabase
argument_list|()
expr_stmt|;
name|context
operator|.
name|getDBMSSynchronizer
argument_list|()
operator|.
name|closeSharedDatabase
argument_list|()
expr_stmt|;
name|context
operator|.
name|clearDBMSSynchronizer
argument_list|()
expr_stmt|;
name|removeTab
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeTab
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
name|AutosaveManager
operator|.
name|shutdown
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|BackupManager
operator|.
name|shutdown
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|// Ask if the user really wants to close, if the base has not been saved
DECL|method|confirmClose (BasePanel panel)
specifier|private
name|boolean
name|confirmClose
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|boolean
name|close
init|=
literal|false
decl_stmt|;
name|String
name|filename
decl_stmt|;
name|filename
operator|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getDatabaseFile
argument_list|()
operator|.
name|map
argument_list|(
name|File
operator|::
name|getAbsolutePath
argument_list|)
operator|.
name|orElse
argument_list|(
name|GUIGlobals
operator|.
name|UNTITLED_TITLE
argument_list|)
expr_stmt|;
name|int
name|answer
init|=
name|showSaveDialog
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
comment|// The user wants to save.
try|try
block|{
name|SaveDatabaseAction
name|saveAction
init|=
operator|new
name|SaveDatabaseAction
argument_list|(
name|panel
argument_list|)
decl_stmt|;
name|saveAction
operator|.
name|runCommand
argument_list|()
expr_stmt|;
if|if
condition|(
name|saveAction
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|close
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// do not close
block|}
block|}
elseif|else
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
comment|// discard changes
name|close
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|close
return|;
block|}
DECL|method|removeTab (BasePanel panel)
specifier|private
name|void
name|removeTab
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|panel
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|remove
argument_list|(
name|getTab
argument_list|(
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|()
expr_stmt|;
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Closed library"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
comment|// update tab titles
name|updateAllTabTitles
argument_list|()
expr_stmt|;
block|}
DECL|method|closeCurrentTab ()
specifier|public
name|void
name|closeCurrentTab
parameter_list|()
block|{
name|removeTab
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getOpenDatabaseAction ()
specifier|public
name|OpenDatabaseAction
name|getOpenDatabaseAction
parameter_list|()
block|{
return|return
operator|new
name|OpenDatabaseAction
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getStatusLineText ()
specifier|public
name|String
name|getStatusLineText
parameter_list|()
block|{
return|return
name|statusLine
operator|.
name|getText
argument_list|()
return|;
block|}
DECL|method|getSidePaneManager ()
specifier|public
name|SidePaneManager
name|getSidePaneManager
parameter_list|()
block|{
return|return
name|sidePaneManager
return|;
block|}
DECL|method|getPushApplications ()
specifier|public
name|PushToApplications
name|getPushApplications
parameter_list|()
block|{
return|return
name|pushApplications
return|;
block|}
DECL|method|getGlobalSearchBar ()
specifier|public
name|GlobalSearchBar
name|getGlobalSearchBar
parameter_list|()
block|{
return|return
name|globalSearchBar
return|;
block|}
DECL|method|getUndoManager ()
specifier|public
name|CountingUndoManager
name|getUndoManager
parameter_list|()
block|{
return|return
name|undoManager
return|;
block|}
DECL|method|getDialogService ()
specifier|public
name|DialogService
name|getDialogService
parameter_list|()
block|{
return|return
name|dialogService
return|;
block|}
DECL|class|GeneralAction
specifier|private
class|class
name|GeneralAction
extends|extends
name|MnemonicAwareAction
block|{
DECL|field|command
specifier|private
specifier|final
name|Actions
name|command
decl_stmt|;
DECL|method|GeneralAction (Actions command, String text)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (Actions command, String text, String description)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (Actions command, String text, Icon icon)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (Actions command, String text, String description, Icon icon)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (Actions command, String text, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (Actions command, String text, String description, KeyStroke key)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|KeyStroke
name|key
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|GeneralAction (Actions command, String text, String description, KeyStroke key, Icon icon)
specifier|public
name|GeneralAction
parameter_list|(
name|Actions
name|command
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|description
parameter_list|,
name|KeyStroke
name|key
parameter_list|,
name|Icon
name|icon
parameter_list|)
block|{
name|super
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|NAME
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|ACCELERATOR_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|tabbedPane
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|getCurrentBasePanel
argument_list|()
operator|.
name|runCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem with executing command: "
operator|+
name|command
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Action '"
operator|+
name|command
operator|+
literal|"' must be disabled when no database is open."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The action concerned with closing the window.      */
DECL|class|CloseAction
specifier|private
class|class
name|CloseAction
extends|extends
name|SimpleCommand
block|{
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|quit
argument_list|()
expr_stmt|;
name|Platform
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Class for handling general actions; cut, copy and paste. The focused component is      * kept track of by Globals.focusListener, and we call the action stored under the      * relevant name in its action map.      */
DECL|class|EditAction
specifier|private
class|class
name|EditAction
extends|extends
name|SimpleCommand
block|{
DECL|field|command
specifier|private
specifier|final
name|Actions
name|command
decl_stmt|;
DECL|method|EditAction (Actions command)
specifier|public
name|EditAction
parameter_list|(
name|Actions
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JComponent
name|source
init|=
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
decl_stmt|;
name|Action
name|action
init|=
name|source
operator|.
name|getActionMap
argument_list|()
operator|.
name|get
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
name|command
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setDefaultTableFontSize ()
specifier|private
name|void
name|setDefaultTableFontSize
parameter_list|()
block|{
name|GUIGlobals
operator|.
name|setFont
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getIntDefault
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
name|basePanel
operator|.
name|updateTableFont
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Table font size is %0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|increaseTableFontSize ()
specifier|private
name|void
name|increaseTableFontSize
parameter_list|()
block|{
name|GUIGlobals
operator|.
name|setFont
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
name|basePanel
operator|.
name|updateTableFont
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Table font size is %0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|decreaseTableFontSize ()
specifier|private
name|void
name|decreaseTableFontSize
parameter_list|()
block|{
name|int
name|currentSize
init|=
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentSize
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|GUIGlobals
operator|.
name|setFont
argument_list|(
name|currentSize
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|getBasePanelList
argument_list|()
control|)
block|{
name|basePanel
operator|.
name|updateTableFont
argument_list|()
expr_stmt|;
block|}
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Table font size is %0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GUIGlobals
operator|.
name|currentFont
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|CloseDatabaseAction
specifier|private
class|class
name|CloseDatabaseAction
extends|extends
name|SimpleCommand
block|{
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|closeTab
argument_list|(
name|getCurrentBasePanel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UndoRedoEventManager
specifier|private
class|class
name|UndoRedoEventManager
block|{
annotation|@
name|Subscribe
DECL|method|listen (UndoRedoEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|UndoRedoEvent
name|event
parameter_list|)
block|{
name|updateTexts
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|JabRefFrame
operator|.
name|this
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (AddUndoableActionEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|AddUndoableActionEvent
name|event
parameter_list|)
block|{
name|updateTexts
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|updateTexts (UndoChangeEvent event)
specifier|private
name|void
name|updateTexts
parameter_list|(
name|UndoChangeEvent
name|event
parameter_list|)
block|{
comment|/* TODO             SwingUtilities.invokeLater(() -> {                 undo.putValue(Action.SHORT_DESCRIPTION, event.getUndoDescription());                 undo.setEnabled(event.isCanUndo());                 redo.putValue(Action.SHORT_DESCRIPTION, event.getRedoDescription());                 redo.setEnabled(event.isCanRedo());             });             */
block|}
block|}
block|}
end_class

end_unit

