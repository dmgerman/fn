begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.push
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|push
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|StateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|JabRefIcon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_comment
comment|/**  * An Action class representing the process of invoking a PushToApplication operation.  */
end_comment

begin_class
DECL|class|PushToApplicationAction
specifier|public
class|class
name|PushToApplicationAction
extends|extends
name|SimpleCommand
implements|implements
name|Runnable
block|{
DECL|field|operation
specifier|private
name|PushToApplication
name|operation
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|entries
specifier|private
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
DECL|method|PushToApplicationAction (final JabRefFrame frame, final StateManager stateManager)
specifier|public
name|PushToApplicationAction
parameter_list|(
specifier|final
name|JabRefFrame
name|frame
parameter_list|,
specifier|final
name|StateManager
name|stateManager
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|getLastUsedApplication
argument_list|(
name|frame
operator|.
name|getPushApplications
argument_list|()
operator|.
name|getApplications
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|executable
operator|.
name|bind
argument_list|(
name|EasyBind
operator|.
name|map
argument_list|(
name|stateManager
operator|.
name|activeDatabaseProperty
argument_list|()
argument_list|,
name|Optional
operator|::
name|isPresent
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastUsedApplication (List<PushToApplication> pushActions)
specifier|private
name|PushToApplication
name|getLastUsedApplication
parameter_list|(
name|List
argument_list|<
name|PushToApplication
argument_list|>
name|pushActions
parameter_list|)
block|{
name|String
name|appSelected
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|PUSH_TO_APPLICATION
argument_list|)
decl_stmt|;
for|for
control|(
name|PushToApplication
name|application
range|:
name|pushActions
control|)
block|{
if|if
condition|(
name|application
operator|.
name|getApplicationName
argument_list|()
operator|.
name|equals
argument_list|(
name|appSelected
argument_list|)
condition|)
block|{
return|return
name|application
return|;
block|}
block|}
comment|// Nothing found, pick first
return|return
name|pushActions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getActionInformation ()
specifier|public
name|Action
name|getActionInformation
parameter_list|()
block|{
return|return
operator|new
name|Action
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|JabRefIcon
argument_list|>
name|getIcon
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|operation
operator|.
name|getIcon
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|KeyBinding
argument_list|>
name|getKeyBinding
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|KeyBinding
operator|.
name|PUSH_TO_APPLICATION
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Push entries to external application (%0)"
argument_list|,
name|operation
operator|.
name|getApplicationName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|panel
operator|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
expr_stmt|;
comment|// Check if a BasePanel exists:
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Check if any entries are selected:
name|entries
operator|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
expr_stmt|;
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|frame
operator|.
name|getDialogService
argument_list|()
operator|.
name|showErrorDialogAndWait
argument_list|(
name|operation
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires one or more entries to be selected."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If required, check that all entries have BibTeX keys defined:
if|if
condition|(
name|operation
operator|.
name|requiresBibtexKeys
argument_list|()
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|isPresent
argument_list|()
operator|)
operator|||
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|frame
operator|.
name|getDialogService
argument_list|()
operator|.
name|showErrorDialogAndWait
argument_list|(
name|operation
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"This operation requires all selected entries to have BibTeX keys defined."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// All set, call the operation in a new thread:
name|JabRefExecutorService
operator|.
name|INSTANCE
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Do the operation:
name|operation
operator|.
name|pushEntries
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entries
argument_list|,
name|getKeyString
argument_list|(
name|entries
argument_list|)
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call the operationCompleted() method on the event dispatch thread:
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|operation
operator|.
name|operationCompleted
argument_list|(
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeyString (List<BibEntry> bibentries)
specifier|private
specifier|static
name|String
name|getKeyString
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bibentries
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|citeKey
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BibEntry
name|bes
range|:
name|bibentries
control|)
block|{
name|citeKey
operator|=
name|bes
operator|.
name|getCiteKeyOptional
argument_list|()
expr_stmt|;
comment|// if the key is empty we give a warning and ignore this entry
comment|// TODO: Give warning
if|if
condition|(
operator|!
operator|(
name|citeKey
operator|.
name|isPresent
argument_list|()
operator|)
operator|||
name|citeKey
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|first
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|citeKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|citeKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

