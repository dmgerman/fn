begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.push
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|push
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|PushToApplicationSettings
specifier|public
class|class
name|PushToApplicationSettings
block|{
DECL|field|commandLabel
specifier|protected
specifier|final
name|Label
name|commandLabel
decl_stmt|;
DECL|field|path
specifier|protected
specifier|final
name|TextField
name|path
decl_stmt|;
DECL|field|settingsPane
specifier|protected
specifier|final
name|GridPane
name|settingsPane
decl_stmt|;
DECL|field|application
specifier|private
specifier|final
name|AbstractPushToApplication
name|application
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|browse
specifier|private
specifier|final
name|Button
name|browse
decl_stmt|;
DECL|method|PushToApplicationSettings (PushToApplication application, DialogService dialogService)
specifier|public
name|PushToApplicationSettings
parameter_list|(
name|PushToApplication
name|application
parameter_list|,
name|DialogService
name|dialogService
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
operator|(
name|AbstractPushToApplication
operator|)
name|application
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|settingsPane
operator|=
operator|new
name|GridPane
argument_list|()
expr_stmt|;
name|settingsPane
operator|.
name|setHgap
argument_list|(
literal|10.0
argument_list|)
expr_stmt|;
name|settingsPane
operator|.
name|setVgap
argument_list|(
literal|4.0
argument_list|)
expr_stmt|;
name|commandLabel
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|path
operator|=
operator|new
name|TextField
argument_list|()
expr_stmt|;
name|browse
operator|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|application
operator|.
name|initParameters
argument_list|()
expr_stmt|;
comment|// In case the application name and the actual command is not the same, add the command in brackets
name|StringBuilder
name|commandLine
init|=
operator|new
name|StringBuilder
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to %0"
argument_list|,
name|application
operator|.
name|getApplicationName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|application
operator|.
name|getCommandName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|commandLine
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commandLine
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|application
operator|.
name|getCommandName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"):"
argument_list|)
expr_stmt|;
block|}
name|commandLabel
operator|.
name|setText
argument_list|(
name|commandLine
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settingsPane
operator|.
name|add
argument_list|(
name|commandLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|path
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|this
operator|.
name|application
operator|.
name|commandPathPreferenceKey
argument_list|)
argument_list|)
expr_stmt|;
name|settingsPane
operator|.
name|add
argument_list|(
name|path
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|withInitialDirectory
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|browse
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|dialogService
operator|.
name|showFileOpenDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|f
lambda|->
name|path
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|settingsPane
operator|.
name|add
argument_list|(
name|browse
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called to indicate that the settings panel returned from the getSettingsPanel() method has been      * shown to the user and that the user has indicated that the settings should be stored. This method must store the      * state of the widgets in the settings panel to Globals.prefs.      */
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|application
operator|.
name|commandPathPreferenceKey
argument_list|,
name|path
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getSettingsPane ()
specifier|public
name|GridPane
name|getSettingsPane
parameter_list|()
block|{
return|return
name|settingsPane
return|;
block|}
block|}
end_class

end_unit

