begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.search
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ComponentEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JSplitPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|embed
operator|.
name|swing
operator|.
name|JFXPanel
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Scene
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|PreviewPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|customjfx
operator|.
name|CustomJFXPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileMenuItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|filelist
operator|.
name|FileListTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableNameFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|renderer
operator|.
name|GeneralRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|comparator
operator|.
name|IconComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|EntryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|comparator
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|SearchPreferences
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|AbstractTableComparatorChooser
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|AdvancedTableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventSelectionModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventTableModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|GlazedListsSwing
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|TableComparatorChooser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Dialog to display search results, potentially from more than one BasePanel, with  * possibility to preview and to locate each entry in the main window.  */
end_comment

begin_class
DECL|class|SearchResultFrame
specifier|public
class|class
name|SearchResultFrame
block|{
DECL|field|FIELDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|FIELDS
init|=
operator|new
name|String
index|[]
block|{
name|FieldName
operator|.
name|AUTHOR
block|,
name|FieldName
operator|.
name|TITLE
block|,
name|FieldName
operator|.
name|YEAR
block|,
name|FieldName
operator|.
name|JOURNAL
block|}
decl_stmt|;
DECL|field|DATABASE_COL
specifier|private
specifier|static
specifier|final
name|int
name|DATABASE_COL
init|=
literal|0
decl_stmt|;
DECL|field|FILE_COL
specifier|private
specifier|static
specifier|final
name|int
name|FILE_COL
init|=
literal|1
decl_stmt|;
DECL|field|URL_COL
specifier|private
specifier|static
specifier|final
name|int
name|URL_COL
init|=
literal|2
decl_stmt|;
DECL|field|PAD
specifier|private
specifier|static
specifier|final
name|int
name|PAD
init|=
literal|3
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SearchResultFrame
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|searchResultFrame
specifier|private
name|JFrame
name|searchResultFrame
decl_stmt|;
DECL|field|fileLabel
specifier|private
specifier|final
name|JLabel
name|fileLabel
init|=
operator|new
name|JLabel
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|urlLabel
specifier|private
specifier|final
name|JLabel
name|urlLabel
init|=
operator|new
name|JLabel
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|WWW
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|contentPane
specifier|private
specifier|final
name|JSplitPane
name|contentPane
init|=
operator|new
name|JSplitPane
argument_list|(
name|JSplitPane
operator|.
name|VERTICAL_SPLIT
argument_list|)
decl_stmt|;
DECL|field|entries
specifier|private
specifier|final
name|EventList
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
operator|new
name|BasicEventList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|entryHome
specifier|private
specifier|final
name|Map
argument_list|<
name|BibEntry
argument_list|,
name|BasePanel
argument_list|>
name|entryHome
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|model
specifier|private
name|DefaultEventTableModel
argument_list|<
name|BibEntry
argument_list|>
name|model
decl_stmt|;
DECL|field|sortedEntries
specifier|private
name|SortedList
argument_list|<
name|BibEntry
argument_list|>
name|sortedEntries
decl_stmt|;
DECL|field|entryTable
specifier|private
name|JTable
name|entryTable
decl_stmt|;
DECL|field|preview
specifier|private
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|searchQuery
specifier|private
specifier|final
name|SearchQuery
name|searchQuery
decl_stmt|;
DECL|field|globalSearch
specifier|private
specifier|final
name|boolean
name|globalSearch
decl_stmt|;
DECL|method|SearchResultFrame (JabRefFrame frame, String title, SearchQuery searchQuery, boolean globalSearch)
specifier|public
name|SearchResultFrame
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|String
name|title
parameter_list|,
name|SearchQuery
name|searchQuery
parameter_list|,
name|boolean
name|globalSearch
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|this
operator|.
name|searchQuery
operator|=
name|searchQuery
expr_stmt|;
name|this
operator|.
name|globalSearch
operator|=
name|globalSearch
expr_stmt|;
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|setSearchResultFrame
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|init (String title)
specifier|private
name|void
name|init
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|searchResultFrame
operator|=
operator|new
name|JFrame
argument_list|()
expr_stmt|;
name|searchResultFrame
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|searchResultFrame
operator|.
name|setIconImages
argument_list|(
name|IconTheme
operator|.
name|getLogoSet
argument_list|()
argument_list|)
expr_stmt|;
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getPreviewPreferences
argument_list|()
argument_list|,
name|frame
operator|.
name|getDialogService
argument_list|()
argument_list|)
expr_stmt|;
name|sortedEntries
operator|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|entries
argument_list|,
operator|new
name|EntryComparator
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|FieldName
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|=
operator|(
name|DefaultEventTableModel
argument_list|<
name|BibEntry
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventTableModelWithThreadProxyList
argument_list|(
name|sortedEntries
argument_list|,
operator|new
name|EntryTableFormat
argument_list|()
argument_list|)
expr_stmt|;
name|entryTable
operator|=
operator|new
name|JTable
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|GeneralRenderer
name|renderer
init|=
operator|new
name|GeneralRenderer
argument_list|(
name|Color
operator|.
name|white
argument_list|)
decl_stmt|;
name|entryTable
operator|.
name|setDefaultRenderer
argument_list|(
name|JLabel
operator|.
name|class
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|setDefaultRenderer
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|renderer
argument_list|)
expr_stmt|;
name|setWidths
argument_list|()
expr_stmt|;
name|TableComparatorChooser
argument_list|<
name|BibEntry
argument_list|>
name|tableSorter
init|=
name|TableComparatorChooser
operator|.
name|install
argument_list|(
name|entryTable
argument_list|,
name|sortedEntries
argument_list|,
name|AbstractTableComparatorChooser
operator|.
name|MULTIPLE_COLUMN_KEYBOARD
argument_list|)
decl_stmt|;
name|setupComparatorChooser
argument_list|(
name|tableSorter
argument_list|)
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|entryTable
argument_list|)
decl_stmt|;
specifier|final
name|DefaultEventSelectionModel
argument_list|<
name|BibEntry
argument_list|>
name|selectionModel
init|=
operator|(
name|DefaultEventSelectionModel
argument_list|<
name|BibEntry
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventSelectionModelWithThreadProxyList
argument_list|(
name|sortedEntries
argument_list|)
decl_stmt|;
name|entryTable
operator|.
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|addListEventListener
argument_list|(
operator|new
name|EntrySelectionListener
argument_list|()
argument_list|)
expr_stmt|;
name|entryTable
operator|.
name|addMouseListener
argument_list|(
operator|new
name|TableClickListener
argument_list|()
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setTopComponent
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|JFXPanel
name|container
init|=
name|CustomJFXPanel
operator|.
name|wrap
argument_list|(
operator|new
name|Scene
argument_list|(
name|preview
argument_list|)
argument_list|)
decl_stmt|;
name|contentPane
operator|.
name|setBottomComponent
argument_list|(
name|container
argument_list|)
expr_stmt|;
comment|// Key bindings:
name|AbstractAction
name|closeAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ActionMap
name|actionMap
init|=
name|contentPane
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|inputMap
init|=
name|contentPane
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DATABASE
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|closeAction
argument_list|)
expr_stmt|;
name|actionMap
operator|=
name|entryTable
operator|.
name|getActionMap
argument_list|()
expr_stmt|;
name|inputMap
operator|=
name|entryTable
operator|.
name|getInputMap
argument_list|()
expr_stmt|;
comment|//Override 'selectNextColumnCell' and 'selectPreviousColumnCell' to move rows instead of cells on TAB
name|actionMap
operator|.
name|put
argument_list|(
literal|"selectNextColumnCell"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|selectNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"selectPreviousColumnCell"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|selectPreviousEntry
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"selectNextRow"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|selectNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"selectPreviousRow"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|selectPreviousEntry
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|selectFirst
init|=
literal|"selectFirst"
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SELECT_FIRST_ENTRY
argument_list|)
argument_list|,
name|selectFirst
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
name|selectFirst
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|selectFirstEntry
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|selectLast
init|=
literal|"selectLast"
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|SELECT_LAST_ENTRY
argument_list|)
argument_list|,
name|selectLast
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
name|selectLast
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|selectLastEntry
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"copy"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|BibEntry
argument_list|>
name|bes
init|=
name|selectionModel
operator|.
name|getSelected
argument_list|()
decl_stmt|;
try|try
block|{
name|Globals
operator|.
name|clipboardManager
operator|.
name|setContent
argument_list|(
name|bes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while serializing entries for clipboard"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Copied"
argument_list|)
operator|+
literal|' '
operator|+
operator|(
name|bes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
name|bes
operator|.
name|size
argument_list|()
operator|+
literal|" "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"entries"
argument_list|)
else|:
literal|"1 "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"entry"
argument_list|)
operator|+
literal|'.'
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// override standard enter-action; enter opens the selected entry
name|entryTable
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
argument_list|)
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_ENTER
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"Enter"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"Enter"
argument_list|,
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
name|BibEntry
name|entry
init|=
name|sortedEntries
operator|.
name|get
argument_list|(
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
decl_stmt|;
name|selectEntryInBasePanel
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|searchResultFrame
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowOpened
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|event
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|searchResultFrame
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|contentPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|// Remember and default to last size:
name|SearchPreferences
name|searchPreferences
init|=
operator|new
name|SearchPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
decl_stmt|;
name|searchResultFrame
operator|.
name|setSize
argument_list|(
name|searchPreferences
operator|.
name|getSeachDialogWidth
argument_list|()
argument_list|,
name|searchPreferences
operator|.
name|getSeachDialogHeight
argument_list|()
argument_list|)
expr_stmt|;
name|searchResultFrame
operator|.
name|setLocation
argument_list|(
name|searchPreferences
operator|.
name|getSearchDialogPosX
argument_list|()
argument_list|,
name|searchPreferences
operator|.
name|getSearchDialogPosY
argument_list|()
argument_list|)
expr_stmt|;
name|searchResultFrame
operator|.
name|addComponentListener
argument_list|(
operator|new
name|ComponentAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|componentResized
parameter_list|(
name|ComponentEvent
name|e
parameter_list|)
block|{
operator|new
name|SearchPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
operator|.
name|setSearchDialogWidth
argument_list|(
name|searchResultFrame
operator|.
name|getSize
argument_list|()
operator|.
name|width
argument_list|)
operator|.
name|setSearchDialogHeight
argument_list|(
name|searchResultFrame
operator|.
name|getSize
argument_list|()
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|componentMoved
parameter_list|(
name|ComponentEvent
name|e
parameter_list|)
block|{
operator|new
name|SearchPreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
operator|.
name|setSearchDialogPosX
argument_list|(
name|searchResultFrame
operator|.
name|getLocation
argument_list|()
operator|.
name|x
argument_list|)
operator|.
name|setSearchDialogPosY
argument_list|(
name|searchResultFrame
operator|.
name|getLocation
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Control the visibility of the dialog.      * @param visible true to show dialog, false to hide.      */
DECL|method|setVisible (boolean visible)
specifier|public
name|void
name|setVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|searchResultFrame
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
DECL|method|selectFirstEntry ()
specifier|public
name|void
name|selectFirstEntry
parameter_list|()
block|{
name|selectEntry
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|selectLastEntry ()
specifier|public
name|void
name|selectLastEntry
parameter_list|()
block|{
name|selectEntry
argument_list|(
name|entryTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|selectPreviousEntry ()
specifier|public
name|void
name|selectPreviousEntry
parameter_list|()
block|{
name|selectEntry
argument_list|(
operator|(
operator|(
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
operator|-
literal|1
operator|)
operator|+
name|entryTable
operator|.
name|getRowCount
argument_list|()
operator|)
operator|%
name|entryTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|selectNextEntry ()
specifier|public
name|void
name|selectNextEntry
parameter_list|()
block|{
name|selectEntry
argument_list|(
operator|(
name|entryTable
operator|.
name|getSelectedRow
argument_list|()
operator|+
literal|1
operator|)
operator|%
name|entryTable
operator|.
name|getRowCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|selectEntry (int index)
specifier|public
name|void
name|selectEntry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|(
name|index
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|index
operator|<
name|entryTable
operator|.
name|getRowCount
argument_list|()
operator|)
condition|)
block|{
name|entryTable
operator|.
name|changeSelection
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set up the comparators for each column, so the user can modify sort order      * by clicking the column labels.      * @param comparatorChooser The comparator chooser controlling the sort order.      */
DECL|method|setupComparatorChooser (TableComparatorChooser<BibEntry> comparatorChooser)
specifier|private
name|void
name|setupComparatorChooser
parameter_list|(
name|TableComparatorChooser
argument_list|<
name|BibEntry
argument_list|>
name|comparatorChooser
parameter_list|)
block|{
name|List
argument_list|<
name|Comparator
argument_list|>
name|comparators
decl_stmt|;
comment|// Icon columns:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PAD
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|FILE_COL
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|URL_COL
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|IconComparator
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|DATABASE_COL
condition|)
block|{
name|comparators
operator|.
name|add
argument_list|(
parameter_list|(
name|entry1
parameter_list|,
name|entry2
parameter_list|)
lambda|->
block|{
name|String
name|databaseTitle1
init|=
name|entryHome
operator|.
name|get
argument_list|(
name|entry1
argument_list|)
operator|.
name|getTabTitle
argument_list|()
decl_stmt|;
name|String
name|databaseTitle2
init|=
name|entryHome
operator|.
name|get
argument_list|(
name|entry2
argument_list|)
operator|.
name|getTabTitle
argument_list|()
decl_stmt|;
return|return
name|databaseTitle1
operator|.
name|compareTo
argument_list|(
name|databaseTitle2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remaining columns:
for|for
control|(
name|int
name|i
init|=
name|PAD
init|;
name|i
operator|<
operator|(
name|PAD
operator|+
name|FIELDS
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|comparators
operator|=
name|comparatorChooser
operator|.
name|getComparatorsForColumn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comparators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|comparators
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|FIELDS
index|[
name|i
operator|-
name|PAD
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sortedEntries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|comparatorChooser
operator|.
name|appendComparator
argument_list|(
name|PAD
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sortedEntries
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|/**      * Set column widths according to which field is shown, and lock icon columns      * to a suitable width.      */
DECL|method|setWidths ()
specifier|private
name|void
name|setWidths
parameter_list|()
block|{
name|TableColumnModel
name|cm
init|=
name|entryTable
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|PAD
operator|+
name|FIELDS
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|FILE_COL
case|:
case|case
name|URL_COL
case|:
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMinWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setMaxWidth
argument_list|(
name|GUIGlobals
operator|.
name|WIDTH_ICON_COL
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATABASE_COL
case|:
block|{
name|Double
name|width
init|=
name|InternalBibtexFields
operator|.
name|getFieldLength
argument_list|(
name|FieldName
operator|.
name|AUTHOR
argument_list|)
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|width
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|Double
name|width
init|=
name|InternalBibtexFields
operator|.
name|getFieldLength
argument_list|(
name|FIELDS
index|[
name|i
operator|-
name|PAD
index|]
argument_list|)
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
name|i
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
name|width
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**      * Add a list of entries to the table.      * @param newEntries The list of entries.      * @param panel A reference to the BasePanel where the entries belong.      */
DECL|method|addEntries (List<BibEntry> newEntries, BasePanel panel)
specifier|public
name|void
name|addEntries
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|newEntries
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|newEntries
control|)
block|{
name|addEntry
argument_list|(
name|entry
argument_list|,
name|panel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a single entry to the table.      * @param entry The entry to add.      * @param panel A reference to the BasePanel where the entry belongs.      */
DECL|method|addEntry (BibEntry entry, BasePanel panel)
specifier|private
name|void
name|addEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryHome
operator|.
name|put
argument_list|(
name|entry
argument_list|,
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|preview
operator|.
name|getEntry
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|!
name|preview
operator|.
name|getBasePanel
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|preview
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|preview
operator|.
name|setBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|preview
operator|.
name|setDatabaseContext
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|selectEntryInBasePanel (BibEntry entry)
specifier|private
name|void
name|selectEntryInBasePanel
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|BasePanel
name|basePanel
init|=
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|frame
operator|.
name|showBasePanel
argument_list|(
name|basePanel
argument_list|)
expr_stmt|;
name|basePanel
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
name|basePanel
operator|.
name|clearAndSelect
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|setSearchResultFrame
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|searchResultFrame
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|frame
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
DECL|method|focus ()
specifier|public
name|void
name|focus
parameter_list|()
block|{
name|entryTable
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
DECL|method|getSearchQuery ()
specifier|public
name|SearchQuery
name|getSearchQuery
parameter_list|()
block|{
return|return
name|searchQuery
return|;
block|}
DECL|method|isGlobalSearch ()
specifier|public
name|boolean
name|isGlobalSearch
parameter_list|()
block|{
return|return
name|globalSearch
return|;
block|}
comment|/**      * Mouse listener for the entry table. Processes icon clicks to open external      * files or urls, as well as the opening of the context menu.      */
DECL|class|TableClickListener
class|class
name|TableClickListener
extends|extends
name|MouseAdapter
block|{
annotation|@
name|Override
DECL|method|mouseReleased (MouseEvent e)
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mousePressed (MouseEvent e)
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// First find the row on which the user has clicked.
specifier|final
name|int
name|row
init|=
name|entryTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
comment|// A double click on an entry should highlight the entry in its BasePanel:
if|if
condition|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
condition|)
block|{
name|selectEntryInBasePanel
argument_list|(
name|model
operator|.
name|getElementAt
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mouseClicked (MouseEvent e)
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|processPopupTrigger
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//if (e.)
specifier|final
name|int
name|col
init|=
name|entryTable
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|entryTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|<
name|PAD
condition|)
block|{
name|BibEntry
name|entry
init|=
name|sortedEntries
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|BasePanel
name|p
init|=
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|col
condition|)
block|{
case|case
name|FILE_COL
case|:
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
condition|)
block|{
name|FileListTableModel
name|tableModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|tableModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableModel
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|FileListEntry
name|fl
init|=
name|tableModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|frame
argument_list|,
literal|""
argument_list|,
name|fl
operator|.
name|getLink
argument_list|()
argument_list|,
literal|null
argument_list|,
name|p
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|fl
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|URL_COL
case|:
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|link
lambda|->
block|{
try|try
block|{
name|JabRefDesktop
operator|.
name|openExternalViewer
argument_list|(
name|p
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|link
argument_list|,
name|FieldName
operator|.
name|URL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not open viewer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
comment|/**          * If the user has signalled the opening of a context menu, the event          * gets redirected to this method. Here we open a file link menu if the          * user is pointing at a file link icon. Otherwise a general context          * menu should be shown.          * @param e The triggering mouse event.          */
DECL|method|processPopupTrigger (MouseEvent e)
specifier|public
name|void
name|processPopupTrigger
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|BibEntry
name|entry
init|=
name|sortedEntries
operator|.
name|get
argument_list|(
name|entryTable
operator|.
name|rowAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BasePanel
name|p
init|=
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|int
name|col
init|=
name|entryTable
operator|.
name|columnAtPoint
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
argument_list|)
decl_stmt|;
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|col
operator|==
name|FILE_COL
condition|)
block|{
comment|// We use a FileListTableModel to parse the field content:
name|FileListTableModel
name|fileList
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fileList
operator|::
name|setContent
argument_list|)
expr_stmt|;
comment|// If there are one or more links, open the first one:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileListEntry
name|flEntry
init|=
name|fileList
operator|.
name|getEntry
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|description
init|=
name|flEntry
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|description
operator|==
literal|null
operator|)
operator|||
operator|(
name|description
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|description
operator|=
name|flEntry
operator|.
name|getLink
argument_list|()
expr_stmt|;
block|}
name|menu
operator|.
name|add
argument_list|(
operator|new
name|ExternalFileMenuItem
argument_list|(
name|p
operator|.
name|frame
argument_list|()
argument_list|,
name|description
argument_list|,
name|flEntry
operator|.
name|getLink
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIcon
argument_list|()
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|p
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|flEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|menu
operator|.
name|show
argument_list|(
name|entryTable
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The listener for the Glazed list monitoring the current selection.      * When selection changes, we need to update the preview panel.      */
DECL|class|EntrySelectionListener
specifier|private
class|class
name|EntrySelectionListener
implements|implements
name|ListEventListener
argument_list|<
name|BibEntry
argument_list|>
block|{
annotation|@
name|Override
DECL|method|listChanged (ListEvent<BibEntry> listEvent)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
argument_list|<
name|BibEntry
argument_list|>
name|listEvent
parameter_list|)
block|{
if|if
condition|(
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|BibEntry
name|entry
init|=
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Find out which BasePanel the selected entry belongs to:
name|BasePanel
name|basePanel
init|=
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
comment|// Update the preview's database context:
name|preview
operator|.
name|setDatabaseContext
argument_list|(
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update the preview's entry:
name|preview
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|preview
operator|.
name|setBasePanel
argument_list|(
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|preview
operator|.
name|setDatabaseContext
argument_list|(
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|)
expr_stmt|;
name|contentPane
operator|.
name|setDividerLocation
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * TableFormat for the table shown in the dialog. Handles the display of entry      * fields and icons for linked files and urls.      */
DECL|class|EntryTableFormat
specifier|private
class|class
name|EntryTableFormat
implements|implements
name|AdvancedTableFormat
argument_list|<
name|BibEntry
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|PAD
operator|+
name|FIELDS
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnName (int column)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|>=
name|PAD
condition|)
block|{
return|return
name|StringUtil
operator|.
name|capitalizeFirst
argument_list|(
name|FIELDS
index|[
name|column
operator|-
name|PAD
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|column
operator|==
name|DATABASE_COL
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Library"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getColumnValue (BibEntry entry, int column)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|<
name|PAD
condition|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|DATABASE_COL
case|:
return|return
name|entryHome
operator|.
name|get
argument_list|(
name|entry
argument_list|)
operator|.
name|getTabTitle
argument_list|()
return|;
case|case
name|FILE_COL
case|:
if|if
condition|(
name|entry
operator|.
name|hasField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
condition|)
block|{
name|FileListTableModel
name|tmpModel
init|=
operator|new
name|FileListTableModel
argument_list|()
decl_stmt|;
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|tmpModel
operator|::
name|setContent
argument_list|)
expr_stmt|;
name|fileLabel
operator|.
name|setToolTipText
argument_list|(
name|tmpModel
operator|.
name|getToolTipHTMLRepresentation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpModel
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|tmpModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|fileLabel
operator|.
name|setIcon
argument_list|(
name|tmpModel
operator|.
name|getEntry
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getIcon
argument_list|()
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileLabel
operator|.
name|setIcon
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileLabel
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
case|case
name|URL_COL
case|:
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|urlField
init|=
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlField
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|urlLabel
operator|.
name|setToolTipText
argument_list|(
name|urlField
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|urlLabel
return|;
block|}
return|return
literal|null
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
name|String
name|field
init|=
name|FIELDS
index|[
name|column
operator|-
name|PAD
index|]
decl_stmt|;
name|String
name|fieldContent
init|=
name|entry
operator|.
name|getLatexFreeField
argument_list|(
name|field
argument_list|)
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|field
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PERSON_NAMES
argument_list|)
condition|)
block|{
comment|// For name fields, tap into a MainTableFormat instance and use
comment|// the same name formatting as is used in the entry table:
return|return
name|MainTableNameFormatter
operator|.
name|formatName
argument_list|(
name|fieldContent
argument_list|)
return|;
block|}
return|return
name|fieldContent
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getColumnClass (int i)
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getColumnClass
parameter_list|(
name|int
name|i
parameter_list|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
name|FILE_COL
case|:
case|case
name|URL_COL
case|:
return|return
name|JLabel
operator|.
name|class
return|;
default|default:
return|return
name|String
operator|.
name|class
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getColumnComparator (int i)
specifier|public
name|Comparator
argument_list|<
name|?
argument_list|>
name|getColumnComparator
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

