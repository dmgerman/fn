begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.importer.fetcher
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|fetcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|ImportEntriesDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|SearchBasedFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|WebFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|WebFetchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|WebSearchPaneViewModel
specifier|public
class|class
name|WebSearchPaneViewModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WebSearchPaneViewModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|selectedFetcher
specifier|private
specifier|final
name|ObjectProperty
argument_list|<
name|SearchBasedFetcher
argument_list|>
name|selectedFetcher
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fetchers
specifier|private
specifier|final
name|ListProperty
argument_list|<
name|SearchBasedFetcher
argument_list|>
name|fetchers
init|=
operator|new
name|SimpleListProperty
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|query
specifier|private
specifier|final
name|StringProperty
name|query
init|=
operator|new
name|SimpleStringProperty
argument_list|()
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|method|WebSearchPaneViewModel (ImportFormatPreferences importPreferences, JabRefFrame frame, JabRefPreferences preferences)
specifier|public
name|WebSearchPaneViewModel
parameter_list|(
name|ImportFormatPreferences
name|importPreferences
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|,
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
comment|// TODO: Rework so that we don't rely on JabRefFrame and not the complete preferences
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|List
argument_list|<
name|SearchBasedFetcher
argument_list|>
name|allFetchers
init|=
name|WebFetchers
operator|.
name|getSearchBasedFetchers
argument_list|(
name|importPreferences
argument_list|)
decl_stmt|;
name|allFetchers
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparing
argument_list|(
name|WebFetcher
operator|::
name|getName
argument_list|)
argument_list|)
expr_stmt|;
name|fetchers
operator|.
name|setAll
argument_list|(
name|allFetchers
argument_list|)
expr_stmt|;
comment|// Choose last-selected fetcher as default
name|int
name|defaultFetcherIndex
init|=
name|preferences
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|SELECTED_FETCHER_INDEX
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|defaultFetcherIndex
operator|<=
literal|0
operator|)
operator|||
operator|(
name|defaultFetcherIndex
operator|>=
name|fetchers
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|selectedFetcherProperty
argument_list|()
operator|.
name|setValue
argument_list|(
name|fetchers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|selectedFetcherProperty
argument_list|()
operator|.
name|setValue
argument_list|(
name|fetchers
operator|.
name|get
argument_list|(
name|defaultFetcherIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|selectedFetcherProperty
argument_list|()
argument_list|,
name|newFetcher
lambda|->
block|{
name|int
name|newIndex
init|=
name|fetchers
operator|.
name|indexOf
argument_list|(
name|newFetcher
argument_list|)
decl_stmt|;
name|preferences
operator|.
name|putInt
argument_list|(
name|JabRefPreferences
operator|.
name|SELECTED_FETCHER_INDEX
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getFetchers ()
specifier|public
name|ObservableList
argument_list|<
name|SearchBasedFetcher
argument_list|>
name|getFetchers
parameter_list|()
block|{
return|return
name|fetchers
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|fetchersProperty ()
specifier|public
name|ListProperty
argument_list|<
name|SearchBasedFetcher
argument_list|>
name|fetchersProperty
parameter_list|()
block|{
return|return
name|fetchers
return|;
block|}
DECL|method|getSelectedFetcher ()
specifier|public
name|SearchBasedFetcher
name|getSelectedFetcher
parameter_list|()
block|{
return|return
name|selectedFetcher
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|selectedFetcherProperty ()
specifier|public
name|ObjectProperty
argument_list|<
name|SearchBasedFetcher
argument_list|>
name|selectedFetcherProperty
parameter_list|()
block|{
return|return
name|selectedFetcher
return|;
block|}
DECL|method|getQuery ()
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|queryProperty ()
specifier|public
name|StringProperty
name|queryProperty
parameter_list|()
block|{
return|return
name|query
return|;
block|}
DECL|method|search ()
specifier|public
name|void
name|search
parameter_list|()
block|{
if|if
condition|(
name|StringUtil
operator|.
name|isBlank
argument_list|(
name|getQuery
argument_list|()
argument_list|)
condition|)
block|{
name|frame
operator|.
name|getDialogService
argument_list|()
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a search string"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|getDialogService
argument_list|()
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please open or start a new library before searching"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|SearchBasedFetcher
name|activeFetcher
init|=
name|getSelectedFetcher
argument_list|()
decl_stmt|;
name|BackgroundTask
argument_list|<
name|List
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
name|task
init|=
name|BackgroundTask
operator|.
name|wrap
argument_list|(
parameter_list|()
lambda|->
name|activeFetcher
operator|.
name|performSearch
argument_list|(
name|getQuery
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withInitialMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Processing %0"
argument_list|,
name|getQuery
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ImportEntriesDialog
name|dialog
init|=
operator|new
name|ImportEntriesDialog
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|task
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setTitle
argument_list|(
name|activeFetcher
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|showAndWait
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

