begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.importer.actions
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
operator|.
name|actions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|DialogPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|customentrytypes
operator|.
name|CustomEntryTypesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|CustomEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|controlsfx
operator|.
name|control
operator|.
name|CheckListView
import|;
end_import

begin_comment
comment|/**  * This action checks whether any new custom entry types were loaded from this  * BIB file. If so, an offer to remember these entry types is given.  */
end_comment

begin_class
DECL|class|CheckForNewEntryTypesAction
specifier|public
class|class
name|CheckForNewEntryTypesAction
implements|implements
name|GUIPostOpenAction
block|{
annotation|@
name|Override
DECL|method|isActionNecessary (ParserResult parserResult)
specifier|public
name|boolean
name|isActionNecessary
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
return|return
operator|!
name|getListOfUnknownAndUnequalCustomizations
argument_list|(
name|parserResult
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|performAction (BasePanel panel, ParserResult parserResult, DialogService dialogService)
specifier|public
name|void
name|performAction
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|ParserResult
name|parserResult
parameter_list|,
name|DialogService
name|dialogService
parameter_list|)
block|{
name|BibDatabaseMode
name|mode
init|=
name|getBibDatabaseModeFromParserResult
argument_list|(
name|parserResult
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EntryType
argument_list|>
name|typesToStore
init|=
name|determineEntryTypesToSave
argument_list|(
name|panel
argument_list|,
name|getListOfUnknownAndUnequalCustomizations
argument_list|(
name|parserResult
argument_list|)
argument_list|,
name|mode
argument_list|,
name|dialogService
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|typesToStore
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|typesToStore
operator|.
name|forEach
argument_list|(
name|type
lambda|->
name|EntryTypes
operator|.
name|addOrModifyCustomEntryType
argument_list|(
operator|(
name|CustomEntryType
operator|)
name|type
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|CustomEntryTypesManager
operator|.
name|saveCustomEntryTypes
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getListOfUnknownAndUnequalCustomizations (ParserResult parserResult)
specifier|private
name|List
argument_list|<
name|EntryType
argument_list|>
name|getListOfUnknownAndUnequalCustomizations
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
name|BibDatabaseMode
name|mode
init|=
name|getBibDatabaseModeFromParserResult
argument_list|(
name|parserResult
argument_list|)
decl_stmt|;
return|return
name|parserResult
operator|.
name|getEntryTypes
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|type
lambda|->
operator|(
operator|!
name|EntryTypes
operator|.
name|getType
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
operator|.
name|isPresent
argument_list|()
operator|)
operator|||
operator|!
name|EntryTypes
operator|.
name|isEqualNameAndFieldBased
argument_list|(
name|type
argument_list|,
name|EntryTypes
operator|.
name|getType
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|mode
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|determineEntryTypesToSave (BasePanel panel, List<EntryType> allCustomizedEntryTypes, BibDatabaseMode databaseMode, DialogService dialogService)
specifier|private
name|List
argument_list|<
name|EntryType
argument_list|>
name|determineEntryTypesToSave
parameter_list|(
name|BasePanel
name|panel
parameter_list|,
name|List
argument_list|<
name|EntryType
argument_list|>
name|allCustomizedEntryTypes
parameter_list|,
name|BibDatabaseMode
name|databaseMode
parameter_list|,
name|DialogService
name|dialogService
parameter_list|)
block|{
name|List
argument_list|<
name|EntryType
argument_list|>
name|newTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EntryType
argument_list|>
name|differentCustomizations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|EntryType
name|customType
range|:
name|allCustomizedEntryTypes
control|)
block|{
if|if
condition|(
operator|!
name|EntryTypes
operator|.
name|getType
argument_list|(
name|customType
operator|.
name|getName
argument_list|()
argument_list|,
name|databaseMode
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|newTypes
operator|.
name|add
argument_list|(
name|customType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EntryType
name|currentlyStoredType
init|=
name|EntryTypes
operator|.
name|getType
argument_list|(
name|customType
operator|.
name|getName
argument_list|()
argument_list|,
name|databaseMode
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|EntryTypes
operator|.
name|isEqualNameAndFieldBased
argument_list|(
name|customType
argument_list|,
name|currentlyStoredType
argument_list|)
condition|)
block|{
name|differentCustomizations
operator|.
name|add
argument_list|(
name|customType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DialogPane
name|pane
init|=
operator|new
name|DialogPane
argument_list|()
decl_stmt|;
name|CheckListView
argument_list|<
name|EntryType
argument_list|>
name|unknownEntryTypesCheckList
init|=
operator|new
name|CheckListView
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|newTypes
argument_list|)
argument_list|)
decl_stmt|;
name|VBox
name|vbox
init|=
operator|new
name|VBox
argument_list|()
decl_stmt|;
name|vbox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select all customized types to be stored in local preferences"
argument_list|)
operator|+
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
name|vbox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Currently unknown"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|vbox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|unknownEntryTypesCheckList
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|CheckListView
argument_list|<
name|EntryType
argument_list|>
argument_list|>
name|differentCustomizationCheckList
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|differentCustomizations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|differentCustomizationCheckList
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|CheckListView
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|differentCustomizations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|vbox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Different customization, current settings will be overwritten"
argument_list|)
operator|+
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
name|vbox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|differentCustomizationCheckList
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pane
operator|.
name|setContent
argument_list|(
name|vbox
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|ButtonType
argument_list|>
name|buttonPressed
init|=
name|dialogService
operator|.
name|showCustomDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Custom entry types"
argument_list|)
argument_list|,
name|pane
argument_list|,
name|ButtonType
operator|.
name|OK
argument_list|,
name|ButtonType
operator|.
name|CANCEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|buttonPressed
operator|.
name|isPresent
argument_list|()
operator|&&
operator|(
name|buttonPressed
operator|.
name|get
argument_list|()
operator|==
name|ButtonType
operator|.
name|OK
operator|)
condition|)
block|{
name|List
argument_list|<
name|EntryType
argument_list|>
name|differentCustomizationSelected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|differentCustomizationCheckList
operator|.
name|map
argument_list|(
name|view
lambda|->
name|view
operator|.
name|getCheckModel
argument_list|()
operator|.
name|getCheckedItems
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|differentCustomizationSelected
operator|::
name|addAll
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EntryType
argument_list|>
name|selectedUnknown
init|=
name|unknownEntryTypesCheckList
operator|.
name|getCheckModel
argument_list|()
operator|.
name|getCheckedItems
argument_list|()
decl_stmt|;
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|selectedUnknown
operator|.
name|stream
argument_list|()
argument_list|,
name|differentCustomizationSelected
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/*     // add all unknown types:     if (!newTypes.isEmpty()) {         checkboxPanel.add(new JLabel(Localization.lang("Currently unknown") + ":"));         for (EntryType type : newTypes) {             JCheckBox box = new JCheckBox(type.getName(), true);             checkboxPanel.add(box);             typeCheckBoxMap.put(type, box);         }     }      // add all different customizations     if (!differentCustomizations.isEmpty()) {         checkboxPanel.add(new JLabel(Localization.lang("Different customization, current settings will be overwritten") + ":"));         for (EntryType type : differentCustomizations) {             JCheckBox box = new JCheckBox(type.getName(), true);             checkboxPanel.add(box);             typeCheckBoxMap.put(type, box);         }     }*/
DECL|method|getBibDatabaseModeFromParserResult (ParserResult parserResult)
specifier|private
name|BibDatabaseMode
name|getBibDatabaseModeFromParserResult
parameter_list|(
name|ParserResult
name|parserResult
parameter_list|)
block|{
return|return
name|parserResult
operator|.
name|getMetaData
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|orElse
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultBibDatabaseMode
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

