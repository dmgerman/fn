begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.importer
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBoxTreeItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|FindUnlinkedFilesDialog
operator|.
name|FileNodeWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_comment
comment|/**  * Util class for searching files on the file system which are not linked to a provided {@link BibDatabase}.  */
end_comment

begin_class
DECL|class|UnlinkedFilesCrawler
specifier|public
class|class
name|UnlinkedFilesCrawler
extends|extends
name|BackgroundTask
argument_list|<
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
argument_list|>
block|{
DECL|field|directory
specifier|private
specifier|final
name|Path
name|directory
decl_stmt|;
DECL|field|fileFilter
specifier|private
specifier|final
name|FileFilter
name|fileFilter
decl_stmt|;
DECL|field|counter
specifier|private
name|int
name|counter
decl_stmt|;
DECL|field|databaseContext
specifier|private
specifier|final
name|BibDatabaseContext
name|databaseContext
decl_stmt|;
DECL|method|UnlinkedFilesCrawler (Path directory, FileFilter fileFilter, BibDatabaseContext databaseContext)
specifier|public
name|UnlinkedFilesCrawler
parameter_list|(
name|Path
name|directory
parameter_list|,
name|FileFilter
name|fileFilter
parameter_list|,
name|BibDatabaseContext
name|databaseContext
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|fileFilter
operator|=
name|fileFilter
expr_stmt|;
name|this
operator|.
name|databaseContext
operator|=
name|databaseContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|protected
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|UnlinkedPDFFileFilter
name|unlinkedPDFFileFilter
init|=
operator|new
name|UnlinkedPDFFileFilter
argument_list|(
name|fileFilter
argument_list|,
name|databaseContext
argument_list|)
decl_stmt|;
return|return
name|searchDirectory
argument_list|(
name|directory
operator|.
name|toFile
argument_list|()
argument_list|,
name|unlinkedPDFFileFilter
argument_list|)
return|;
block|}
comment|/**      * Searches recursively all files in the specified directory.<br>      *<br>      * All {@link File}s, which match the {@link FileFilter} that comes with the      * {@link EntryFromFileCreatorManager}, are taken into the resulting tree.<br>      *<br>      * The result will be a tree structure of nodes of the type      * {@link CheckBoxTreeItem}.<br>      *<br>      * The user objects that are attached to the nodes is the      * {@link FileNodeWrapper}, which wraps the {@link File}-Object.<br>      *<br>      * For ensuring the capability to cancel the work of this recursive method,      * the first position in the integer array 'state' must be set to 1, to keep      * the recursion running. When the states value changes, the method will      * resolve its recursion and return what it has saved so far.      */
DECL|method|searchDirectory (File directory, UnlinkedPDFFileFilter ff)
specifier|private
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|searchDirectory
parameter_list|(
name|File
name|directory
parameter_list|,
name|UnlinkedPDFFileFilter
name|ff
parameter_list|)
block|{
comment|// Return null if the directory is not valid.
if|if
condition|(
operator|(
name|directory
operator|==
literal|null
operator|)
operator|||
operator|!
name|directory
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
index|[]
name|filesArray
init|=
name|directory
operator|.
name|listFiles
argument_list|(
name|ff
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|files
decl_stmt|;
if|if
condition|(
name|filesArray
operator|==
literal|null
condition|)
block|{
name|files
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|files
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|filesArray
argument_list|)
expr_stmt|;
block|}
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|root
init|=
operator|new
name|CheckBoxTreeItem
argument_list|<>
argument_list|(
operator|new
name|FileNodeWrapper
argument_list|(
name|directory
operator|.
name|toPath
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|filesCount
init|=
literal|0
decl_stmt|;
name|filesArray
operator|=
name|directory
operator|.
name|listFiles
argument_list|(
name|pathname
lambda|->
operator|(
name|pathname
operator|!=
literal|null
operator|)
operator|&&
name|pathname
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|subDirectories
decl_stmt|;
if|if
condition|(
name|filesArray
operator|==
literal|null
condition|)
block|{
name|subDirectories
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|subDirectories
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|filesArray
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|File
name|subDirectory
range|:
name|subDirectories
control|)
block|{
if|if
condition|(
name|isCanceled
argument_list|()
condition|)
block|{
return|return
name|root
return|;
block|}
name|CheckBoxTreeItem
argument_list|<
name|FileNodeWrapper
argument_list|>
name|subRoot
init|=
name|searchDirectory
argument_list|(
name|subDirectory
argument_list|,
name|ff
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|subRoot
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|subRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|filesCount
operator|+=
name|subRoot
operator|.
name|getValue
argument_list|()
operator|.
name|fileCount
expr_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|subRoot
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|setValue
argument_list|(
operator|new
name|FileNodeWrapper
argument_list|(
name|directory
operator|.
name|toPath
argument_list|()
argument_list|,
name|files
operator|.
name|size
argument_list|()
operator|+
name|filesCount
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CheckBoxTreeItem
argument_list|<>
argument_list|(
operator|new
name|FileNodeWrapper
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|1
condition|)
block|{
name|updateMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"One file found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 files found"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|counter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
block|}
end_class

end_unit

