begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.importer
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|Importer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|KeyCollisionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexString
import|;
end_import

begin_class
DECL|class|ImportAction
specifier|public
class|class
name|ImportAction
block|{
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|openInNew
specifier|private
specifier|final
name|boolean
name|openInNew
decl_stmt|;
DECL|field|importer
specifier|private
specifier|final
name|Optional
argument_list|<
name|Importer
argument_list|>
name|importer
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|importError
specifier|private
name|Exception
name|importError
decl_stmt|;
DECL|field|taskExecutor
specifier|private
specifier|final
name|TaskExecutor
name|taskExecutor
init|=
name|Globals
operator|.
name|TASK_EXECUTOR
decl_stmt|;
DECL|method|ImportAction (JabRefFrame frame, boolean openInNew, Importer importer)
specifier|public
name|ImportAction
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|boolean
name|openInNew
parameter_list|,
name|Importer
name|importer
parameter_list|)
block|{
name|this
operator|.
name|importer
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|importer
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|frame
operator|.
name|getDialogService
argument_list|()
expr_stmt|;
name|this
operator|.
name|openInNew
operator|=
name|openInNew
expr_stmt|;
block|}
comment|/**      * Automatically imports the files given as arguments.      * @param filenames List of files to import      */
DECL|method|automatedImport (List<String> filenames)
specifier|public
name|void
name|automatedImport
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|filenames
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|filenames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|BackgroundTask
argument_list|<
name|List
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
name|task
init|=
name|BackgroundTask
operator|.
name|wrap
argument_list|(
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|ImportFormatReader
operator|.
name|UnknownFormatImport
argument_list|>
name|imports
init|=
name|doImport
argument_list|(
name|files
argument_list|)
decl_stmt|;
comment|// Ok, done. Then try to gather in all we have found. Since we might
comment|// have found
comment|// one or more bibtex results, it's best to gather them in a
comment|// BibDatabase.
name|ParserResult
name|bibtexResult
init|=
name|mergeImportResults
argument_list|(
name|imports
argument_list|)
decl_stmt|;
comment|// TODO: show parserwarnings, if any (not here)
comment|// for (ImportFormatReader.UnknownFormatImport p : imports) {
comment|//    ParserResultWarningDialog.showParserResultWarningDialog(p.parserResult, frame);
comment|//}
if|if
condition|(
name|bibtexResult
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|importError
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JabRefException
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No entries found. Please make sure you are using the correct import filter."
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|importError
throw|;
block|}
block|}
return|return
name|bibtexResult
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|openInNew
condition|)
block|{
name|task
operator|.
name|onSuccess
argument_list|(
name|entries
lambda|->
block|{
name|frame
operator|.
name|addTab
argument_list|(
operator|new
name|BibDatabaseContext
argument_list|(
operator|new
name|BibDatabase
argument_list|(
name|entries
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Imported entries"
argument_list|)
operator|+
literal|": "
operator|+
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|executeWith
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
name|ImportEntriesDialog
name|dialog
init|=
operator|new
name|ImportEntriesDialog
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|task
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Import"
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|showAndWait
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doImport (List<Path> files)
specifier|private
name|List
argument_list|<
name|ImportFormatReader
operator|.
name|UnknownFormatImport
argument_list|>
name|doImport
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|)
block|{
comment|// We import all files and collect their results:
name|List
argument_list|<
name|ImportFormatReader
operator|.
name|UnknownFormatImport
argument_list|>
name|imports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|filename
range|:
name|files
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|importer
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Unknown format:
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Importing in unknown format"
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
comment|// This import method never throws an IOException:
name|imports
operator|.
name|add
argument_list|(
name|Globals
operator|.
name|IMPORT_FORMAT_READER
operator|.
name|importUnknownFormat
argument_list|(
name|filename
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Importing in %0 format"
argument_list|,
name|importer
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
comment|// Specific importer:
name|ParserResult
name|pr
init|=
name|importer
operator|.
name|get
argument_list|()
operator|.
name|importDatabase
argument_list|(
name|filename
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|imports
operator|.
name|add
argument_list|(
operator|new
name|ImportFormatReader
operator|.
name|UnknownFormatImport
argument_list|(
name|importer
operator|.
name|get
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|pr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ImportException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// This indicates that a specific importer was specified, and that
comment|// this importer has thrown an IOException. We store the exception,
comment|// so a relevant error message can be displayed.
name|importError
operator|=
name|e
expr_stmt|;
block|}
block|}
return|return
name|imports
return|;
block|}
DECL|method|mergeImportResults (List<ImportFormatReader.UnknownFormatImport> imports)
specifier|private
name|ParserResult
name|mergeImportResults
parameter_list|(
name|List
argument_list|<
name|ImportFormatReader
operator|.
name|UnknownFormatImport
argument_list|>
name|imports
parameter_list|)
block|{
name|BibDatabase
name|database
init|=
operator|new
name|BibDatabase
argument_list|()
decl_stmt|;
name|ParserResult
name|directParserResult
init|=
literal|null
decl_stmt|;
name|boolean
name|anythingUseful
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ImportFormatReader
operator|.
name|UnknownFormatImport
name|importResult
range|:
name|imports
control|)
block|{
if|if
condition|(
name|importResult
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ImportFormatReader
operator|.
name|BIBTEX_FORMAT
operator|.
name|equals
argument_list|(
name|importResult
operator|.
name|format
argument_list|)
condition|)
block|{
comment|// Bibtex result. We must merge it into our main base.
name|ParserResult
name|pr
init|=
name|importResult
operator|.
name|parserResult
decl_stmt|;
name|anythingUseful
operator|=
name|anythingUseful
operator|||
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|hasEntries
argument_list|()
operator|||
operator|(
operator|!
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|hasNoStrings
argument_list|()
operator|)
expr_stmt|;
comment|// Record the parserResult, as long as this is the first bibtex result:
if|if
condition|(
name|directParserResult
operator|==
literal|null
condition|)
block|{
name|directParserResult
operator|=
name|pr
expr_stmt|;
block|}
comment|// Merge entries:
for|for
control|(
name|BibEntry
name|entry
range|:
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// Merge strings:
for|for
control|(
name|BibtexString
name|bs
range|:
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getStringValues
argument_list|()
control|)
block|{
try|try
block|{
name|database
operator|.
name|addString
argument_list|(
operator|(
name|BibtexString
operator|)
name|bs
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyCollisionException
name|e
parameter_list|)
block|{
comment|// TODO: This means a duplicate string name exists, so it's not
comment|// a very exceptional situation. We should maybe give a warning...?
block|}
block|}
block|}
else|else
block|{
name|ParserResult
name|pr
init|=
name|importResult
operator|.
name|parserResult
decl_stmt|;
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|pr
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|anythingUseful
operator|=
name|anythingUseful
operator||
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// set timestamp and owner
name|UpdateField
operator|.
name|setAutomaticFields
argument_list|(
name|entries
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getUpdateFieldPreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// set timestamp and owner
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|database
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|anythingUseful
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|imports
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|directParserResult
operator|!=
literal|null
operator|)
condition|)
block|{
return|return
name|directParserResult
return|;
block|}
else|else
block|{
return|return
operator|new
name|ParserResult
argument_list|(
name|database
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

