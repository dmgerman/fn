begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ListSelectionModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableColumnModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|gui
operator|.
name|FileDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|gui
operator|.
name|PreviewPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|UnknownExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|gui
operator|.
name|util
operator|.
name|WindowLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OOBibStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OpenOfficePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|StyleLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|FileExtensions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|TestEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|BasicEventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|EventList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|SortedList
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEvent
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|event
operator|.
name|ListEventListener
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|gui
operator|.
name|TableFormat
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventSelectionModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|DefaultEventTableModel
import|;
end_import

begin_import
import|import
name|ca
operator|.
name|odell
operator|.
name|glazedlists
operator|.
name|swing
operator|.
name|GlazedListsSwing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|FormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This class produces a dialog box for choosing a style file.  */
end_comment

begin_class
DECL|class|StyleSelectDialog
class|class
name|StyleSelectDialog
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StyleSelectDialog
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|styles
specifier|private
name|EventList
argument_list|<
name|OOBibStyle
argument_list|>
name|styles
decl_stmt|;
DECL|field|diag
specifier|private
name|JDialog
name|diag
decl_stmt|;
DECL|field|table
specifier|private
name|JTable
name|table
decl_stmt|;
DECL|field|tableModel
specifier|private
name|DefaultEventTableModel
argument_list|<
name|OOBibStyle
argument_list|>
name|tableModel
decl_stmt|;
DECL|field|selectionModel
specifier|private
name|DefaultEventSelectionModel
argument_list|<
name|OOBibStyle
argument_list|>
name|selectionModel
decl_stmt|;
DECL|field|popup
specifier|private
specifier|final
name|JPopupMenu
name|popup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|edit
specifier|private
specifier|final
name|JMenuItem
name|edit
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|show
specifier|private
specifier|final
name|JMenuItem
name|show
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"View"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|remove
specifier|private
specifier|final
name|JMenuItem
name|remove
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|reload
specifier|private
specifier|final
name|JMenuItem
name|reload
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Reload"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|addButton
specifier|private
specifier|final
name|JButton
name|addButton
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|ADD_NOBOX
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|removeButton
specifier|private
specifier|final
name|JButton
name|removeButton
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REMOVE_NOBOX
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|preview
specifier|private
name|PreviewPanel
name|preview
decl_stmt|;
DECL|field|removeAction
specifier|private
name|ActionListener
name|removeAction
decl_stmt|;
DECL|field|toRect
specifier|private
specifier|final
name|Rectangle
name|toRect
init|=
operator|new
name|Rectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|ok
specifier|private
specifier|final
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|cancel
specifier|private
specifier|final
name|JButton
name|cancel
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|prevEntry
specifier|private
specifier|final
name|BibEntry
name|prevEntry
decl_stmt|;
DECL|field|okPressed
specifier|private
name|boolean
name|okPressed
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|StyleLoader
name|loader
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|OpenOfficePreferences
name|preferences
decl_stmt|;
DECL|method|StyleSelectDialog (JabRefFrame frame, OpenOfficePreferences preferences, StyleLoader loader)
specifier|public
name|StyleSelectDialog
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|OpenOfficePreferences
name|preferences
parameter_list|,
name|StyleLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|this
operator|.
name|preferences
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|preferences
argument_list|)
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|prevEntry
operator|=
name|TestEntry
operator|.
name|getTestEntry
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|setupPopupMenu
argument_list|()
expr_stmt|;
name|addButton
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|AddFileDialog
name|addDialog
init|=
operator|new
name|AddFileDialog
argument_list|()
decl_stmt|;
name|addDialog
operator|.
name|setDirectoryPath
argument_list|(
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
argument_list|)
expr_stmt|;
name|addDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addDialog
operator|.
name|getFileName
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|fileName
lambda|->
block|{
if|if
condition|(
name|loader
operator|.
name|addStyleIfValid
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|preferences
operator|.
name|setCurrentStyle
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|updateStyles
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|addButton
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add style file"
argument_list|)
argument_list|)
expr_stmt|;
name|removeButton
operator|.
name|addActionListener
argument_list|(
name|removeAction
argument_list|)
expr_stmt|;
name|removeButton
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove style"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a preview panel for previewing styles
comment|// Must be done before creating the table to avoid NPEs
name|preview
operator|=
operator|new
name|PreviewPanel
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Use the test entry from the Preview settings tab in Preferences:
name|preview
operator|.
name|setEntry
argument_list|(
name|prevEntry
argument_list|)
expr_stmt|;
name|setupTable
argument_list|()
expr_stmt|;
name|updateStyles
argument_list|()
expr_stmt|;
comment|// Build dialog
name|diag
operator|=
operator|new
name|JDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select style"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FormBuilder
name|builder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
name|builder
operator|.
name|layout
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow, 4dlu, left:pref, 4dlu, left:pref"
argument_list|,
literal|"pref, 4dlu, 100dlu:grow, 4dlu, pref, 4dlu, fill:100dlu"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select one of the available styles or add a style file from disk."
argument_list|)
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|JScrollPane
argument_list|(
name|table
argument_list|)
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|addButton
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|removeButton
argument_list|)
operator|.
name|xy
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|preview
argument_list|)
operator|.
name|xyw
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|padding
argument_list|(
literal|"5dlu, 5dlu, 5dlu, 5dlu"
argument_list|)
expr_stmt|;
name|diag
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|AbstractAction
name|okListener
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
operator|)
operator|||
operator|(
name|table
operator|.
name|getSelectedRowCount
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select a valid style file."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Style selection"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|okPressed
operator|=
literal|true
expr_stmt|;
name|storeSettings
argument_list|()
expr_stmt|;
name|diag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
name|okListener
argument_list|)
expr_stmt|;
name|Action
name|cancelListener
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|diag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
name|cancelListener
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|diag
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|ActionMap
name|am
init|=
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|im
init|=
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|im
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DIALOG
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|cancelListener
argument_list|)
expr_stmt|;
name|im
operator|.
name|put
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"ENTER"
argument_list|)
argument_list|,
literal|"enterOk"
argument_list|)
expr_stmt|;
name|am
operator|.
name|put
argument_list|(
literal|"enterOk"
argument_list|,
name|okListener
argument_list|)
expr_stmt|;
name|diag
operator|.
name|pack
argument_list|()
expr_stmt|;
name|WindowLocation
name|pw
init|=
operator|new
name|WindowLocation
argument_list|(
name|diag
argument_list|,
name|JabRefPreferences
operator|.
name|STYLES_POS_X
argument_list|,
name|JabRefPreferences
operator|.
name|STYLES_POS_Y
argument_list|,
name|JabRefPreferences
operator|.
name|STYLES_SIZE_X
argument_list|,
name|JabRefPreferences
operator|.
name|STYLES_SIZE_Y
argument_list|)
decl_stmt|;
name|pw
operator|.
name|displayWindowAtStoredLocation
argument_list|()
expr_stmt|;
block|}
DECL|method|setupTable ()
specifier|private
name|void
name|setupTable
parameter_list|()
block|{
name|styles
operator|=
operator|new
name|BasicEventList
argument_list|<>
argument_list|()
expr_stmt|;
name|EventList
argument_list|<
name|OOBibStyle
argument_list|>
name|sortedStyles
init|=
operator|new
name|SortedList
argument_list|<>
argument_list|(
name|styles
argument_list|)
decl_stmt|;
name|tableModel
operator|=
operator|(
name|DefaultEventTableModel
argument_list|<
name|OOBibStyle
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventTableModelWithThreadProxyList
argument_list|(
name|sortedStyles
argument_list|,
operator|new
name|StyleTableFormat
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|JTable
argument_list|(
name|tableModel
argument_list|)
expr_stmt|;
name|TableColumnModel
name|cm
init|=
name|table
operator|.
name|getColumnModel
argument_list|()
decl_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|0
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|1
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|cm
operator|.
name|getColumn
argument_list|(
literal|2
argument_list|)
operator|.
name|setPreferredWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|selectionModel
operator|=
operator|(
name|DefaultEventSelectionModel
argument_list|<
name|OOBibStyle
argument_list|>
operator|)
name|GlazedListsSwing
operator|.
name|eventSelectionModelWithThreadProxyList
argument_list|(
name|sortedStyles
argument_list|)
expr_stmt|;
name|table
operator|.
name|setSelectionModel
argument_list|(
name|selectionModel
argument_list|)
expr_stmt|;
name|table
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionMode
argument_list|(
name|ListSelectionModel
operator|.
name|SINGLE_SELECTION
argument_list|)
expr_stmt|;
name|table
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
name|mouseEvent
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|tablePopup
argument_list|(
name|mouseEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
name|mouseEvent
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|tablePopup
argument_list|(
name|mouseEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|addListEventListener
argument_list|(
operator|new
name|EntrySelectionListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupPopupMenu ()
specifier|private
name|void
name|setupPopupMenu
parameter_list|()
block|{
name|popup
operator|.
name|add
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|remove
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|reload
argument_list|)
expr_stmt|;
comment|// Add action listener to "Edit" menu item, which is supposed to open the style file in an external editor:
name|edit
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|getSelectedStyle
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|style
lambda|->
block|{
name|Optional
argument_list|<
name|ExternalFileType
argument_list|>
name|type
operator|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeByExt
argument_list|(
literal|"jstyle"
argument_list|)
argument_list|;
name|String
name|link
operator|=
name|style
operator|.
name|getPath
argument_list|()
argument_list|;             try
block|{
if|if
condition|(
name|type
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|JabRefDesktop
operator|.
name|openExternalFileAnyFormat
argument_list|(
operator|new
name|BibDatabaseContext
argument_list|()
argument_list|,
name|link
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JabRefDesktop
operator|.
name|openExternalFileUnknown
argument_list|(
name|frame
argument_list|,
operator|new
name|BibEntry
argument_list|()
argument_list|,
operator|new
name|BibDatabaseContext
argument_list|()
argument_list|,
name|link
argument_list|,
operator|new
name|UnknownExternalFileType
argument_list|(
literal|"jstyle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem open style file editor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|)
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Add action listener to "Show" menu item, which is supposed to open the style file in a dialog:
end_comment

begin_expr_stmt
name|show
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|getSelectedStyle
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|this
operator|::
name|displayStyle
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Create action listener for removing a style, also used for the remove button
end_comment

begin_expr_stmt
name|removeAction
operator|=
name|actionEvent
lambda|->
name|getSelectedStyle
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|style
lambda|->
block|{
block|if (!style.isFromResource(
end_expr_stmt

begin_expr_stmt
unit|)
operator|&&
operator|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Are you sure you want to remove the style?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Remove style"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
operator|)
end_expr_stmt

begin_block
unit|)
block|{
if|if
condition|(
operator|!
name|loader
operator|.
name|removeStyle
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Problem removing style"
argument_list|)
expr_stmt|;
block|}
name|updateStyles
argument_list|()
expr_stmt|;
block|}
end_block

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Add it to the remove menu item
end_comment

begin_expr_stmt
name|remove
operator|.
name|addActionListener
argument_list|(
name|removeAction
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Add action listener to the "Reload" menu item, which is supposed to reload an external style file
end_comment

begin_expr_stmt
name|reload
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|getSelectedStyle
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|style
lambda|->
block|{
block|try
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem with style file '"
operator|+
name|style
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
unit|}))
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
DECL|method|setVisible (boolean visible)
name|void
name|setVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|okPressed
operator|=
literal|false
expr_stmt|;
name|diag
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Read all style files or directories of style files indicated by the current      * settings, and add the styles to the list of styles.      */
end_comment

begin_function
DECL|method|updateStyles ()
specifier|private
name|void
name|updateStyles
parameter_list|()
block|{
name|table
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|styles
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|styles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|styles
operator|.
name|addAll
argument_list|(
name|loader
operator|.
name|getStyles
argument_list|()
argument_list|)
expr_stmt|;
name|styles
operator|.
name|getReadWriteLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|selectLastUsed
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This method scans the current list of styles, and looks for the styles      * that was last used. If found, that style is selected. If not found,      * the first style is selected provided there are>0 styles.      */
end_comment

begin_function
DECL|method|selectLastUsed ()
specifier|private
name|void
name|selectLastUsed
parameter_list|()
block|{
name|String
name|usedStyleFile
init|=
name|preferences
operator|.
name|getCurrentStyle
argument_list|()
decl_stmt|;
comment|// Set the initial selection of the table:
if|if
condition|(
name|usedStyleFile
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|usedStyleFile
operator|.
name|equals
argument_list|(
name|tableModel
operator|.
name|getElementAt
argument_list|(
name|i
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
operator|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|table
operator|.
name|setRowSelectionInterval
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|storeSettings ()
specifier|private
name|void
name|storeSettings
parameter_list|()
block|{
name|getSelectedStyle
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|style
lambda|->
name|preferences
operator|.
name|setCurrentStyle
argument_list|(
name|style
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getStyle ()
specifier|public
name|Optional
argument_list|<
name|OOBibStyle
argument_list|>
name|getStyle
parameter_list|()
block|{
if|if
condition|(
name|okPressed
condition|)
block|{
return|return
name|getSelectedStyle
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Get the currently selected style.      * @return the selected style, or empty if no style is selected.      */
end_comment

begin_function
DECL|method|getSelectedStyle ()
specifier|private
name|Optional
argument_list|<
name|OOBibStyle
argument_list|>
name|getSelectedStyle
parameter_list|()
block|{
if|if
condition|(
operator|!
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|selectionModel
operator|.
name|getSelected
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
end_function

begin_class
DECL|class|StyleTableFormat
specifier|static
class|class
name|StyleTableFormat
implements|implements
name|TableFormat
argument_list|<
name|OOBibStyle
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getColumnCount ()
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnName (int i)
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Name"
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Journals"
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"File"
argument_list|)
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getColumnValue (OOBibStyle style, int i)
specifier|public
name|Object
name|getColumnValue
parameter_list|(
name|OOBibStyle
name|style
parameter_list|,
name|int
name|i
parameter_list|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
return|return
name|style
operator|.
name|getName
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|style
operator|.
name|getJournals
argument_list|()
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|style
operator|.
name|isFromResource
argument_list|()
condition|?
name|Localization
operator|.
name|lang
argument_list|(
literal|"Internal style"
argument_list|)
else|:
name|style
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
return|;
default|default:
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|isOkPressed ()
specifier|public
name|boolean
name|isOkPressed
parameter_list|()
block|{
return|return
name|okPressed
return|;
block|}
end_function

begin_function
DECL|method|tablePopup (MouseEvent e)
specifier|private
name|void
name|tablePopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|popup
operator|.
name|show
argument_list|(
name|e
operator|.
name|getComponent
argument_list|()
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|displayStyle (OOBibStyle style)
specifier|private
name|void
name|displayStyle
parameter_list|(
name|OOBibStyle
name|style
parameter_list|)
block|{
comment|// Make a dialog box to display the contents:
specifier|final
name|JDialog
name|dd
init|=
operator|new
name|JDialog
argument_list|(
name|diag
argument_list|,
name|style
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JTextArea
name|ta
init|=
operator|new
name|JTextArea
argument_list|(
name|style
operator|.
name|getLocalCopy
argument_list|()
argument_list|)
decl_stmt|;
name|ta
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|ta
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|700
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|dd
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|JButton
name|okButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|dd
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|okButton
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|dd
operator|.
name|dispose
argument_list|()
argument_list|)
expr_stmt|;
name|dd
operator|.
name|pack
argument_list|()
expr_stmt|;
name|dd
operator|.
name|setLocationRelativeTo
argument_list|(
name|diag
argument_list|)
expr_stmt|;
name|dd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * The listener for the Glazed list monitoring the current selection.      * When selection changes, we need to update the preview panel.      */
end_comment

begin_class
DECL|class|EntrySelectionListener
specifier|private
class|class
name|EntrySelectionListener
implements|implements
name|ListEventListener
argument_list|<
name|OOBibStyle
argument_list|>
block|{
annotation|@
name|Override
DECL|method|listChanged (ListEvent<OOBibStyle> listEvent)
specifier|public
name|void
name|listChanged
parameter_list|(
name|ListEvent
argument_list|<
name|OOBibStyle
argument_list|>
name|listEvent
parameter_list|)
block|{
if|if
condition|(
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|OOBibStyle
name|style
init|=
name|listEvent
operator|.
name|getSourceList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Enable/disable popup menu items and buttons
if|if
condition|(
name|style
operator|.
name|isFromResource
argument_list|()
condition|)
block|{
name|remove
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reload
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remove
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reload
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|removeButton
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Set new preview layout
name|preview
operator|.
name|setLayout
argument_list|(
name|style
operator|.
name|getReferenceFormat
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the preview's entry:
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|preview
operator|.
name|update
argument_list|()
expr_stmt|;
name|preview
operator|.
name|scrollRectToVisible
argument_list|(
name|toRect
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|AddFileDialog
specifier|private
class|class
name|AddFileDialog
extends|extends
name|JDialog
block|{
DECL|field|newFile
specifier|private
specifier|final
name|JTextField
name|newFile
init|=
operator|new
name|JTextField
argument_list|()
decl_stmt|;
DECL|field|addOKPressed
specifier|private
name|boolean
name|addOKPressed
decl_stmt|;
DECL|method|AddFileDialog ()
specifier|public
name|AddFileDialog
parameter_list|()
block|{
name|super
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add style file"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|JButton
name|browse
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|FileDialog
name|dialog
init|=
operator|new
name|FileDialog
argument_list|(
name|frame
argument_list|)
operator|.
name|withExtension
argument_list|(
name|FileExtensions
operator|.
name|JSTYLE
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setDefaultExtension
argument_list|(
name|FileExtensions
operator|.
name|JSTYLE
argument_list|)
expr_stmt|;
name|browse
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|file
init|=
name|dialog
operator|.
name|showDialogAndGetSelectedFile
argument_list|()
decl_stmt|;
name|file
operator|.
name|ifPresent
argument_list|(
name|f
lambda|->
name|newFile
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Build content panel
name|FormBuilder
name|builder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
name|builder
operator|.
name|layout
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"left:pref, 4dlu, fill:100dlu:grow, 4dlu, pref"
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File"
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|newFile
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|browse
argument_list|)
operator|.
name|xy
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|padding
argument_list|(
literal|"10dlu, 10dlu, 10dlu, 10dlu"
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|// Buttons
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|JButton
name|addOKButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
name|JButton
name|addCancelButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|addOKButton
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|addCancelButton
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|addOKButton
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|addOKPressed
operator|=
literal|true
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Action
name|cancelAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|addOKPressed
operator|=
literal|false
expr_stmt|;
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|addCancelButton
operator|.
name|addActionListener
argument_list|(
name|cancelAction
argument_list|)
expr_stmt|;
comment|// Key bindings:
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DIALOG
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|bb
operator|.
name|getPanel
argument_list|()
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|cancelAction
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|setLocationRelativeTo
argument_list|(
name|diag
argument_list|)
expr_stmt|;
block|}
DECL|method|getFileName ()
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getFileName
parameter_list|()
block|{
if|if
condition|(
name|addOKPressed
operator|&&
operator|(
name|newFile
operator|.
name|getText
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|newFile
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|newFile
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|setDirectoryPath (String path)
specifier|public
name|void
name|setDirectoryPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|newFile
operator|.
name|setText
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

