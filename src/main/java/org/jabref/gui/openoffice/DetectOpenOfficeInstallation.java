begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JProgressBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|JabRefDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|desktop
operator|.
name|os
operator|.
name|NativeDesktop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DirectoryDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OpenOfficeFileSearch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OpenOfficePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_comment
comment|/**  * Tools for automatically detecting OpenOffice or LibreOffice installations.  */
end_comment

begin_class
DECL|class|DetectOpenOfficeInstallation
specifier|public
class|class
name|DetectOpenOfficeInstallation
block|{
DECL|field|preferences
specifier|private
specifier|final
name|OpenOfficePreferences
name|preferences
decl_stmt|;
DECL|field|parent
specifier|private
specifier|final
name|JDialog
name|parent
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|progressDialog
specifier|private
name|JDialog
name|progressDialog
decl_stmt|;
DECL|method|DetectOpenOfficeInstallation (JDialog parent, OpenOfficePreferences preferences, DialogService dialogService)
specifier|public
name|DetectOpenOfficeInstallation
parameter_list|(
name|JDialog
name|parent
parameter_list|,
name|OpenOfficePreferences
name|preferences
parameter_list|,
name|DialogService
name|dialogService
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
block|}
DECL|method|isInstalled ()
specifier|public
name|Future
argument_list|<
name|Boolean
argument_list|>
name|isInstalled
parameter_list|()
block|{
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|checkAutoDetectedPaths
argument_list|(
name|preferences
argument_list|)
condition|)
block|{
name|future
operator|.
name|complete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|init
argument_list|()
expr_stmt|;
name|BackgroundTask
operator|.
name|wrap
argument_list|(
parameter_list|()
lambda|->
name|future
operator|.
name|complete
argument_list|(
name|autoDetectPaths
argument_list|()
argument_list|)
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|x
lambda|->
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|progressDialog
operator|::
name|dispose
argument_list|)
argument_list|)
operator|.
name|executeWith
argument_list|(
name|Globals
operator|.
name|TASK_EXECUTOR
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
block|{
name|progressDialog
operator|=
name|showProgressDialog
argument_list|(
name|parent
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetecting paths..."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please wait..."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|selectInstallationPath ()
specifier|private
name|Optional
argument_list|<
name|Path
argument_list|>
name|selectInstallationPath
parameter_list|()
block|{
specifier|final
name|NativeDesktop
name|nativeDesktop
init|=
name|JabRefDesktop
operator|.
name|getNativeDesktop
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|path
init|=
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
name|dialogService
operator|.
name|showInformationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not find OpenOffice/LibreOffice installation"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to autodetect OpenOffice/LibreOffice installation. Please choose the installation directory manually."
argument_list|)
argument_list|)
expr_stmt|;
name|DirectoryDialogConfiguration
name|dirDialogConfiguration
init|=
operator|new
name|DirectoryDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|withInitialDirectory
argument_list|(
name|nativeDesktop
operator|.
name|getApplicationDirectory
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|dialogService
operator|.
name|showDirectorySelectionDialog
argument_list|(
name|dirDialogConfiguration
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
return|return
name|path
return|;
block|}
DECL|method|autoDetectPaths ()
specifier|private
name|boolean
name|autoDetectPaths
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|installations
init|=
name|OpenOfficeFileSearch
operator|.
name|detectInstallations
argument_list|()
decl_stmt|;
comment|// manually add installation path
if|if
condition|(
name|installations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|selectInstallationPath
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|installations
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
comment|// select among multiple installations
name|Optional
argument_list|<
name|Path
argument_list|>
name|actualFile
init|=
name|chooseAmongInstallations
argument_list|(
name|installations
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|setOpenOfficePreferences
argument_list|(
name|actualFile
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Checks whether the executablePath exists      */
DECL|method|checkAutoDetectedPaths (OpenOfficePreferences openOfficePreferences)
specifier|private
name|boolean
name|checkAutoDetectedPaths
parameter_list|(
name|OpenOfficePreferences
name|openOfficePreferences
parameter_list|)
block|{
name|String
name|executablePath
init|=
name|openOfficePreferences
operator|.
name|getExecutablePath
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|executablePath
operator|!=
literal|null
operator|)
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|executablePath
argument_list|)
argument_list|)
operator|)
return|;
block|}
DECL|method|setOpenOfficePreferences (Path installDir)
specifier|private
name|boolean
name|setOpenOfficePreferences
parameter_list|(
name|Path
name|installDir
parameter_list|)
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|execPath
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
name|execPath
operator|=
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|WINDOWS_EXECUTABLE
argument_list|,
name|installDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|OS_X
condition|)
block|{
name|execPath
operator|=
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|OSX_EXECUTABLE
argument_list|,
name|installDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OS
operator|.
name|LINUX
condition|)
block|{
name|execPath
operator|=
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|LINUX_EXECUTABLE
argument_list|,
name|installDir
argument_list|)
expr_stmt|;
block|}
name|Optional
argument_list|<
name|Path
argument_list|>
name|jarFilePath
init|=
name|FileUtil
operator|.
name|find
argument_list|(
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|installDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|execPath
operator|.
name|isPresent
argument_list|()
operator|&&
name|jarFilePath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|preferences
operator|.
name|setInstallationPath
argument_list|(
name|installDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setExecutablePath
argument_list|(
name|execPath
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preferences
operator|.
name|setJarsPath
argument_list|(
name|jarFilePath
operator|.
name|get
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|chooseAmongInstallations (List<Path> installDirs)
specifier|private
name|Optional
argument_list|<
name|Path
argument_list|>
name|chooseAmongInstallations
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|installDirs
parameter_list|)
block|{
if|if
condition|(
name|installDirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|installDirs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|installDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
name|String
name|content
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Found more than one OpenOffice/LibreOffice executable."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please choose which one to connect to:"
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|selectedPath
init|=
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|dialogService
operator|.
name|showChoiceDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Choose OpenOffice/LibreOffice executable"
argument_list|)
argument_list|,
name|content
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use selected instance"
argument_list|)
argument_list|,
name|installDirs
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|selectedPath
return|;
block|}
DECL|method|showProgressDialog (JDialog progressParent, String title, String message)
specifier|public
name|JDialog
name|showProgressDialog
parameter_list|(
name|JDialog
name|progressParent
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|JProgressBar
name|bar
init|=
operator|new
name|JProgressBar
argument_list|(
name|SwingConstants
operator|.
name|HORIZONTAL
argument_list|)
decl_stmt|;
specifier|final
name|JDialog
name|progressDialog
init|=
operator|new
name|JDialog
argument_list|(
name|progressParent
argument_list|,
name|title
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|bar
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|bar
operator|.
name|setIndeterminate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|progressDialog
operator|.
name|add
argument_list|(
operator|new
name|JLabel
argument_list|(
name|message
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|progressDialog
operator|.
name|add
argument_list|(
name|bar
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|progressDialog
operator|.
name|pack
argument_list|()
expr_stmt|;
name|progressDialog
operator|.
name|setLocationRelativeTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|progressDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|progressDialog
return|;
block|}
block|}
end_class

end_unit

