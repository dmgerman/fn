begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckMenuItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ContextMenu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ProgressBar
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|RadioMenuItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|SeparatorMenuItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToggleGroup
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|StandardActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBindingRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableKeyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OOBibStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OpenOfficePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|StyleLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|UndefinedParagraphFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|IllegalTypeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|NotRemoveableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|PropertyExistException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|PropertyVetoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|UnknownPropertyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|comp
operator|.
name|helper
operator|.
name|BootstrapException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|container
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|WrappedTargetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Pane to manage the interaction between JabRef and OpenOffice.  */
end_comment

begin_class
DECL|class|OpenOfficePanel
specifier|public
class|class
name|OpenOfficePanel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenOfficePanel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|connect
specifier|private
specifier|final
name|Button
name|connect
decl_stmt|;
DECL|field|manualConnect
specifier|private
specifier|final
name|Button
name|manualConnect
decl_stmt|;
DECL|field|selectDocument
specifier|private
specifier|final
name|Button
name|selectDocument
decl_stmt|;
DECL|field|setStyleFile
specifier|private
specifier|final
name|Button
name|setStyleFile
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select style"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntries
specifier|private
specifier|final
name|Button
name|pushEntries
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesInt
specifier|private
specifier|final
name|Button
name|pushEntriesInt
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite in-text"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesEmpty
specifier|private
specifier|final
name|Button
name|pushEntriesEmpty
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert empty citation"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesAdvanced
specifier|private
specifier|final
name|Button
name|pushEntriesAdvanced
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite special"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|update
specifier|private
specifier|final
name|Button
name|update
decl_stmt|;
DECL|field|merge
specifier|private
specifier|final
name|Button
name|merge
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Merge citations"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|manageCitations
specifier|private
specifier|final
name|Button
name|manageCitations
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manage citations"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|exportCitations
specifier|private
specifier|final
name|Button
name|exportCitations
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Export cited"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|settingsB
specifier|private
specifier|final
name|Button
name|settingsB
init|=
operator|new
name|Button
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|help
specifier|private
specifier|final
name|Button
name|help
decl_stmt|;
DECL|field|vbox
specifier|private
specifier|final
name|VBox
name|vbox
init|=
operator|new
name|VBox
argument_list|()
decl_stmt|;
DECL|field|ooBase
specifier|private
name|OOBibBase
name|ooBase
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|style
specifier|private
name|OOBibStyle
name|style
decl_stmt|;
DECL|field|jabRefPreferences
specifier|private
specifier|final
name|JabRefPreferences
name|jabRefPreferences
decl_stmt|;
DECL|field|taskExecutor
specifier|private
specifier|final
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|StyleLoader
name|loader
decl_stmt|;
DECL|field|ooPrefs
specifier|private
name|OpenOfficePreferences
name|ooPrefs
decl_stmt|;
DECL|method|OpenOfficePanel (JabRefFrame frame, JabRefPreferences jabRefPreferences, OpenOfficePreferences ooPrefs, KeyBindingRepository keyBindingRepository)
specifier|public
name|OpenOfficePanel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|JabRefPreferences
name|jabRefPreferences
parameter_list|,
name|OpenOfficePreferences
name|ooPrefs
parameter_list|,
name|KeyBindingRepository
name|keyBindingRepository
parameter_list|)
block|{
name|ActionFactory
name|factory
init|=
operator|new
name|ActionFactory
argument_list|(
name|keyBindingRepository
argument_list|)
decl_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|ooPrefs
operator|=
name|ooPrefs
expr_stmt|;
name|this
operator|.
name|jabRefPreferences
operator|=
name|jabRefPreferences
expr_stmt|;
name|this
operator|.
name|taskExecutor
operator|=
name|Globals
operator|.
name|TASK_EXECUTOR
expr_stmt|;
name|dialogService
operator|=
name|frame
operator|.
name|getDialogService
argument_list|()
expr_stmt|;
name|connect
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|connect
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|CONNECT_OPEN_OFFICE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connect"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|manualConnect
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|manualConnect
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|CONNECT_OPEN_OFFICE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|manualConnect
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manual connect"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|manualConnect
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|help
operator|=
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|HELP
argument_list|,
operator|new
name|HelpAction
argument_list|(
name|HelpFile
operator|.
name|OPENOFFICE_LIBREOFFICE
argument_list|)
argument_list|)
expr_stmt|;
name|help
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|selectDocument
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|selectDocument
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|OPEN
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select Writer document"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|update
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|update
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|REFRESH
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sync OpenOffice/LibreOffice bibliography"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|ooPrefs
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|initPanel
argument_list|()
expr_stmt|;
block|}
DECL|method|getContent ()
specifier|public
name|Node
name|getContent
parameter_list|()
block|{
return|return
name|vbox
return|;
block|}
DECL|method|initPanel ()
specifier|private
name|void
name|initPanel
parameter_list|()
block|{
name|connect
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|connectAutomatically
argument_list|()
argument_list|)
expr_stmt|;
name|manualConnect
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|connectManually
argument_list|()
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select which open Writer document to work on"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|ooBase
operator|.
name|selectDocument
argument_list|()
expr_stmt|;
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connected to document"
argument_list|)
operator|+
literal|": "
operator|+
name|ooBase
operator|.
name|getCurrentDocumentTitle
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WrappedTargetException
decl||
name|IndexOutOfBoundsException
decl||
name|NoSuchElementException
decl||
name|NoDocumentException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem connecting"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setStyleFile
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|setStyleFile
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
name|StyleSelectDialogView
name|styleDialog
init|=
operator|new
name|StyleSelectDialogView
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|styleDialog
operator|.
name|showAndWait
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|selectedStyle
lambda|->
block|{
name|style
operator|=
name|selectedStyle
expr_stmt|;
try|try
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to reload style file '"
operator|+
name|style
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Current style is '%0'"
argument_list|,
name|style
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries between parenthesis"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries with in-text citation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert a citation without text (the entry will appear in the reference list)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries with extra information"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|update
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ensure that the bibliography is up-to-date"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
name|ooBase
operator|.
name|updateSortedReferenceMarks
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|databases
init|=
name|getBaseList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
name|ooBase
operator|.
name|refreshCiteMarkers
argument_list|(
name|databases
argument_list|,
name|style
argument_list|)
decl_stmt|;
name|ooBase
operator|.
name|rebuildBibTextSection
argument_list|(
name|databases
argument_list|,
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unresolvedKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|unresolvedKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem with style file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BibEntryNotFoundException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"BibEntry not found"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|ex
operator|.
name|getBibtexKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|PropertyVetoException
decl||
name|UnknownPropertyException
decl||
name|WrappedTargetException
decl||
name|NoSuchElementException
decl||
name|CreationException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not update bibliography"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Combine pairs of citations that are separated by spaces only"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|ooBase
operator|.
name|combineCiteMarkers
argument_list|(
name|getBaseList
argument_list|()
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|UnknownPropertyException
decl||
name|PropertyVetoException
decl||
name|CreationException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|BibEntryNotFoundException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem combining cite markers"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ContextMenu
name|settingsMenu
init|=
name|createSettingsPopup
argument_list|()
decl_stmt|;
name|settingsB
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|settingsB
operator|.
name|setContextMenu
argument_list|(
name|settingsMenu
argument_list|)
expr_stmt|;
name|settingsB
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
name|settingsMenu
operator|.
name|show
argument_list|(
name|settingsB
argument_list|,
name|Side
operator|.
name|BOTTOM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
name|ManageCitationsDialogView
name|dlg
init|=
operator|new
name|ManageCitationsDialogView
argument_list|(
name|ooBase
argument_list|)
decl_stmt|;
name|dlg
operator|.
name|showAndWait
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|setMaxWidth
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
name|exportEntries
argument_list|()
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|update
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HBox
name|hbox
init|=
operator|new
name|HBox
argument_list|()
decl_stmt|;
name|hbox
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|connect
argument_list|,
name|manualConnect
argument_list|,
name|selectDocument
argument_list|,
name|update
argument_list|,
name|help
argument_list|)
expr_stmt|;
name|hbox
operator|.
name|getChildren
argument_list|()
operator|.
name|forEach
argument_list|(
name|btn
lambda|->
name|HBox
operator|.
name|setHgrow
argument_list|(
name|btn
argument_list|,
name|Priority
operator|.
name|ALWAYS
argument_list|)
argument_list|)
expr_stmt|;
name|vbox
operator|.
name|setFillWidth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|vbox
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|hbox
argument_list|,
name|setStyleFile
argument_list|,
name|pushEntries
argument_list|,
name|pushEntriesInt
argument_list|,
name|pushEntriesAdvanced
argument_list|,
name|pushEntriesEmpty
argument_list|,
name|merge
argument_list|,
name|manageCitations
argument_list|,
name|exportCitations
argument_list|,
name|settingsB
argument_list|)
expr_stmt|;
block|}
DECL|method|exportEntries ()
specifier|private
name|void
name|exportEntries
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
name|ooBase
operator|.
name|updateSortedReferenceMarks
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|databases
init|=
name|getBaseList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
name|ooBase
operator|.
name|refreshCiteMarkers
argument_list|(
name|databases
argument_list|,
name|style
argument_list|)
decl_stmt|;
name|BibDatabase
name|newDatabase
init|=
name|ooBase
operator|.
name|generateDatabase
argument_list|(
name|databases
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unresolvedKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to generate new library"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|unresolvedKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Defaults
name|defaults
init|=
operator|new
name|Defaults
argument_list|(
name|jabRefPreferences
operator|.
name|getDefaultBibDatabaseMode
argument_list|()
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|newDatabase
argument_list|,
name|defaults
argument_list|)
decl_stmt|;
name|this
operator|.
name|frame
operator|.
name|addTab
argument_list|(
name|databaseContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BibEntryNotFoundException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"BibEntry not found"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|ex
operator|.
name|getBibtexKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|UnknownPropertyException
decl||
name|PropertyVetoException
decl||
name|UndefinedCharacterFormatException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|CreationException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem generating new database."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBaseList ()
specifier|private
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|getBaseList
parameter_list|()
block|{
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ooPrefs
operator|.
name|getUseAllDatabases
argument_list|()
condition|)
block|{
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|frame
operator|.
name|getBasePanelList
argument_list|()
control|)
block|{
name|databases
operator|.
name|add
argument_list|(
name|basePanel
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|databases
operator|.
name|add
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|databases
return|;
block|}
DECL|method|connectAutomatically ()
specifier|private
name|void
name|connectAutomatically
parameter_list|()
block|{
name|DetectOpenOfficeInstallation
name|officeInstallation
init|=
operator|new
name|DetectOpenOfficeInstallation
argument_list|(
name|jabRefPreferences
argument_list|,
name|dialogService
argument_list|)
decl_stmt|;
if|if
condition|(
name|officeInstallation
operator|.
name|isExecutablePathDefined
argument_list|()
condition|)
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Task
argument_list|<
name|Void
argument_list|>
name|taskConnectIfInstalled
init|=
operator|new
name|Task
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|updateProgress
argument_list|(
name|ProgressBar
operator|.
name|INDETERMINATE_PROGRESS
argument_list|,
name|ProgressBar
operator|.
name|INDETERMINATE_PROGRESS
argument_list|)
expr_stmt|;
name|boolean
name|installed
init|=
name|officeInstallation
operator|.
name|isInstalled
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|installed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"OpenOffice Installation could not be detected."
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
comment|// can not use BackgroundTask.wrap(Runnable) because Runnable.run() can't throw exceptions
block|}
block|}
decl_stmt|;
name|taskConnectIfInstalled
operator|.
name|setOnSucceeded
argument_list|(
name|value
lambda|->
name|connect
argument_list|()
argument_list|)
expr_stmt|;
name|taskConnectIfInstalled
operator|.
name|setOnFailed
argument_list|(
name|value
lambda|->
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|taskConnectIfInstalled
operator|.
name|getException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showProgressDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetecting paths..."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetecting paths..."
argument_list|)
argument_list|,
name|taskConnectIfInstalled
argument_list|)
expr_stmt|;
name|taskExecutor
operator|.
name|execute
argument_list|(
name|taskConnectIfInstalled
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|connectManually ()
specifier|private
name|void
name|connectManually
parameter_list|()
block|{
name|showManualConnectionDialog
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|ok
lambda|->
name|connect
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|connect ()
specifier|private
name|void
name|connect
parameter_list|()
block|{
name|ooPrefs
operator|=
name|jabRefPreferences
operator|.
name|getOpenOfficePreferences
argument_list|()
expr_stmt|;
name|Task
argument_list|<
name|OOBibBase
argument_list|>
name|connectTask
init|=
operator|new
name|Task
argument_list|<>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|OOBibBase
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|updateProgress
argument_list|(
name|ProgressBar
operator|.
name|INDETERMINATE_PROGRESS
argument_list|,
name|ProgressBar
operator|.
name|INDETERMINATE_PROGRESS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|URL
argument_list|>
name|jarUrls
init|=
name|findOpenOfficeJars
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|ooPrefs
operator|.
name|getInstallationPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|createBibBase
argument_list|(
name|jarUrls
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|connectTask
operator|.
name|setOnSucceeded
argument_list|(
name|value
lambda|->
block|{
name|ooBase
operator|=
name|connectTask
operator|.
name|getValue
argument_list|()
expr_stmt|;
try|try
block|{
name|ooBase
operator|.
name|selectDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WrappedTargetException
decl||
name|NoSuchElementException
decl||
name|NoDocumentException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error getting open writer documents"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ooBase
operator|.
name|isConnectedToDocument
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connected to document"
argument_list|)
operator|+
literal|": "
operator|+
name|ooBase
operator|.
name|getCurrentDocumentTitle
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Enable actions that depend on Connect:
name|selectDocument
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|update
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|setDisable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|connectTask
operator|.
name|setOnFailed
argument_list|(
name|value
lambda|->
block|{
name|Throwable
name|ex
init|=
name|connectTask
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|UnsatisfiedLinkError
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to connect. One possible reason is that JabRef "
operator|+
literal|"and OpenOffice/LibreOffice are not both running in either 32 bit mode or 64 bit mode."
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ex
operator|instanceof
name|IOException
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Make sure you have installed OpenOffice/LibreOffice with Java support."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"If connecting manually, please verify program and library paths."
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error message:"
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialogService
operator|.
name|showProgressDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetecting paths..."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetecting paths..."
argument_list|)
argument_list|,
name|connectTask
argument_list|)
expr_stmt|;
name|taskExecutor
operator|.
name|execute
argument_list|(
name|connectTask
argument_list|)
expr_stmt|;
block|}
DECL|method|findOpenOfficeJars (Path configurationPath)
specifier|private
name|List
argument_list|<
name|URL
argument_list|>
name|findOpenOfficeJars
parameter_list|(
name|Path
name|configurationPath
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Optional
argument_list|<
name|Path
argument_list|>
argument_list|>
name|filePaths
init|=
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|jar
lambda|->
name|FileUtil
operator|.
name|find
argument_list|(
name|jar
argument_list|,
name|configurationPath
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filePaths
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"(Not all) required Open Office Jars were found inside installation path. Searched for "
operator|+
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|+
literal|" in "
operator|+
name|configurationPath
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|jarURLs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Optional
argument_list|<
name|Path
argument_list|>
name|jarPath
range|:
name|filePaths
control|)
block|{
name|jarURLs
operator|.
name|add
argument_list|(
operator|(
name|jarPath
operator|.
name|get
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|jarURLs
return|;
block|}
DECL|method|createBibBase (List<URL> jarUrls)
specifier|private
name|OOBibBase
name|createBibBase
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|jarUrls
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|BootstrapException
throws|,
name|CreationException
throws|,
name|ClassNotFoundException
block|{
return|return
operator|new
name|OOBibBase
argument_list|(
name|jarUrls
argument_list|,
literal|true
argument_list|,
name|dialogService
argument_list|)
return|;
block|}
DECL|method|showManualConnectionDialog ()
specifier|private
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|showManualConnectionDialog
parameter_list|()
block|{
return|return
operator|new
name|ManualConnectDialogView
argument_list|(
name|dialogService
argument_list|)
operator|.
name|showAndWait
argument_list|()
return|;
block|}
DECL|method|pushEntries (boolean inParenthesisIn, boolean withText, boolean addPageInfo)
specifier|private
name|void
name|pushEntries
parameter_list|(
name|boolean
name|inParenthesisIn
parameter_list|,
name|boolean
name|withText
parameter_list|,
name|boolean
name|addPageInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ooBase
operator|.
name|isConnectedToDocument
argument_list|()
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error pushing entries"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Not connected to any Writer document. Please"
operator|+
literal|" make sure a document is open, and use the 'Select Writer document' button to connect to it."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Boolean
name|inParenthesis
init|=
name|inParenthesisIn
decl_stmt|;
name|String
name|pageInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addPageInfo
condition|)
block|{
name|AdvancedCiteDialogView
name|citeDialog
init|=
operator|new
name|AdvancedCiteDialogView
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|AdvancedCiteDialogViewModel
argument_list|>
name|citeDialogViewModel
init|=
name|citeDialog
operator|.
name|showAndWait
argument_list|()
decl_stmt|;
if|if
condition|(
name|citeDialogViewModel
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|AdvancedCiteDialogViewModel
name|model
init|=
name|citeDialogViewModel
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|pageInfoProperty
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pageInfo
operator|=
name|model
operator|.
name|pageInfoProperty
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|inParenthesis
operator|=
name|model
operator|.
name|citeInParProperty
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BibDatabase
name|database
init|=
name|panel
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
operator|&&
name|checkThatEntriesHaveKeys
argument_list|(
name|entries
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
expr_stmt|;
block|}
name|ooBase
operator|.
name|insertEntry
argument_list|(
name|entries
argument_list|,
name|database
argument_list|,
name|getBaseList
argument_list|()
argument_list|,
name|style
argument_list|,
name|inParenthesis
argument_list|,
name|withText
argument_list|,
name|pageInfo
argument_list|,
name|ooPrefs
operator|.
name|getSyncWhenCiting
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem with style file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|UnknownPropertyException
decl||
name|PropertyVetoException
decl||
name|CreationException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|BibEntryNotFoundException
decl||
name|IllegalTypeException
decl||
name|PropertyExistException
decl||
name|NotRemoveableException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not insert entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Check that all entries in the list have BibTeX keys, if not ask if they should be generated      *      * @param entries A list of entries to be checked      * @return true if all entries have BibTeX keys, if it so may be after generating them      */
DECL|method|checkThatEntriesHaveKeys (List<BibEntry> entries)
specifier|private
name|boolean
name|checkThatEntriesHaveKeys
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
comment|// Check if there are empty keys
name|boolean
name|emptyKeys
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Found one, no need to look further for now
name|emptyKeys
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// If no empty keys, return true
if|if
condition|(
operator|!
name|emptyKeys
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Ask if keys should be generated
name|boolean
name|citePressed
init|=
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot cite entries without BibTeX keys. Generate keys now?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate keys"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|citePressed
operator|&&
operator|(
name|panel
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// Generate keys
name|BibtexKeyPatternPreferences
name|prefs
init|=
name|jabRefPreferences
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
decl_stmt|;
name|NamedCompound
name|undoCompound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Generate key
operator|new
name|BibtexKeyGenerator
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|prefs
argument_list|)
operator|.
name|generateAndSetKey
argument_list|(
name|entry
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|change
lambda|->
name|undoCompound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|change
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|undoCompound
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// Add all undos
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoCompound
argument_list|)
expr_stmt|;
comment|// Now every entry has a key
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// No, we canceled (or there is no panel to get the database from, highly unlikely)
return|return
literal|false
return|;
block|}
block|}
DECL|method|showConnectionLostErrorMessage ()
specifier|private
name|void
name|showConnectionLostErrorMessage
parameter_list|()
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection lost"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection to OpenOffice/LibreOffice has been lost. "
operator|+
literal|"Please make sure OpenOffice/LibreOffice is running, and try to reconnect."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUndefinedParagraphFormat (UndefinedParagraphFormatException ex)
specifier|private
name|void
name|reportUndefinedParagraphFormat
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Undefined paragraph format"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your style file specifies the paragraph format '%0', "
operator|+
literal|"which is undefined in your current OpenOffice/LibreOffice document."
argument_list|,
name|ex
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The paragraph format is controlled by the property 'ReferenceParagraphFormat' or 'ReferenceHeaderParagraphFormat' in the style file."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUndefinedCharacterFormat (UndefinedCharacterFormatException ex)
specifier|private
name|void
name|reportUndefinedCharacterFormat
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Undefined character format"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your style file specifies the character format '%0', "
operator|+
literal|"which is undefined in your current OpenOffice/LibreOffice document."
argument_list|,
name|ex
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The character format is controlled by the citation property 'CitationCharacterFormat' in the style file."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createSettingsPopup ()
specifier|private
name|ContextMenu
name|createSettingsPopup
parameter_list|()
block|{
name|ContextMenu
name|contextMenu
init|=
operator|new
name|ContextMenu
argument_list|()
decl_stmt|;
name|CheckMenuItem
name|autoSync
init|=
operator|new
name|CheckMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically sync bibliography when inserting citations"
argument_list|)
argument_list|)
decl_stmt|;
name|autoSync
operator|.
name|selectedProperty
argument_list|()
operator|.
name|set
argument_list|(
name|ooPrefs
operator|.
name|getSyncWhenCiting
argument_list|()
argument_list|)
expr_stmt|;
name|ToggleGroup
name|toggleGroup
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|RadioMenuItem
name|useActiveBase
init|=
operator|new
name|RadioMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up BibTeX entries in the active tab only"
argument_list|)
argument_list|)
decl_stmt|;
name|RadioMenuItem
name|useAllBases
init|=
operator|new
name|RadioMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up BibTeX entries in all open libraries"
argument_list|)
argument_list|)
decl_stmt|;
name|useActiveBase
operator|.
name|setToggleGroup
argument_list|(
name|toggleGroup
argument_list|)
expr_stmt|;
name|useAllBases
operator|.
name|setToggleGroup
argument_list|(
name|toggleGroup
argument_list|)
expr_stmt|;
name|MenuItem
name|clearConnectionSettings
init|=
operator|new
name|MenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear connection settings"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ooPrefs
operator|.
name|getUseAllDatabases
argument_list|()
condition|)
block|{
name|useAllBases
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|useActiveBase
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|autoSync
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
name|ooPrefs
operator|.
name|setSyncWhenCiting
argument_list|(
name|autoSync
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|jabRefPreferences
operator|.
name|setOpenOfficePreferences
argument_list|(
name|ooPrefs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|useAllBases
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
name|ooPrefs
operator|.
name|setUseAllDatabases
argument_list|(
name|useAllBases
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|jabRefPreferences
operator|.
name|setOpenOfficePreferences
argument_list|(
name|ooPrefs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|useActiveBase
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
name|ooPrefs
operator|.
name|setUseAllDatabases
argument_list|(
operator|!
name|useActiveBase
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|jabRefPreferences
operator|.
name|setOpenOfficePreferences
argument_list|(
name|ooPrefs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|clearConnectionSettings
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
name|ooPrefs
operator|.
name|clearConnectionSettings
argument_list|()
expr_stmt|;
name|dialogService
operator|.
name|notify
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cleared connection settings"
argument_list|)
argument_list|)
expr_stmt|;
name|jabRefPreferences
operator|.
name|setOpenOfficePreferences
argument_list|(
name|ooPrefs
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|contextMenu
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|autoSync
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|useActiveBase
argument_list|,
name|useAllBases
argument_list|,
operator|new
name|SeparatorMenuItem
argument_list|()
argument_list|,
name|clearConnectionSettings
argument_list|)
expr_stmt|;
return|return
name|contextMenu
return|;
block|}
block|}
end_class

end_unit

