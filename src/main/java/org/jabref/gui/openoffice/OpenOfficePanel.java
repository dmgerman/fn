begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.openoffice
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|openoffice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FileDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableKeyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|worker
operator|.
name|AbstractWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OOBibStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|OpenOfficePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|StyleLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|openoffice
operator|.
name|UndefinedParagraphFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|Defaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|FormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|IllegalTypeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|NotRemoveableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|PropertyExistException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|PropertyVetoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|beans
operator|.
name|UnknownPropertyException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|comp
operator|.
name|helper
operator|.
name|BootstrapException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|container
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|WrappedTargetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * This test panel can be opened by reflection from JabRef, passing the JabRefFrame as an  * argument to the start() method. It displays buttons for testing interaction functions  * between JabRef and OpenOffice.  */
end_comment

begin_class
DECL|class|OpenOfficePanel
specifier|public
class|class
name|OpenOfficePanel
extends|extends
name|AbstractWorker
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenOfficePanel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sidePane
specifier|private
name|OpenOfficeSidePanel
name|sidePane
decl_stmt|;
DECL|field|diag
specifier|private
name|JDialog
name|diag
decl_stmt|;
DECL|field|connect
specifier|private
specifier|final
name|JButton
name|connect
decl_stmt|;
DECL|field|manualConnect
specifier|private
specifier|final
name|JButton
name|manualConnect
decl_stmt|;
DECL|field|selectDocument
specifier|private
specifier|final
name|JButton
name|selectDocument
decl_stmt|;
DECL|field|setStyleFile
specifier|private
specifier|final
name|JButton
name|setStyleFile
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select style"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntries
specifier|private
specifier|final
name|JButton
name|pushEntries
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesInt
specifier|private
specifier|final
name|JButton
name|pushEntriesInt
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite in-text"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesEmpty
specifier|private
specifier|final
name|JButton
name|pushEntriesEmpty
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert empty citation"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|pushEntriesAdvanced
specifier|private
specifier|final
name|JButton
name|pushEntriesAdvanced
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite special"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|update
specifier|private
specifier|final
name|JButton
name|update
decl_stmt|;
DECL|field|merge
specifier|private
specifier|final
name|JButton
name|merge
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Merge citations"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|manageCitations
specifier|private
specifier|final
name|JButton
name|manageCitations
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manage citations"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|exportCitations
specifier|private
specifier|final
name|JButton
name|exportCitations
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Export cited"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|settingsB
specifier|private
specifier|final
name|JButton
name|settingsB
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|help
specifier|private
specifier|final
name|JButton
name|help
init|=
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OpenOffice/LibreOffice integration"
argument_list|)
argument_list|,
name|HelpFile
operator|.
name|OPENOFFICE_LIBREOFFICE
argument_list|)
operator|.
name|getHelpButton
argument_list|()
decl_stmt|;
DECL|field|ooBase
specifier|private
name|OOBibBase
name|ooBase
decl_stmt|;
DECL|field|frame
specifier|private
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|style
specifier|private
name|OOBibStyle
name|style
decl_stmt|;
DECL|field|styleDialog
specifier|private
name|StyleSelectDialog
name|styleDialog
decl_stmt|;
DECL|field|dialogOkPressed
specifier|private
name|boolean
name|dialogOkPressed
decl_stmt|;
DECL|field|executablePath
specifier|private
name|String
name|executablePath
decl_stmt|;
DECL|field|connectException
specifier|private
name|IOException
name|connectException
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|OpenOfficePreferences
name|preferences
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|StyleLoader
name|loader
decl_stmt|;
DECL|method|OpenOfficePanel (JabRefFrame jabRefFrame, SidePaneManager spManager)
specifier|public
name|OpenOfficePanel
parameter_list|(
name|JabRefFrame
name|jabRefFrame
parameter_list|,
name|SidePaneManager
name|spManager
parameter_list|)
block|{
name|Icon
name|connectImage
init|=
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CONNECT_OPEN_OFFICE
operator|.
name|getSmallIcon
argument_list|()
decl_stmt|;
name|connect
operator|=
operator|new
name|JButton
argument_list|(
name|connectImage
argument_list|)
expr_stmt|;
name|manualConnect
operator|=
operator|new
name|JButton
argument_list|(
name|connectImage
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connect"
argument_list|)
argument_list|)
expr_stmt|;
name|manualConnect
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Manual connect"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|24
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|manualConnect
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|24
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|selectDocument
operator|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPEN
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select Writer document"
argument_list|)
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|24
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REFRESH
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|update
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sync OpenOffice/LibreOffice bibliography"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|setPreferredSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|24
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|preferences
operator|=
operator|new
name|OpenOfficePreferences
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|StyleLoader
argument_list|(
name|preferences
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLayoutFormatterPreferences
argument_list|(
name|Globals
operator|.
name|journalAbbreviationLoader
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|jabRefFrame
expr_stmt|;
name|sidePane
operator|=
operator|new
name|OpenOfficeSidePanel
argument_list|(
name|spManager
argument_list|,
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"openoffice"
argument_list|)
argument_list|,
literal|"OpenOffice/LibreOffice"
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|initPanel
argument_list|()
expr_stmt|;
name|spManager
operator|.
name|register
argument_list|(
name|sidePane
argument_list|)
expr_stmt|;
block|}
DECL|method|initPanel ()
specifier|private
name|void
name|initPanel
parameter_list|()
block|{
name|connect
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|connect
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|manualConnect
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|connect
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select which open Writer document to work on"
argument_list|)
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|ooBase
operator|.
name|selectDocument
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connected to document"
argument_list|)
operator|+
literal|": "
operator|+
name|ooBase
operator|.
name|getCurrentDocumentTitle
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownPropertyException
decl||
name|WrappedTargetException
decl||
name|IndexOutOfBoundsException
decl||
name|NoSuchElementException
decl||
name|NoDocumentException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem connecting"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setStyleFile
operator|.
name|addActionListener
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
name|styleDialog
operator|==
literal|null
condition|)
block|{
name|styleDialog
operator|=
operator|new
name|StyleSelectDialog
argument_list|(
name|frame
argument_list|,
name|preferences
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
name|styleDialog
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|styleDialog
operator|.
name|getStyle
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|selectedStyle
lambda|->
block|{
name|style
operator|=
name|selectedStyle
expr_stmt|;
try|try
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to reload style file '"
operator|+
name|style
operator|.
name|getPath
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|frame
operator|.
name|setStatus
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Current style is '%0'"
argument_list|,
name|style
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries between parenthesis"
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries with in-text citation"
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert a citation without text (the entry will appear in the reference list)"
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite selected entries with extra information"
argument_list|)
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|pushEntries
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ensure that the bibliography is up-to-date"
argument_list|)
argument_list|)
expr_stmt|;
name|Action
name|updateAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
name|ooBase
operator|.
name|updateSortedReferenceMarks
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|databases
init|=
name|getBaseList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
name|ooBase
operator|.
name|refreshCiteMarkers
argument_list|(
name|databases
argument_list|,
name|style
argument_list|)
decl_stmt|;
name|ooBase
operator|.
name|rebuildBibTextSection
argument_list|(
name|databases
argument_list|,
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unresolvedKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|unresolvedKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem with style file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BibEntryNotFoundException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|ex
operator|.
name|getBibtexKey
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"BibEntry not found"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|PropertyVetoException
decl||
name|UnknownPropertyException
decl||
name|WrappedTargetException
decl||
name|NoSuchElementException
decl||
name|CreationException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not update bibliography"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|update
operator|.
name|addActionListener
argument_list|(
name|updateAction
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Combine pairs of citations that are separated by spaces only"
argument_list|)
argument_list|)
expr_stmt|;
name|merge
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|ooBase
operator|.
name|combineCiteMarkers
argument_list|(
name|getBaseList
argument_list|()
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|UnknownPropertyException
decl||
name|PropertyVetoException
decl||
name|CreationException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|BibEntryNotFoundException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem combining cite markers"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|settingsB
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|showSettingsPopup
argument_list|()
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
try|try
block|{
name|CitationManager
name|cm
init|=
operator|new
name|CitationManager
argument_list|(
name|frame
argument_list|,
name|ooBase
argument_list|)
decl_stmt|;
name|cm
operator|.
name|showDialog
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|UnknownPropertyException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem showing citation manager"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|addActionListener
argument_list|(
name|event
lambda|->
name|exportEntries
argument_list|()
argument_list|)
expr_stmt|;
name|selectDocument
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|update
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|diag
operator|=
operator|new
name|JDialog
argument_list|(
operator|(
name|JFrame
operator|)
literal|null
argument_list|,
literal|"OpenOffice/LibreOffice panel"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FormBuilder
name|mainBuilder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
operator|.
name|layout
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow"
argument_list|,
literal|"p,p,p,p,p,p,p,p,p,p,p"
argument_list|)
argument_list|)
decl_stmt|;
name|FormBuilder
name|topRowBuilder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
operator|.
name|layout
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"fill:pref:grow, 1dlu, fill:pref:grow, 1dlu, fill:pref:grow, 1dlu, fill:pref:grow, 1dlu, fill:pref"
argument_list|,
literal|"pref"
argument_list|)
argument_list|)
decl_stmt|;
name|topRowBuilder
operator|.
name|add
argument_list|(
name|connect
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|topRowBuilder
operator|.
name|add
argument_list|(
name|manualConnect
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|topRowBuilder
operator|.
name|add
argument_list|(
name|selectDocument
argument_list|)
operator|.
name|xy
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|topRowBuilder
operator|.
name|add
argument_list|(
name|update
argument_list|)
operator|.
name|xy
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|topRowBuilder
operator|.
name|add
argument_list|(
name|help
argument_list|)
operator|.
name|xy
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|topRowBuilder
operator|.
name|getPanel
argument_list|()
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|setStyleFile
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|pushEntries
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|pushEntriesInt
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|pushEntriesAdvanced
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|pushEntriesEmpty
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|merge
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|manageCitations
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|exportCitations
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|mainBuilder
operator|.
name|add
argument_list|(
name|settingsB
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|JPanel
name|content
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|sidePane
operator|.
name|setContentContainer
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|content
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|add
argument_list|(
name|mainBuilder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|REFRESH_OO
argument_list|)
argument_list|,
literal|"Refresh OO"
argument_list|)
expr_stmt|;
name|frame
operator|.
name|getTabbedPane
argument_list|()
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"Refresh OO"
argument_list|,
name|updateAction
argument_list|)
expr_stmt|;
block|}
DECL|method|exportEntries ()
specifier|private
name|void
name|exportEntries
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|style
operator|.
name|ensureUpToDate
argument_list|()
expr_stmt|;
block|}
name|ooBase
operator|.
name|updateSortedReferenceMarks
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|databases
init|=
name|getBaseList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|unresolvedKeys
init|=
name|ooBase
operator|.
name|refreshCiteMarkers
argument_list|(
name|databases
argument_list|,
name|style
argument_list|)
decl_stmt|;
name|BibDatabase
name|newDatabase
init|=
name|ooBase
operator|.
name|generateDatabase
argument_list|(
name|databases
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|unresolvedKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|unresolvedKeys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to generate new library"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
name|Defaults
name|defaults
init|=
operator|new
name|Defaults
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getDefaultBibDatabaseMode
argument_list|()
argument_list|)
decl_stmt|;
name|BibDatabaseContext
name|databaseContext
init|=
operator|new
name|BibDatabaseContext
argument_list|(
name|newDatabase
argument_list|,
name|defaults
argument_list|)
decl_stmt|;
name|this
operator|.
name|frame
operator|.
name|addTab
argument_list|(
name|databaseContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BibEntryNotFoundException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your OpenOffice/LibreOffice document references the BibTeX key '%0', which could not be found in your current library."
argument_list|,
name|ex
operator|.
name|getBibtexKey
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to synchronize bibliography"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"BibEntry not found"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|UnknownPropertyException
decl||
name|PropertyVetoException
decl||
name|UndefinedCharacterFormatException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|CreationException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem generating new database."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBaseList ()
specifier|private
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|getBaseList
parameter_list|()
block|{
name|List
argument_list|<
name|BibDatabase
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferences
operator|.
name|useAllDatabases
argument_list|()
condition|)
block|{
for|for
control|(
name|BasePanel
name|basePanel
range|:
name|frame
operator|.
name|getBasePanelList
argument_list|()
control|)
block|{
name|databases
operator|.
name|add
argument_list|(
name|basePanel
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|databases
operator|.
name|add
argument_list|(
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|databases
return|;
block|}
DECL|method|connect (boolean autoDetect)
specifier|private
name|void
name|connect
parameter_list|(
name|boolean
name|autoDetect
parameter_list|)
block|{
if|if
condition|(
name|autoDetect
condition|)
block|{
name|DetectOpenOfficeInstallation
name|officeInstallation
init|=
operator|new
name|DetectOpenOfficeInstallation
argument_list|(
name|diag
argument_list|,
name|preferences
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|officeInstallation
operator|.
name|isInstalled
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Autodetection failed"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|diag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|showManualConnectionDialog
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dialogOkPressed
condition|)
block|{
return|return;
block|}
block|}
name|JDialog
name|progressDialog
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Add OO JARs to the classpath
if|if
condition|(
name|OS
operator|.
name|LINUX
condition|)
block|{
comment|// Jars might be located in another path then the executable on Linux
name|loadOpenOfficeJars
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|preferences
operator|.
name|getInstallationPath
argument_list|()
argument_list|)
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|preferences
operator|.
name|getJarsPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadOpenOfficeJars
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|preferences
operator|.
name|getInstallationPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Show progress dialog:
name|progressDialog
operator|=
operator|new
name|DetectOpenOfficeInstallation
argument_list|(
name|diag
argument_list|,
name|preferences
argument_list|)
operator|.
name|showProgressDialog
argument_list|(
name|diag
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connecting"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please wait..."
argument_list|)
argument_list|)
expr_stmt|;
name|getWorker
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// Do the actual connection, using Spin to get off the EDT.
name|progressDialog
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|diag
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|ooBase
operator|==
literal|null
condition|)
block|{
throw|throw
name|connectException
throw|;
block|}
if|if
condition|(
name|ooBase
operator|.
name|isConnectedToDocument
argument_list|()
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connected to document"
argument_list|)
operator|+
literal|": "
operator|+
name|ooBase
operator|.
name|getCurrentDocumentTitle
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Enable actions that depend on Connect:
name|selectDocument
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntries
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntriesInt
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntriesEmpty
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pushEntriesAdvanced
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|update
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|merge
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manageCitations
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|exportCitations
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsatisfiedLinkError
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Unable to connect. One possible reason is that JabRef "
operator|+
literal|"and OpenOffice/LibreOffice are not both running in either 32 bit mode or 64 bit mode."
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Could not connect to running OpenOffice/LibreOffice."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Make sure you have installed OpenOffice/LibreOffice with Java support."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"If connecting manually, please verify program and library paths."
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error message:"
argument_list|)
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|progressDialog
operator|!=
literal|null
condition|)
block|{
name|progressDialog
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadOpenOfficeJars (List<Path> configurationPaths)
specifier|private
name|void
name|loadOpenOfficeJars
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|configurationPaths
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|filePaths
init|=
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|jar
lambda|->
name|FileUtil
operator|.
name|find
argument_list|(
name|jar
argument_list|,
name|configurationPaths
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|List
operator|::
name|stream
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|filePaths
operator|.
name|size
argument_list|()
operator|!=
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"(Not all) required Open Office Jars were found inside installation path."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|jarURLs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|OpenOfficePreferences
operator|.
name|OO_JARS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|jarPath
range|:
name|filePaths
control|)
block|{
name|jarURLs
operator|.
name|add
argument_list|(
operator|(
name|jarPath
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|addURL
argument_list|(
name|jarURLs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Connect
name|ooBase
operator|=
operator|new
name|OOBibBase
argument_list|(
name|preferences
operator|.
name|getExecutablePath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownPropertyException
decl||
name|CreationException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|NoDocumentException
decl||
name|BootstrapException
decl||
name|InvocationTargetException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|ooBase
operator|=
literal|null
expr_stmt|;
name|connectException
operator|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addURL (List<URL> jarList)
specifier|private
specifier|static
name|void
name|addURL
parameter_list|(
name|List
argument_list|<
name|URL
argument_list|>
name|jarList
parameter_list|)
throws|throws
name|IOException
block|{
name|URLClassLoader
name|sysloader
init|=
operator|(
name|URLClassLoader
operator|)
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|URLClassLoader
argument_list|>
name|sysclass
init|=
name|URLClassLoader
operator|.
name|class
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|sysclass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addURL"
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
operator|)
operator|new
name|Class
index|[]
block|{
name|URL
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|URL
name|anU
range|:
name|jarList
control|)
block|{
name|method
operator|.
name|invoke
argument_list|(
name|sysloader
argument_list|,
name|anU
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
decl||
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not add URL to system classloader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error, could not add URL to system classloader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|showManualConnectionDialog ()
specifier|private
name|void
name|showManualConnectionDialog
parameter_list|()
block|{
name|dialogOkPressed
operator|=
literal|false
expr_stmt|;
specifier|final
name|JDialog
name|cDiag
init|=
operator|new
name|JDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Set connection parameters"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Path fields
specifier|final
name|JTextField
name|ooPath
init|=
operator|new
name|JTextField
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|JButton
name|browseOOPath
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|ooPath
operator|.
name|setText
argument_list|(
name|preferences
operator|.
name|getInstallationPath
argument_list|()
argument_list|)
expr_stmt|;
name|browseOOPath
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
operator|new
name|FileDialog
argument_list|(
name|frame
argument_list|)
operator|.
name|showDialogAndGetSelectedDirectory
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|f
lambda|->
name|ooPath
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JTextField
name|ooExec
init|=
operator|new
name|JTextField
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|JButton
name|browseOOExec
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|ooExec
operator|.
name|setText
argument_list|(
name|preferences
operator|.
name|getExecutablePath
argument_list|()
argument_list|)
expr_stmt|;
name|browseOOExec
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
operator|new
name|FileDialog
argument_list|(
name|frame
argument_list|)
operator|.
name|showDialogAndGetSelectedFile
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|f
lambda|->
name|ooExec
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JTextField
name|ooJars
init|=
operator|new
name|JTextField
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|ooJars
operator|.
name|setText
argument_list|(
name|preferences
operator|.
name|getJarsPath
argument_list|()
argument_list|)
expr_stmt|;
name|JButton
name|browseOOJars
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Browse"
argument_list|)
argument_list|)
decl_stmt|;
name|browseOOJars
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
operator|new
name|FileDialog
argument_list|(
name|frame
argument_list|)
operator|.
name|showDialogAndGetSelectedDirectory
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|f
lambda|->
name|ooJars
operator|.
name|setText
argument_list|(
name|f
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FormBuilder
name|builder
init|=
name|FormBuilder
operator|.
name|create
argument_list|()
operator|.
name|layout
argument_list|(
operator|new
name|FormLayout
argument_list|(
literal|"left:pref, 4dlu, fill:pref:grow, 4dlu, fill:pref"
argument_list|,
literal|"pref"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
operator|||
name|OS
operator|.
name|OS_X
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to OpenOffice/LibreOffice directory"
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|ooPath
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|browseOOPath
argument_list|)
operator|.
name|xy
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to OpenOffice/LibreOffice executable"
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|ooExec
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|browseOOExec
argument_list|)
operator|.
name|xy
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendRows
argument_list|(
literal|"4dlu, pref"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Path to OpenOffice/LibreOffice library dir"
argument_list|)
argument_list|)
operator|.
name|xy
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|ooJars
argument_list|)
operator|.
name|xy
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|browseOOJars
argument_list|)
operator|.
name|xy
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|padding
argument_list|(
literal|"5dlu, 5dlu, 5dlu, 5dlu"
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|builder
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
comment|// Buttons
name|JButton
name|ok
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
name|JButton
name|cancel
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
name|ok
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|OS
operator|.
name|WINDOWS
operator|||
name|OS
operator|.
name|OS_X
condition|)
block|{
name|preferences
operator|.
name|updateConnectionParams
argument_list|(
name|ooPath
operator|.
name|getText
argument_list|()
argument_list|,
name|ooPath
operator|.
name|getText
argument_list|()
argument_list|,
name|ooPath
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|preferences
operator|.
name|updateConnectionParams
argument_list|(
name|ooPath
operator|.
name|getText
argument_list|()
argument_list|,
name|ooExec
operator|.
name|getText
argument_list|()
argument_list|,
name|ooJars
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dialogOkPressed
operator|=
literal|true
expr_stmt|;
name|cDiag
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|cDiag
operator|.
name|dispose
argument_list|()
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|bb
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addRelatedGap
argument_list|()
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addButton
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|bb
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|bb
operator|.
name|padding
argument_list|(
literal|"5dlu, 5dlu, 5dlu, 5dlu"
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|bb
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
comment|// Finish and show dialog
name|cDiag
operator|.
name|pack
argument_list|()
expr_stmt|;
name|cDiag
operator|.
name|setLocationRelativeTo
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|cDiag
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|pushEntries (boolean inParenthesisIn, boolean withText, boolean addPageInfo)
specifier|private
name|void
name|pushEntries
parameter_list|(
name|boolean
name|inParenthesisIn
parameter_list|,
name|boolean
name|withText
parameter_list|,
name|boolean
name|addPageInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ooBase
operator|.
name|isConnectedToDocument
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Not connected to any Writer document. Please"
operator|+
literal|" make sure a document is open, and use the 'Select Writer document' button to connect to it."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
return|return;
block|}
name|Boolean
name|inParenthesis
init|=
name|inParenthesisIn
decl_stmt|;
name|String
name|pageInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|addPageInfo
condition|)
block|{
name|AdvancedCiteDialog
name|citeDialog
init|=
operator|new
name|AdvancedCiteDialog
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|citeDialog
operator|.
name|showDialog
argument_list|()
expr_stmt|;
if|if
condition|(
name|citeDialog
operator|.
name|canceled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|citeDialog
operator|.
name|getPageInfo
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pageInfo
operator|=
name|citeDialog
operator|.
name|getPageInfo
argument_list|()
expr_stmt|;
block|}
name|inParenthesis
operator|=
name|citeDialog
operator|.
name|isInParenthesisCite
argument_list|()
expr_stmt|;
block|}
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
specifier|final
name|BibDatabase
name|database
init|=
name|panel
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
init|=
name|panel
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
operator|&&
name|checkThatEntriesHaveKeys
argument_list|(
name|entries
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|loader
operator|.
name|getUsedStyle
argument_list|()
expr_stmt|;
block|}
name|ooBase
operator|.
name|insertEntry
argument_list|(
name|entries
argument_list|,
name|database
argument_list|,
name|getBaseList
argument_list|()
argument_list|,
name|style
argument_list|,
name|inParenthesis
argument_list|,
name|withText
argument_list|,
name|pageInfo
argument_list|,
name|preferences
operator|.
name|syncWhenCiting
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must select either a valid style file, or use one of the default styles."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"No valid style file defined"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem with style file"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionLostException
name|ex
parameter_list|)
block|{
name|showConnectionLostErrorMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedCharacterFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|reportUndefinedParagraphFormat
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|sun
operator|.
name|star
operator|.
name|lang
operator|.
name|IllegalArgumentException
decl||
name|UnknownPropertyException
decl||
name|PropertyVetoException
decl||
name|CreationException
decl||
name|NoSuchElementException
decl||
name|WrappedTargetException
decl||
name|IOException
decl||
name|BibEntryNotFoundException
decl||
name|IllegalTypeException
decl||
name|PropertyExistException
decl||
name|NotRemoveableException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not insert entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Check that all entries in the list have BibTeX keys, if not ask if they should be generated      *      * @param entries A list of entries to be checked      * @return true if all entries have BibTeX keys, if it so may be after generating them      */
DECL|method|checkThatEntriesHaveKeys (List<BibEntry> entries)
specifier|private
name|boolean
name|checkThatEntriesHaveKeys
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
comment|// Check if there are empty keys
name|boolean
name|emptyKeys
init|=
literal|false
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Found one, no need to look further for now
name|emptyKeys
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// If no empty keys, return true
if|if
condition|(
operator|!
name|emptyKeys
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Ask if keys should be generated
name|String
index|[]
name|options
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate keys"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
block|}
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|this
operator|.
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cannot cite entries without BibTeX keys. Generate keys now?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|OK_CANCEL_OPTION
argument_list|,
name|JOptionPane
operator|.
name|PLAIN_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|answer
operator|==
name|JOptionPane
operator|.
name|OK_OPTION
operator|)
operator|&&
operator|(
name|panel
operator|!=
literal|null
operator|)
condition|)
block|{
comment|// Generate keys
name|BibtexKeyPatternPreferences
name|prefs
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
decl_stmt|;
name|NamedCompound
name|undoCompound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cite"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Generate key
name|BibtexKeyPatternUtil
operator|.
name|makeAndSetLabel
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCiteKeyPattern
argument_list|(
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
argument_list|,
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
comment|// Add undo change
name|undoCompound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|entry
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|undoCompound
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// Add all undos
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoCompound
argument_list|)
expr_stmt|;
comment|// Now every entry has a key
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// No, we canceled (or there is no panel to get the database from, highly unlikely)
return|return
literal|false
return|;
block|}
block|}
DECL|method|showConnectionLostErrorMessage ()
specifier|private
name|void
name|showConnectionLostErrorMessage
parameter_list|()
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection to OpenOffice/LibreOffice has been lost. "
operator|+
literal|"Please make sure OpenOffice/LibreOffice is running, and try to reconnect."
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection lost"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUndefinedParagraphFormat (UndefinedParagraphFormatException ex)
specifier|private
name|void
name|reportUndefinedParagraphFormat
parameter_list|(
name|UndefinedParagraphFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your style file specifies the paragraph format '%0', "
operator|+
literal|"which is undefined in your current OpenOffice/LibreOffice document."
argument_list|,
name|ex
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|+
literal|"<br>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The paragraph format is controlled by the property 'ReferenceParagraphFormat' or 'ReferenceHeaderParagraphFormat' in the style file."
argument_list|)
operator|+
literal|"</html>"
argument_list|,
literal|""
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|reportUndefinedCharacterFormat (UndefinedCharacterFormatException ex)
specifier|private
name|void
name|reportUndefinedCharacterFormat
parameter_list|(
name|UndefinedCharacterFormatException
name|ex
parameter_list|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Your style file specifies the character format '%0', "
operator|+
literal|"which is undefined in your current OpenOffice/LibreOffice document."
argument_list|,
name|ex
operator|.
name|getFormatName
argument_list|()
argument_list|)
operator|+
literal|"<br>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"The character format is controlled by the citation property 'CitationCharacterFormat' in the style file."
argument_list|)
operator|+
literal|"</html>"
argument_list|,
literal|""
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
DECL|method|showSettingsPopup ()
specifier|private
name|void
name|showSettingsPopup
parameter_list|()
block|{
name|JPopupMenu
name|menu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
specifier|final
name|JCheckBoxMenuItem
name|autoSync
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically sync bibliography when inserting citations"
argument_list|)
argument_list|,
name|preferences
operator|.
name|syncWhenCiting
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|JRadioButtonMenuItem
name|useActiveBase
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up BibTeX entries in the active tab only"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JRadioButtonMenuItem
name|useAllBases
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Look up BibTeX entries in all open libraries"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|JMenuItem
name|clearConnectionSettings
init|=
operator|new
name|JMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear connection settings"
argument_list|)
argument_list|)
decl_stmt|;
name|ButtonGroup
name|bg
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|useActiveBase
argument_list|)
expr_stmt|;
name|bg
operator|.
name|add
argument_list|(
name|useAllBases
argument_list|)
expr_stmt|;
if|if
condition|(
name|preferences
operator|.
name|useAllDatabases
argument_list|()
condition|)
block|{
name|useAllBases
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|useActiveBase
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|autoSync
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|preferences
operator|.
name|setSyncWhenCiting
argument_list|(
name|autoSync
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|useAllBases
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|preferences
operator|.
name|setUseAllDatabases
argument_list|(
name|useAllBases
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|useActiveBase
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|preferences
operator|.
name|setUseAllDatabases
argument_list|(
operator|!
name|useActiveBase
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clearConnectionSettings
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|frame
operator|.
name|output
argument_list|(
name|preferences
operator|.
name|clearConnectionSettings
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|autoSync
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|useActiveBase
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|useAllBases
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|clearConnectionSettings
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|(
name|settingsB
argument_list|,
literal|0
argument_list|,
name|settingsB
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getToggleAction ()
specifier|public
name|SidePaneComponent
operator|.
name|ToggleAction
name|getToggleAction
parameter_list|()
block|{
return|return
name|sidePane
operator|.
name|getToggleAction
argument_list|()
return|;
block|}
block|}
end_class

end_unit

