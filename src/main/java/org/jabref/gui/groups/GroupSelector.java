begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridBagLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBoxMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButtonMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|PopupMenuEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|PopupMenuListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreePath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|AbstractUndoableEdit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|CompoundEdit
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|embed
operator|.
name|swing
operator|.
name|JFXPanel
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Scene
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|StackPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|SidePaneManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|maintable
operator|.
name|MainTableDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|groups
operator|.
name|DefaultGroupsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AllEntriesGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|event
operator|.
name|GroupUpdatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|search
operator|.
name|SearchMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_comment
comment|/**  * The whole UI component holding the groups tree and the buttons  */
end_comment

begin_class
DECL|class|GroupSelector
specifier|public
class|class
name|GroupSelector
extends|extends
name|SidePaneComponent
implements|implements
name|TreeSelectionListener
block|{
DECL|field|frame
specifier|protected
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|groupsTree
specifier|private
specifier|final
name|GroupsTree
name|groupsTree
decl_stmt|;
DECL|field|groupsContextMenu
specifier|private
specifier|final
name|JPopupMenu
name|groupsContextMenu
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|settings
specifier|private
specifier|final
name|JPopupMenu
name|settings
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
DECL|field|hideNonHits
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|hideNonHits
decl_stmt|;
DECL|field|grayOut
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|grayOut
decl_stmt|;
DECL|field|andCb
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|andCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Intersection"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|floatCb
specifier|private
specifier|final
name|JRadioButtonMenuItem
name|floatCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Float"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|field|invCb
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|invCb
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Inverted"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|autoAssignGroup
specifier|private
specifier|final
name|JCheckBoxMenuItem
name|autoAssignGroup
init|=
operator|new
name|JCheckBoxMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically assign new entry to selected groups"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|sortSubmenu
specifier|private
specifier|final
name|JMenu
name|sortSubmenu
init|=
operator|new
name|JMenu
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sort alphabetically"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|sortDirectSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|sortDirectSubgroupsPopupAction
init|=
operator|new
name|SortDirectSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|sortAllSubgroupsPopupAction
specifier|private
specifier|final
name|NodeAction
name|sortAllSubgroupsPopupAction
init|=
operator|new
name|SortAllSubgroupsAction
argument_list|()
decl_stmt|;
DECL|field|toggleAction
specifier|private
specifier|final
name|ToggleAction
name|toggleAction
decl_stmt|;
DECL|field|groupsTreeModel
specifier|private
name|DefaultTreeModel
name|groupsTreeModel
decl_stmt|;
DECL|field|groupsRoot
specifier|private
name|GroupTreeNodeViewModel
name|groupsRoot
decl_stmt|;
comment|/**      * The first element for each group defines which field to use for the quicksearch. The next two define the name and      * regexp for the group.      */
DECL|method|GroupSelector (JabRefFrame frame, SidePaneManager manager)
specifier|public
name|GroupSelector
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|SidePaneManager
name|manager
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|TOGGLE_GROUPS
operator|.
name|getIcon
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Groups"
argument_list|)
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|stateManager
operator|.
name|activeGroupProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
name|updateShownEntriesAccordingToSelectedGroups
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|toggleAction
operator|=
operator|new
name|ToggleAction
argument_list|(
name|Localization
operator|.
name|menuTitle
argument_list|(
literal|"Toggle groups interface"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Toggle groups interface"
argument_list|)
argument_list|,
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|TOGGLE_GROUPS_INTERFACE
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|TOGGLE_GROUPS
argument_list|)
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|hideNonHits
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Hide non-hits"
argument_list|)
argument_list|,
operator|!
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GRAY_OUT_NON_HITS
argument_list|)
argument_list|)
expr_stmt|;
name|grayOut
operator|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Gray out non-hits"
argument_list|)
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GRAY_OUT_NON_HITS
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonGroup
name|nonHits
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|nonHits
operator|.
name|add
argument_list|(
name|hideNonHits
argument_list|)
expr_stmt|;
name|nonHits
operator|.
name|add
argument_list|(
name|grayOut
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_FLOAT_SELECTIONS
argument_list|,
name|floatCb
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INTERSECT_SELECTIONS
argument_list|,
name|andCb
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INVERT_SELECTIONS
argument_list|,
name|invCb
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|grayOut
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GRAY_OUT_NON_HITS
argument_list|,
name|grayOut
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JRadioButtonMenuItem
name|highlCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_FLOAT_SELECTIONS
argument_list|)
condition|)
block|{
name|floatCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|highlCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|JRadioButtonMenuItem
name|orCb
init|=
operator|new
name|JRadioButtonMenuItem
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Union"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INTERSECT_SELECTIONS
argument_list|)
condition|)
block|{
name|andCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|orCb
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|autoAssignGroup
operator|.
name|addChangeListener
argument_list|(
name|event
lambda|->
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|,
name|autoAssignGroup
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_INVERT_SELECTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|autoAssignGroup
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|JButton
name|openSettings
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|PREFERENCES
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
decl_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|andCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|orCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|invCb
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|grayOut
argument_list|)
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|hideNonHits
argument_list|)
expr_stmt|;
name|settings
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|settings
operator|.
name|add
argument_list|(
name|autoAssignGroup
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
name|settings
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|JButton
name|src
init|=
operator|(
name|JButton
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|autoAssignGroup
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTO_ASSIGN_GROUP
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|show
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|openSettings
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JButton
name|helpButton
init|=
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help on groups"
argument_list|)
argument_list|,
name|HelpFile
operator|.
name|GROUP
argument_list|)
operator|.
name|getHelpButton
argument_list|()
decl_stmt|;
name|Insets
name|butIns
init|=
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|helpButton
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|setMargin
argument_list|(
name|butIns
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|hideNonHits
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|grayOut
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|valueChanged
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|andCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Display only entries belonging to all selected groups."
argument_list|)
argument_list|)
expr_stmt|;
name|orCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Display all entries belonging to one or more of the selected groups."
argument_list|)
argument_list|)
expr_stmt|;
name|openSettings
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Settings"
argument_list|)
argument_list|)
expr_stmt|;
name|invCb
operator|.
name|setToolTipText
argument_list|(
literal|"<html>"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show entries<b>not</b> in group selection"
argument_list|)
operator|+
literal|"</html>"
argument_list|)
expr_stmt|;
name|floatCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move entries in group selection to the top"
argument_list|)
argument_list|)
expr_stmt|;
name|highlCb
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Gray out entries not in group selection"
argument_list|)
argument_list|)
expr_stmt|;
name|ButtonGroup
name|bgr
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|bgr
operator|.
name|add
argument_list|(
name|andCb
argument_list|)
expr_stmt|;
name|bgr
operator|.
name|add
argument_list|(
name|orCb
argument_list|)
expr_stmt|;
name|ButtonGroup
name|visMode
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|visMode
operator|.
name|add
argument_list|(
name|floatCb
argument_list|)
expr_stmt|;
name|visMode
operator|.
name|add
argument_list|(
name|highlCb
argument_list|)
expr_stmt|;
name|JPanel
name|rootPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|GridBagLayout
name|gbl
init|=
operator|new
name|GridBagLayout
argument_list|()
decl_stmt|;
name|rootPanel
operator|.
name|setLayout
argument_list|(
name|gbl
argument_list|)
expr_stmt|;
name|GridBagConstraints
name|con
init|=
operator|new
name|GridBagConstraints
argument_list|()
decl_stmt|;
name|con
operator|.
name|fill
operator|=
name|GridBagConstraints
operator|.
name|BOTH
expr_stmt|;
name|con
operator|.
name|weightx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridy
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|2
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|openSettings
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|openSettings
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|3
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|helpButton
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|helpButton
argument_list|)
expr_stmt|;
name|groupsTree
operator|=
operator|new
name|GroupsTree
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|addTreeSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|JScrollPane
name|groupsTreePane
init|=
operator|new
name|JScrollPane
argument_list|(
name|groupsTree
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_AS_NEEDED
argument_list|)
decl_stmt|;
name|groupsTreePane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|groupsTreePane
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
name|GridBagConstraints
operator|.
name|REMAINDER
expr_stmt|;
name|con
operator|.
name|weighty
operator|=
literal|1
expr_stmt|;
name|con
operator|.
name|gridx
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|gridwidth
operator|=
literal|4
expr_stmt|;
name|con
operator|.
name|gridy
operator|=
literal|1
expr_stmt|;
name|gbl
operator|.
name|setConstraints
argument_list|(
name|groupsTreePane
argument_list|,
name|con
argument_list|)
expr_stmt|;
name|rootPanel
operator|.
name|add
argument_list|(
name|groupsTreePane
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|rootPanel
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Groups"
argument_list|)
argument_list|)
expr_stmt|;
name|definePopup
argument_list|()
expr_stmt|;
name|setGroups
argument_list|(
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
name|DefaultGroupsFactory
operator|.
name|getAllEntriesGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JFXPanel
name|groupsPane
init|=
operator|new
name|JFXPanel
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|groupsPane
argument_list|)
expr_stmt|;
comment|// Execute on JavaFX Application Thread
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|StackPane
name|root
init|=
operator|new
name|StackPane
argument_list|()
decl_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
operator|new
name|GroupTreeView
argument_list|()
operator|.
name|getView
argument_list|()
argument_list|)
expr_stmt|;
name|Scene
name|scene
init|=
operator|new
name|Scene
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|groupsPane
operator|.
name|setScene
argument_list|(
name|scene
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|definePopup ()
specifier|private
name|void
name|definePopup
parameter_list|()
block|{
comment|// These key bindings are just to have the shortcuts displayed
comment|// in the popup menu. The actual keystroke processing is in
comment|// BasePanel (entryTable.addKeyListener(...)).
name|groupsContextMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|sortSubmenu
operator|.
name|add
argument_list|(
name|sortDirectSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|sortSubmenu
operator|.
name|add
argument_list|(
name|sortAllSubgroupsPopupAction
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|add
argument_list|(
name|sortSubmenu
argument_list|)
expr_stmt|;
name|groupsContextMenu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|groupsTree
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
condition|)
block|{
name|showPopup
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getPathForLocation
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|GroupTreeNodeViewModel
name|node
init|=
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
comment|// the root node is "AllEntries" and cannot be edited
if|if
condition|(
name|node
operator|.
name|getNode
argument_list|()
operator|.
name|isRoot
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|(
name|e
operator|.
name|getClickCount
argument_list|()
operator|==
literal|2
operator|)
operator|&&
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON1
operator|)
condition|)
block|{
comment|// edit
comment|//editGroupAction.actionPerformed(null); // dummy event
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// be sure to remove a possible border highlight when the popup menu
comment|// disappears
name|groupsContextMenu
operator|.
name|addPopupMenuListener
argument_list|(
operator|new
name|PopupMenuListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|popupMenuWillBecomeVisible
parameter_list|(
name|PopupMenuEvent
name|e
parameter_list|)
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|popupMenuWillBecomeInvisible
parameter_list|(
name|PopupMenuEvent
name|e
parameter_list|)
block|{
name|groupsTree
operator|.
name|setHighlightBorderCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|popupMenuCanceled
parameter_list|(
name|PopupMenuEvent
name|e
parameter_list|)
block|{
name|groupsTree
operator|.
name|setHighlightBorderCell
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showPopup (MouseEvent e)
specifier|private
name|void
name|showPopup
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
specifier|final
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getPathForLocation
argument_list|(
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
decl_stmt|;
name|sortSubmenu
operator|.
name|setEnabled
argument_list|(
name|path
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
comment|// some path dependent enabling/disabling
name|GroupTreeNodeViewModel
name|node
init|=
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
decl_stmt|;
name|sortDirectSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|sortAllSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|setHighlightBorderCell
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|canBeEdited
argument_list|()
condition|)
block|{
comment|//editGroupPopupAction.setEnabled(false);
comment|//addGroupPopupAction.setEnabled(false);
comment|//removeGroupAndSubgroupsPopupAction.setEnabled(false);
comment|//removeGroupKeepSubgroupsPopupAction.setEnabled(false);
block|}
else|else
block|{
comment|//editGroupPopupAction.setEnabled(true);
comment|//addGroupPopupAction.setEnabled(true);
comment|//addGroupPopupAction.setNode(node);
comment|//removeGroupAndSubgroupsPopupAction.setEnabled(true);
comment|//removeGroupKeepSubgroupsPopupAction.setEnabled(true);
block|}
name|sortSubmenu
operator|.
name|setEnabled
argument_list|(
operator|!
name|node
operator|.
name|isLeaf
argument_list|()
argument_list|)
expr_stmt|;
comment|//removeSubgroupsPopupAction.setEnabled(!node.isLeaf());
comment|// add/remove entries to/from group
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selection
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getSelectedEntries
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|selection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|canAddEntries
argument_list|(
name|selection
argument_list|)
condition|)
block|{
comment|//addToGroup.setEnabled(true);
block|}
if|if
condition|(
name|node
operator|.
name|canRemoveEntries
argument_list|(
name|selection
argument_list|)
condition|)
block|{
comment|//removeFromGroup.setEnabled(true);
block|}
block|}
block|}
else|else
block|{
name|sortDirectSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sortAllSubgroupsPopupAction
operator|.
name|setNode
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|groupsContextMenu
operator|.
name|show
argument_list|(
name|groupsTree
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|x
argument_list|,
name|e
operator|.
name|getPoint
argument_list|()
operator|.
name|y
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|valueChanged (TreeSelectionEvent e)
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
comment|// ignore this event (happens for example if the file was closed)
block|}
comment|/*         if (getLeafsOfSelection().stream().allMatch(GroupTreeNodeViewModel::isAllEntriesGroup)) {             panel.getMainTable().getTableModel().updateGroupingState(MainTableDataModel.DisplayOption.DISABLED);             if (showOverlappingGroups.isSelected()) {                 groupsTree.setOverlappingGroups(Collections.emptyList());             }             frame.output(Localization.lang("Displaying no groups") + ".");             return;         }         */
name|updateShownEntriesAccordingToSelectedGroups
argument_list|()
expr_stmt|;
block|}
DECL|method|updateShownEntriesAccordingToSelectedGroups ()
specifier|private
name|void
name|updateShownEntriesAccordingToSelectedGroups
parameter_list|()
block|{
name|updateShownEntriesAccordingToSelectedGroups
argument_list|(
name|Globals
operator|.
name|stateManager
operator|.
name|activeGroupProperty
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|/*final MatcherSet searchRules = MatcherSets                 .build(andCb.isSelected() ? MatcherSets.MatcherType.AND : MatcherSets.MatcherType.OR);          for (GroupTreeNodeViewModel node : getLeafsOfSelection()) {             SearchMatcher searchRule = node.getNode().getSearchMatcher();             searchRules.addRule(searchRule);         }         SearchMatcher searchRule = invCb.isSelected() ? new NotMatcher(searchRules) : searchRules;         GroupingWorker worker = new GroupingWorker(searchRule);         worker.getWorker().run();         worker.getCallBack().update();         */
block|}
DECL|method|updateShownEntriesAccordingToSelectedGroups (Optional<GroupTreeNode> selectedGroup)
specifier|private
name|void
name|updateShownEntriesAccordingToSelectedGroups
parameter_list|(
name|Optional
argument_list|<
name|GroupTreeNode
argument_list|>
name|selectedGroup
parameter_list|)
block|{
if|if
condition|(
operator|!
name|selectedGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// No selected group, nothing to do
return|return;
block|}
name|SearchMatcher
name|searchRule
init|=
name|selectedGroup
operator|.
name|get
argument_list|()
operator|.
name|getSearchMatcher
argument_list|()
decl_stmt|;
name|GroupingWorker
name|worker
init|=
operator|new
name|GroupingWorker
argument_list|(
name|searchRule
argument_list|)
decl_stmt|;
name|worker
operator|.
name|run
argument_list|()
expr_stmt|;
name|worker
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|getFirstSelectedNode ()
specifier|private
name|GroupTreeNodeViewModel
name|getFirstSelectedNode
parameter_list|()
block|{
name|TreePath
name|path
init|=
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|GroupTreeNodeViewModel
operator|)
name|path
operator|.
name|getLastPathComponent
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and maintain the current      * selection and expansion state.      */
DECL|method|revalidateGroups ()
specifier|public
name|void
name|revalidateGroups
parameter_list|()
block|{
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|revalidateGroups
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|revalidateGroups
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and maintain the current      * selection and expansion state.      *      * @param node If this is non-null, the view is scrolled to make it visible.      */
DECL|method|revalidateGroups (GroupTreeNodeViewModel node)
specifier|private
name|void
name|revalidateGroups
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|revalidateGroups
argument_list|(
name|groupsTree
operator|.
name|getSelectionPaths
argument_list|()
argument_list|,
name|getExpandedPaths
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * Revalidate the groups tree (e.g. after the data stored in the model has been changed) and set the specified      * selection and expansion state.      *      * @param node If this is non-null, the view is scrolled to make it visible.      */
DECL|method|revalidateGroups (TreePath[] selectionPaths, Enumeration<TreePath> expandedNodes, GroupTreeNodeViewModel node)
specifier|private
name|void
name|revalidateGroups
parameter_list|(
name|TreePath
index|[]
name|selectionPaths
parameter_list|,
name|Enumeration
argument_list|<
name|TreePath
argument_list|>
name|expandedNodes
parameter_list|,
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|groupsTree
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|selectionPaths
operator|!=
literal|null
condition|)
block|{
name|groupsTree
operator|.
name|setSelectionPaths
argument_list|(
name|selectionPaths
argument_list|)
expr_stmt|;
block|}
comment|// tree is completely collapsed here
if|if
condition|(
name|expandedNodes
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|expandedNodes
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|groupsTree
operator|.
name|expandPath
argument_list|(
name|expandedNodes
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|groupsTree
operator|.
name|revalidate
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|groupsTree
operator|.
name|scrollPathToVisible
argument_list|(
name|node
operator|.
name|getTreePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|componentOpening ()
specifier|public
name|void
name|componentOpening
parameter_list|()
block|{
name|valueChanged
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SIDEPANE_VISIBLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRescalingWeight ()
specifier|public
name|int
name|getRescalingWeight
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|componentClosing ()
specifier|public
name|void
name|componentClosing
parameter_list|()
block|{
if|if
condition|(
name|panel
operator|!=
literal|null
condition|)
block|{
comment|// panel may be null if no file is open any more
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
block|}
name|getToggleAction
argument_list|()
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_SIDEPANE_VISIBLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
DECL|method|setGroups (GroupTreeNode groupsRoot)
specifier|private
name|void
name|setGroups
parameter_list|(
name|GroupTreeNode
name|groupsRoot
parameter_list|)
block|{
comment|// We ignore the set group since this is handled via JavaFX
name|this
operator|.
name|groupsRoot
operator|=
operator|new
name|GroupTreeNodeViewModel
argument_list|(
operator|new
name|GroupTreeNode
argument_list|(
name|DefaultGroupsFactory
operator|.
name|getAllEntriesGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//this.groupsRoot = new GroupTreeNodeViewModel(groupsRoot);
name|groupsTreeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|this
operator|.
name|groupsRoot
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupsRoot
operator|.
name|subscribeToDescendantChanged
argument_list|(
name|groupsTreeModel
operator|::
name|nodeStructureChanged
argument_list|)
expr_stmt|;
name|groupsTree
operator|.
name|setModel
argument_list|(
name|groupsTreeModel
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GROUP_EXPAND_TREE
argument_list|)
condition|)
block|{
name|this
operator|.
name|groupsRoot
operator|.
name|expandSubtree
argument_list|(
name|groupsTree
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds the specified node as a child of the current root. The group contained in<b>newGroups</b> must not be of      * type AllEntriesGroup, since every tree has exactly one AllEntriesGroup (its root). The<b>newGroups</b> are      * inserted directly, i.e. they are not deepCopy()'d.      */
DECL|method|addGroups (GroupTreeNode newGroups, CompoundEdit ce)
specifier|public
name|void
name|addGroups
parameter_list|(
name|GroupTreeNode
name|newGroups
parameter_list|,
name|CompoundEdit
name|ce
parameter_list|)
block|{
comment|// TODO: This shouldn't be a method of GroupSelector
comment|// paranoia: ensure that there are never two instances of AllEntriesGroup
if|if
condition|(
name|newGroups
operator|.
name|getGroup
argument_list|()
operator|instanceof
name|AllEntriesGroup
condition|)
block|{
return|return;
comment|// this should be impossible anyway
block|}
name|newGroups
operator|.
name|moveTo
argument_list|(
name|groupsRoot
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|UndoableAddOrRemoveGroup
name|undo
init|=
operator|new
name|UndoableAddOrRemoveGroup
argument_list|(
name|groupsRoot
argument_list|,
operator|new
name|GroupTreeNodeViewModel
argument_list|(
name|newGroups
argument_list|)
argument_list|,
name|UndoableAddOrRemoveGroup
operator|.
name|ADD_NODE
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
DECL|method|getSelectionPath ()
specifier|public
name|TreePath
name|getSelectionPath
parameter_list|()
block|{
return|return
name|groupsTree
operator|.
name|getSelectionPath
argument_list|()
return|;
block|}
DECL|method|concludeAssignment (AbstractUndoableEdit undo, GroupTreeNode node, int assignedEntries)
specifier|public
name|void
name|concludeAssignment
parameter_list|(
name|AbstractUndoableEdit
name|undo
parameter_list|,
name|GroupTreeNode
name|node
parameter_list|,
name|int
name|assignedEntries
parameter_list|)
block|{
if|if
condition|(
name|undo
operator|==
literal|null
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The group \"%0\" already contains the selection."
argument_list|,
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
specifier|final
name|String
name|groupName
init|=
name|node
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignedEntries
operator|==
literal|1
condition|)
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Assigned 1 entry to group \"%0\"."
argument_list|,
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Assigned %0 entries to group \"%1\"."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|assignedEntries
argument_list|)
argument_list|,
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGroupTreeRoot ()
specifier|private
name|GroupTreeNodeViewModel
name|getGroupTreeRoot
parameter_list|()
block|{
return|return
name|groupsRoot
return|;
block|}
DECL|method|getExpandedPaths ()
specifier|private
name|Enumeration
argument_list|<
name|TreePath
argument_list|>
name|getExpandedPaths
parameter_list|()
block|{
return|return
name|groupsTree
operator|.
name|getExpandedDescendants
argument_list|(
name|groupsRoot
operator|.
name|getTreePath
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * panel may be null to indicate that no file is currently open.      */
annotation|@
name|Override
DECL|method|setActiveBasePanel (BasePanel panel)
specifier|public
name|void
name|setActiveBasePanel
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
operator|.
name|setActiveBasePanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
comment|// hide groups
name|frame
operator|.
name|getSidePaneManager
argument_list|()
operator|.
name|hide
argument_list|(
name|GroupSelector
operator|.
name|class
argument_list|)
expr_stmt|;
return|return;
block|}
name|MetaData
name|metaData
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaData
operator|.
name|getGroups
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|setGroups
argument_list|(
name|metaData
operator|.
name|getGroups
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GroupTreeNode
name|newGroupsRoot
init|=
name|GroupTreeNode
operator|.
name|fromGroup
argument_list|(
name|DefaultGroupsFactory
operator|.
name|getAllEntriesGroup
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setGroups
argument_list|(
name|newGroupsRoot
argument_list|)
expr_stmt|;
name|setGroups
argument_list|(
name|newGroupsRoot
argument_list|)
expr_stmt|;
block|}
name|metaData
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|getTreeLock
argument_list|()
init|)
block|{
name|validateTree
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getGroupsTree ()
specifier|public
name|GroupsTree
name|getGroupsTree
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupsTree
return|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (GroupUpdatedEvent updateEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|GroupUpdatedEvent
name|updateEvent
parameter_list|)
block|{
name|setGroups
argument_list|(
name|updateEvent
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|grabFocus ()
specifier|public
name|void
name|grabFocus
parameter_list|()
block|{
name|groupsTree
operator|.
name|grabFocus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getToggleAction ()
specifier|public
name|ToggleAction
name|getToggleAction
parameter_list|()
block|{
return|return
name|toggleAction
return|;
block|}
DECL|class|GroupingWorker
class|class
name|GroupingWorker
block|{
DECL|field|matcher
specifier|private
specifier|final
name|SearchMatcher
name|matcher
decl_stmt|;
DECL|method|GroupingWorker (SearchMatcher matcher)
specifier|public
name|GroupingWorker
parameter_list|(
name|SearchMatcher
name|matcher
parameter_list|)
block|{
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|boolean
name|hit
init|=
name|matcher
operator|.
name|isMatch
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setGroupHit
argument_list|(
name|hit
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|update ()
specifier|public
name|void
name|update
parameter_list|()
block|{
comment|// Show the result in the chosen way:
if|if
condition|(
name|hideNonHits
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|FILTER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|grayOut
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupingState
argument_list|(
name|MainTableDataModel
operator|.
name|DisplayOption
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateSortOrder
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|getTableModel
argument_list|()
operator|.
name|updateGroupFilter
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|scrollTo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Updated group selection"
argument_list|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NodeAction
specifier|private
specifier|abstract
class|class
name|NodeAction
extends|extends
name|AbstractAction
block|{
DECL|field|node
specifier|private
name|GroupTreeNodeViewModel
name|node
decl_stmt|;
DECL|method|NodeAction (String s)
specifier|public
name|NodeAction
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setNode (GroupTreeNodeViewModel node)
specifier|public
name|void
name|setNode
parameter_list|(
name|GroupTreeNodeViewModel
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/**          * Returns the node to use in this action. If a node has been set explicitly (via setNode), it is returned.          * Otherwise, the first node in the current selection is returned. If all this fails, null is returned.          */
DECL|method|getNodeToUse ()
specifier|public
name|GroupTreeNodeViewModel
name|getNodeToUse
parameter_list|()
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
return|return
name|getFirstSelectedNode
argument_list|()
return|;
block|}
block|}
DECL|class|SortDirectSubgroupsAction
specifier|private
class|class
name|SortDirectSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|SortDirectSubgroupsAction ()
specifier|public
name|SortDirectSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Immediate subgroups"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent ae)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|UndoableModifySubtree
name|undo
init|=
operator|new
name|UndoableModifySubtree
argument_list|(
name|getGroupTreeRoot
argument_list|()
argument_list|,
name|node
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"sort subgroups"
argument_list|)
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|sort
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sorted immediate subgroups."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SortAllSubgroupsAction
specifier|private
class|class
name|SortAllSubgroupsAction
extends|extends
name|NodeAction
block|{
DECL|method|SortAllSubgroupsAction ()
specifier|public
name|SortAllSubgroupsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"All subgroups (recursively)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent ae)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|ae
parameter_list|)
block|{
specifier|final
name|GroupTreeNodeViewModel
name|node
init|=
name|getNodeToUse
argument_list|()
decl_stmt|;
specifier|final
name|UndoableModifySubtree
name|undo
init|=
operator|new
name|UndoableModifySubtree
argument_list|(
name|getGroupTreeRoot
argument_list|()
argument_list|,
name|node
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"sort subgroups"
argument_list|)
argument_list|)
decl_stmt|;
name|groupsTree
operator|.
name|sort
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undo
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|frame
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Sorted all subgroups recursively."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

