begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_class
DECL|class|TransferableEntrySelection
specifier|public
class|class
name|TransferableEntrySelection
implements|implements
name|Transferable
block|{
DECL|field|FLAVOR_INTERNAL
specifier|public
specifier|static
specifier|final
name|DataFlavor
name|FLAVOR_INTERNAL
decl_stmt|;
DECL|field|FLAVOR_EXTERNAL
specifier|private
specifier|static
specifier|final
name|DataFlavor
name|FLAVOR_EXTERNAL
decl_stmt|;
DECL|field|FLAVORS
specifier|private
specifier|static
specifier|final
name|DataFlavor
index|[]
name|FLAVORS
decl_stmt|;
DECL|field|selectedEntries
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|selectedEntries
decl_stmt|;
DECL|field|selectedEntriesCiteKeys
specifier|private
specifier|final
name|String
name|selectedEntriesCiteKeys
decl_stmt|;
DECL|field|includeCiteKeyword
specifier|private
name|boolean
name|includeCiteKeyword
decl_stmt|;
static|static
block|{
name|DataFlavor
name|df1
init|=
literal|null
decl_stmt|;
name|DataFlavor
name|df2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|df1
operator|=
operator|new
name|DataFlavor
argument_list|(
name|DataFlavor
operator|.
name|javaJVMLocalObjectMimeType
operator|+
literal|";class=org.jabref.gui.groups.TransferableEntrySelection"
argument_list|)
expr_stmt|;
name|df2
operator|=
name|DataFlavor
operator|.
name|getTextPlainUnicodeFlavor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// never happens
block|}
name|FLAVOR_INTERNAL
operator|=
name|df1
expr_stmt|;
name|FLAVOR_EXTERNAL
operator|=
name|df2
expr_stmt|;
name|FLAVORS
operator|=
operator|new
name|DataFlavor
index|[]
block|{
name|TransferableEntrySelection
operator|.
name|FLAVOR_INTERNAL
block|,
name|TransferableEntrySelection
operator|.
name|FLAVOR_EXTERNAL
block|}
expr_stmt|;
block|}
DECL|method|TransferableEntrySelection (List<BibEntry> list)
specifier|public
name|TransferableEntrySelection
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|selectedEntries
operator|=
name|list
expr_stmt|;
name|selectedEntriesCiteKeys
operator|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|this
operator|.
name|selectedEntries
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BibEntry
operator|::
name|getCiteKeyOptional
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTransferDataFlavors ()
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
name|TransferableEntrySelection
operator|.
name|FLAVORS
return|;
block|}
annotation|@
name|Override
DECL|method|isDataFlavorSupported (DataFlavor someFlavor)
specifier|public
name|boolean
name|isDataFlavorSupported
parameter_list|(
name|DataFlavor
name|someFlavor
parameter_list|)
block|{
return|return
name|someFlavor
operator|.
name|equals
argument_list|(
name|TransferableEntrySelection
operator|.
name|FLAVOR_INTERNAL
argument_list|)
operator|||
name|someFlavor
operator|.
name|equals
argument_list|(
name|TransferableEntrySelection
operator|.
name|FLAVOR_EXTERNAL
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTransferData (DataFlavor someFlavor)
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|someFlavor
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|isDataFlavorSupported
argument_list|(
name|someFlavor
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedFlavorException
argument_list|(
name|someFlavor
argument_list|)
throw|;
block|}
if|if
condition|(
name|someFlavor
operator|.
name|equals
argument_list|(
name|TransferableEntrySelection
operator|.
name|FLAVOR_INTERNAL
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|s
init|=
name|includeCiteKeyword
condition|?
literal|"\\cite{"
operator|+
name|selectedEntriesCiteKeys
operator|+
literal|"}"
else|:
name|selectedEntriesCiteKeys
decl_stmt|;
name|String
name|charset
init|=
name|TransferableEntrySelection
operator|.
name|FLAVOR_EXTERNAL
operator|.
name|getParameter
argument_list|(
literal|"charset"
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
literal|""
expr_stmt|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|charset
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSelection ()
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getSelection
parameter_list|()
block|{
return|return
name|selectedEntries
return|;
block|}
DECL|method|setIncludeCiteKeyword (boolean includeCiteKeyword)
specifier|public
name|void
name|setIncludeCiteKeyword
parameter_list|(
name|boolean
name|includeCiteKeyword
parameter_list|)
block|{
name|this
operator|.
name|includeCiteKeyword
operator|=
name|includeCiteKeyword
expr_stmt|;
block|}
block|}
end_class

end_unit

