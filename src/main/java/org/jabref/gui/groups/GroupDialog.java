begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ObservableValue
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Orientation
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
operator|.
name|ScrollBarPolicy
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Separator
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Toggle
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToggleGroup
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|StackPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|FontPosture
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|TextFlow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefGUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|search
operator|.
name|rules
operator|.
name|describer
operator|.
name|SearchDescribers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BaseDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TooltipTextUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|auxparser
operator|.
name|DefaultAuxParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|StandardFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Keyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|StandardField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AutomaticPersonsGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|RegexKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|SearchGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|TexGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|WordKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jfoenix
operator|.
name|controls
operator|.
name|JFXColorPicker
import|;
end_import

begin_comment
comment|/**  * Dialog for creating or modifying groups. Operates directly on the Vector  * containing group information.  */
end_comment

begin_class
DECL|class|GroupDialog
class|class
name|GroupDialog
extends|extends
name|BaseDialog
argument_list|<
name|AbstractGroup
argument_list|>
block|{
DECL|field|INDEX_EXPLICIT_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_EXPLICIT_GROUP
init|=
literal|0
decl_stmt|;
DECL|field|INDEX_KEYWORD_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_KEYWORD_GROUP
init|=
literal|1
decl_stmt|;
DECL|field|INDEX_SEARCH_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_SEARCH_GROUP
init|=
literal|2
decl_stmt|;
DECL|field|INDEX_AUTO_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_AUTO_GROUP
init|=
literal|3
decl_stmt|;
DECL|field|INDEX_TEX_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_TEX_GROUP
init|=
literal|4
decl_stmt|;
comment|// for all types
DECL|field|nameField
specifier|private
specifier|final
name|TextField
name|nameField
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|descriptionField
specifier|private
specifier|final
name|TextField
name|descriptionField
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|colorField
specifier|private
specifier|final
name|JFXColorPicker
name|colorField
init|=
operator|new
name|JFXColorPicker
argument_list|()
decl_stmt|;
DECL|field|iconField
specifier|private
specifier|final
name|TextField
name|iconField
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|explicitRadioButton
specifier|private
specifier|final
name|RadioButton
name|explicitRadioButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Statically group entries by manual assignment"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keywordsRadioButton
specifier|private
specifier|final
name|RadioButton
name|keywordsRadioButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Dynamically group entries by searching a field for a keyword"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|searchRadioButton
specifier|private
specifier|final
name|RadioButton
name|searchRadioButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Dynamically group entries by a free-form search expression"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|autoRadioButton
specifier|private
specifier|final
name|RadioButton
name|autoRadioButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically create groups"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|texRadioButton
specifier|private
specifier|final
name|RadioButton
name|texRadioButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Group containing entries cited in a given TeX file"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|independentButton
specifier|private
specifier|final
name|RadioButton
name|independentButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Independent group: When selected, view only this group's entries"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|intersectionButton
specifier|private
specifier|final
name|RadioButton
name|intersectionButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Refine supergroup: When selected, view entries contained in both this group and its supergroup"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|unionButton
specifier|private
specifier|final
name|RadioButton
name|unionButton
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Include subgroups: When selected, view entries contained in this group or its subgroups"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|basePanel
specifier|private
specifier|final
name|BasePanel
name|basePanel
decl_stmt|;
comment|// for KeywordGroup
DECL|field|keywordGroupSearchTerm
specifier|private
specifier|final
name|TextField
name|keywordGroupSearchTerm
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|keywordGroupSearchField
specifier|private
specifier|final
name|TextField
name|keywordGroupSearchField
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|keywordGroupCaseSensitive
specifier|private
specifier|final
name|CheckBox
name|keywordGroupCaseSensitive
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keywordGroupRegExp
specifier|private
specifier|final
name|CheckBox
name|keywordGroupRegExp
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"regular expression"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for SearchGroup
DECL|field|searchGroupSearchExpression
specifier|private
specifier|final
name|TextField
name|searchGroupSearchExpression
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|searchGroupCaseSensitive
specifier|private
specifier|final
name|CheckBox
name|searchGroupCaseSensitive
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|searchGroupRegExp
specifier|private
specifier|final
name|CheckBox
name|searchGroupRegExp
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"regular expression"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for AutoGroup
DECL|field|autoGroupKeywordsOption
specifier|private
specifier|final
name|RadioButton
name|autoGroupKeywordsOption
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate groups from keywords in a BibTeX field"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|autoGroupKeywordsField
specifier|private
specifier|final
name|TextField
name|autoGroupKeywordsField
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|autoGroupKeywordsDeliminator
specifier|private
specifier|final
name|TextField
name|autoGroupKeywordsDeliminator
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|autoGroupKeywordsHierarchicalDeliminator
specifier|private
specifier|final
name|TextField
name|autoGroupKeywordsHierarchicalDeliminator
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|autoGroupPersonsOption
specifier|private
specifier|final
name|RadioButton
name|autoGroupPersonsOption
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate groups for author last names"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|autoGroupPersonsField
specifier|private
specifier|final
name|TextField
name|autoGroupPersonsField
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
comment|// for TexGroup
DECL|field|texGroupFilePath
specifier|private
specifier|final
name|TextField
name|texGroupFilePath
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|texGroupBrowseButton
specifier|private
specifier|final
name|Button
name|texGroupBrowseButton
init|=
operator|new
name|Button
argument_list|(
literal|"Browse"
argument_list|)
decl_stmt|;
DECL|field|texGroupHBox
specifier|private
specifier|final
name|HBox
name|texGroupHBox
init|=
operator|new
name|HBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// for all types
DECL|field|descriptionTextFlow
specifier|private
specifier|final
name|TextFlow
name|descriptionTextFlow
init|=
operator|new
name|TextFlow
argument_list|()
decl_stmt|;
DECL|field|optionsPanel
specifier|private
specifier|final
name|StackPane
name|optionsPanel
init|=
operator|new
name|StackPane
argument_list|()
decl_stmt|;
comment|/**      * Shows a group add/edit dialog.      *      * @param editedGroup The group being edited, or null if a new group is to be      *                    created.      */
DECL|method|GroupDialog (DialogService dialogService, BasePanel basePanel, JabRefPreferences prefs, AbstractGroup editedGroup)
specifier|public
name|GroupDialog
parameter_list|(
name|DialogService
name|dialogService
parameter_list|,
name|BasePanel
name|basePanel
parameter_list|,
name|JabRefPreferences
name|prefs
parameter_list|,
name|AbstractGroup
name|editedGroup
parameter_list|)
block|{
if|if
condition|(
name|editedGroup
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Add subgroup"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit group"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|descriptionTextFlow
operator|.
name|setMinWidth
argument_list|(
literal|585
argument_list|)
expr_stmt|;
name|descriptionTextFlow
operator|.
name|setPrefWidth
argument_list|(
literal|585
argument_list|)
expr_stmt|;
name|descriptionTextFlow
operator|.
name|setMinHeight
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|descriptionTextFlow
operator|.
name|setPrefHeight
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|this
operator|.
name|basePanel
operator|=
name|basePanel
expr_stmt|;
comment|// set default values (overwritten if editedGroup != null)
name|keywordGroupSearchField
operator|.
name|setText
argument_list|(
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|GROUPS_DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
comment|// configure elements
name|ToggleGroup
name|groupType
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|explicitRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|groupType
argument_list|)
expr_stmt|;
name|keywordsRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|groupType
argument_list|)
expr_stmt|;
name|searchRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|groupType
argument_list|)
expr_stmt|;
name|autoRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|groupType
argument_list|)
expr_stmt|;
name|texRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|groupType
argument_list|)
expr_stmt|;
comment|// Build individual layout cards for each group
name|VBox
name|explicitPanel
init|=
name|createOptionsExplicitGroup
argument_list|()
decl_stmt|;
name|explicitPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|VBox
name|keywordPanel
init|=
name|createOptionsKeywordGroup
argument_list|()
decl_stmt|;
name|VBox
name|searchPanel
init|=
name|createOptionsSearchGroup
argument_list|()
decl_stmt|;
name|VBox
name|autoPanel
init|=
name|createOptionsAutoGroup
argument_list|()
decl_stmt|;
name|VBox
name|texPanel
init|=
name|createOptionsTexGroup
argument_list|()
decl_stmt|;
name|optionsPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|explicitPanel
argument_list|,
name|keywordPanel
argument_list|,
name|searchPanel
argument_list|,
name|autoPanel
argument_list|,
name|texPanel
argument_list|)
expr_stmt|;
name|optionsPanel
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... for buttons panel
name|getDialogPane
argument_list|()
operator|.
name|getButtonTypes
argument_list|()
operator|.
name|setAll
argument_list|(
name|ButtonType
operator|.
name|OK
argument_list|,
name|ButtonType
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
comment|// General information
name|VBox
name|contextPanel
init|=
operator|new
name|VBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|contextPanel
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|contextPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|independentButton
argument_list|,
name|intersectionButton
argument_list|,
name|unionButton
argument_list|)
expr_stmt|;
name|ToggleGroup
name|groupHierarchy
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|independentButton
operator|.
name|setToggleGroup
argument_list|(
name|groupHierarchy
argument_list|)
expr_stmt|;
name|intersectionButton
operator|.
name|setToggleGroup
argument_list|(
name|groupHierarchy
argument_list|)
expr_stmt|;
name|unionButton
operator|.
name|setToggleGroup
argument_list|(
name|groupHierarchy
argument_list|)
expr_stmt|;
name|colorField
operator|.
name|setMinHeight
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|VBox
name|generalPanel
init|=
operator|new
name|VBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|generalPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
argument_list|,
name|nameField
argument_list|)
argument_list|,
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Description"
argument_list|)
argument_list|)
argument_list|,
name|descriptionField
argument_list|)
argument_list|,
operator|new
name|HBox
argument_list|(
literal|30
argument_list|,
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Icon"
argument_list|)
argument_list|)
argument_list|,
name|iconField
argument_list|)
argument_list|,
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Color"
argument_list|)
argument_list|)
argument_list|,
name|colorField
argument_list|)
argument_list|)
argument_list|,
operator|new
name|VBox
argument_list|(
literal|5
argument_list|,
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Hierarchical context"
argument_list|)
argument_list|)
argument_list|,
name|contextPanel
argument_list|)
argument_list|)
expr_stmt|;
name|VBox
name|selectPanel
init|=
operator|new
name|VBox
argument_list|(
literal|10
argument_list|,
name|explicitRadioButton
argument_list|,
name|keywordsRadioButton
argument_list|,
name|searchRadioButton
argument_list|,
name|autoRadioButton
argument_list|,
name|texRadioButton
argument_list|)
decl_stmt|;
name|selectPanel
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Description panel
name|ScrollPane
name|descriptionPane
init|=
operator|new
name|ScrollPane
argument_list|(
name|descriptionTextFlow
argument_list|)
decl_stmt|;
name|descriptionPane
operator|.
name|setHbarPolicy
argument_list|(
name|ScrollBarPolicy
operator|.
name|AS_NEEDED
argument_list|)
expr_stmt|;
name|descriptionPane
operator|.
name|setVbarPolicy
argument_list|(
name|ScrollBarPolicy
operator|.
name|AS_NEEDED
argument_list|)
expr_stmt|;
comment|// create layout
name|HBox
name|mainPanel
init|=
operator|new
name|HBox
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|getDialogPane
argument_list|()
operator|.
name|setContent
argument_list|(
name|mainPanel
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|5
argument_list|,
literal|15
argument_list|,
literal|5
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|mainPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
operator|new
name|VBox
argument_list|(
literal|5
argument_list|,
name|generalPanel
argument_list|,
operator|new
name|VBox
argument_list|(
literal|5
argument_list|,
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Type"
argument_list|)
argument_list|)
argument_list|,
name|selectPanel
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Separator
argument_list|(
name|Orientation
operator|.
name|VERTICAL
argument_list|)
argument_list|,
operator|new
name|VBox
argument_list|(
literal|5
argument_list|,
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
argument_list|,
name|optionsPanel
argument_list|)
argument_list|,
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Description"
argument_list|)
argument_list|)
argument_list|,
name|descriptionPane
argument_list|)
argument_list|)
expr_stmt|;
name|updateComponents
argument_list|()
expr_stmt|;
comment|// add listeners
name|groupType
operator|.
name|selectedToggleProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|ObservableValue
argument_list|<
name|?
extends|extends
name|Toggle
argument_list|>
name|ov
parameter_list|,
name|Toggle
name|old_Toggle
parameter_list|,
name|Toggle
name|new_Toggle
parameter_list|)
lambda|->
block|{
name|int
name|select
init|=
name|INDEX_EXPLICIT_GROUP
decl_stmt|;
if|if
condition|(
name|groupType
operator|.
name|getSelectedToggle
argument_list|()
operator|==
name|explicitRadioButton
condition|)
block|{
name|select
operator|=
name|INDEX_EXPLICIT_GROUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupType
operator|.
name|getSelectedToggle
argument_list|()
operator|==
name|keywordsRadioButton
condition|)
block|{
name|select
operator|=
name|INDEX_KEYWORD_GROUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupType
operator|.
name|getSelectedToggle
argument_list|()
operator|==
name|searchRadioButton
condition|)
block|{
name|select
operator|=
name|INDEX_SEARCH_GROUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupType
operator|.
name|getSelectedToggle
argument_list|()
operator|==
name|autoRadioButton
condition|)
block|{
name|select
operator|=
name|INDEX_AUTO_GROUP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupType
operator|.
name|getSelectedToggle
argument_list|()
operator|==
name|texRadioButton
condition|)
block|{
name|select
operator|=
name|INDEX_TEX_GROUP
expr_stmt|;
block|}
for|for
control|(
name|Node
name|n
range|:
name|optionsPanel
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|n
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|optionsPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|select
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateComponents
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|setResultConverter
argument_list|(
name|button
lambda|->
block|{
if|if
condition|(
name|button
operator|==
name|ButtonType
operator|.
name|OK
condition|)
block|{
name|AbstractGroup
name|resultingGroup
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|groupName
init|=
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Character
name|keywordDelimiter
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getKeywordDelimiter
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupName
operator|.
name|contains
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|keywordDelimiter
argument_list|)
argument_list|)
condition|)
block|{
name|dialogService
operator|.
name|showWarningDialogAndWait
argument_list|(
literal|null
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"The group name contains the keyword separator \"%0\" and thus probably does not work as expected."
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|keywordDelimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Optional
argument_list|<
name|GroupTreeNode
argument_list|>
name|rootGroup
init|=
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getGroups
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootGroup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|int
name|groupsWithSameName
init|=
name|rootGroup
operator|.
name|get
argument_list|()
operator|.
name|findChildrenSatisfying
argument_list|(
name|group
lambda|->
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|warnAboutSameName
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|editedGroup
operator|==
literal|null
operator|)
operator|&&
operator|(
name|groupsWithSameName
operator|>
literal|0
operator|)
condition|)
block|{
comment|// New group but there is already one group with the same name
name|warnAboutSameName
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|editedGroup
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|editedGroup
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
operator|&&
operator|(
name|groupsWithSameName
operator|>
literal|0
operator|)
condition|)
block|{
comment|// Edit group, changed name to something that is already present
name|warnAboutSameName
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|warnAboutSameName
condition|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"There exists already a group with the same name."
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
name|keywordDelimiter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|resultingGroup
operator|=
operator|new
name|ExplicitGroup
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|keywordDelimiter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// regex is correct, otherwise OK would have been disabled
comment|// therefore I don't catch anything here
if|if
condition|(
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|resultingGroup
operator|=
operator|new
name|RegexKeywordGroup
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|FieldFactory
operator|.
name|parseField
argument_list|(
name|keywordGroupSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|keywordGroupSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultingGroup
operator|=
operator|new
name|WordKeywordGroup
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|FieldFactory
operator|.
name|parseField
argument_list|(
name|keywordGroupSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|keywordGroupSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|resultingGroup
operator|=
operator|new
name|SearchGroup
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|searchGroupSearchExpression
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|isCaseSensitive
argument_list|()
argument_list|,
name|isRegex
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
if|if
condition|(
name|autoGroupKeywordsOption
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|resultingGroup
operator|=
operator|new
name|AutomaticKeywordGroup
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|FieldFactory
operator|.
name|parseField
argument_list|(
name|autoGroupKeywordsField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|autoGroupKeywordsDeliminator
operator|.
name|getText
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|autoGroupKeywordsHierarchicalDeliminator
operator|.
name|getText
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultingGroup
operator|=
operator|new
name|AutomaticPersonsGroup
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|FieldFactory
operator|.
name|parseField
argument_list|(
name|autoGroupPersonsField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|texRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|resultingGroup
operator|=
name|TexGroup
operator|.
name|create
argument_list|(
name|groupName
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|texGroupFilePath
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
operator|new
name|DefaultAuxParser
argument_list|(
operator|new
name|BibDatabase
argument_list|()
argument_list|)
argument_list|,
name|Globals
operator|.
name|getFileUpdateMonitor
argument_list|()
argument_list|,
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resultingGroup
operator|.
name|setColor
argument_list|(
name|colorField
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|resultingGroup
operator|.
name|setDescription
argument_list|(
name|descriptionField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|resultingGroup
operator|.
name|setIconName
argument_list|(
name|iconField
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resultingGroup
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|IOException
name|exception
parameter_list|)
block|{
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|exception
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|nameField
operator|.
name|textProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
name|updateComponents
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|textProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
name|updateComponents
argument_list|()
argument_list|)
expr_stmt|;
name|searchGroupSearchExpression
operator|.
name|textProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
name|updateComponents
argument_list|()
argument_list|)
expr_stmt|;
name|EventHandler
argument_list|<
name|ActionEvent
argument_list|>
name|actionHandler
init|=
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
lambda|->
name|updateComponents
argument_list|()
decl_stmt|;
name|nameField
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|descriptionField
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|iconField
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|keywordGroupSearchField
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|keywordGroupCaseSensitive
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|keywordGroupRegExp
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|searchGroupSearchExpression
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
name|searchGroupRegExp
operator|.
name|setOnAction
argument_list|(
name|actionHandler
argument_list|)
expr_stmt|;
comment|// configure for current type
if|if
condition|(
name|editedGroup
operator|==
literal|null
condition|)
block|{
comment|// creating new group -> defaults!
name|colorField
operator|.
name|setValue
argument_list|(
name|IconTheme
operator|.
name|getDefaultGroupColor
argument_list|()
argument_list|)
expr_stmt|;
name|explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nameField
operator|.
name|setText
argument_list|(
name|editedGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|colorField
operator|.
name|setValue
argument_list|(
name|editedGroup
operator|.
name|getColor
argument_list|()
operator|.
name|orElse
argument_list|(
name|IconTheme
operator|.
name|getDefaultGroupColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|descriptionField
operator|.
name|setText
argument_list|(
name|editedGroup
operator|.
name|getDescription
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|iconField
operator|.
name|setText
argument_list|(
name|editedGroup
operator|.
name|getIconName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|WordKeywordGroup
operator|.
name|class
condition|)
block|{
name|WordKeywordGroup
name|group
init|=
operator|(
name|WordKeywordGroup
operator|)
name|editedGroup
decl_stmt|;
name|keywordGroupSearchField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupRegExp
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|keywordsRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|RegexKeywordGroup
operator|.
name|class
condition|)
block|{
name|RegexKeywordGroup
name|group
init|=
operator|(
name|RegexKeywordGroup
operator|)
name|editedGroup
decl_stmt|;
name|keywordGroupSearchField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupRegExp
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keywordsRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|SearchGroup
operator|.
name|class
condition|)
block|{
name|SearchGroup
name|group
init|=
operator|(
name|SearchGroup
operator|)
name|editedGroup
decl_stmt|;
name|searchGroupSearchExpression
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|searchGroupCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|searchGroupRegExp
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isRegularExpression
argument_list|()
argument_list|)
expr_stmt|;
name|searchRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|ExplicitGroup
operator|.
name|class
condition|)
block|{
name|explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|instanceof
name|AutomaticGroup
condition|)
block|{
name|autoRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|AutomaticKeywordGroup
operator|.
name|class
condition|)
block|{
name|AutomaticKeywordGroup
name|group
init|=
operator|(
name|AutomaticKeywordGroup
operator|)
name|editedGroup
decl_stmt|;
name|autoGroupKeywordsDeliminator
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getKeywordDelimiter
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|autoGroupKeywordsHierarchicalDeliminator
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getKeywordHierarchicalDelimiter
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|autoGroupKeywordsField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|AutomaticPersonsGroup
operator|.
name|class
condition|)
block|{
name|AutomaticPersonsGroup
name|group
init|=
operator|(
name|AutomaticPersonsGroup
operator|)
name|editedGroup
decl_stmt|;
name|autoGroupPersonsField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|TexGroup
operator|.
name|class
condition|)
block|{
name|texRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TexGroup
name|group
init|=
operator|(
name|TexGroup
operator|)
name|editedGroup
decl_stmt|;
name|texGroupFilePath
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|getDialogPane
argument_list|()
operator|.
name|getScene
argument_list|()
operator|.
name|getWindow
argument_list|()
operator|.
name|sizeToScene
argument_list|()
expr_stmt|;
block|}
DECL|method|GroupDialog (DialogService dialogService)
specifier|public
name|GroupDialog
parameter_list|(
name|DialogService
name|dialogService
parameter_list|)
block|{
name|this
argument_list|(
name|dialogService
argument_list|,
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|getCurrentBasePanel
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupDialog (DialogService dialogService, AbstractGroup editedGroup)
specifier|public
name|GroupDialog
parameter_list|(
name|DialogService
name|dialogService
parameter_list|,
name|AbstractGroup
name|editedGroup
parameter_list|)
block|{
name|this
argument_list|(
name|dialogService
argument_list|,
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
operator|.
name|getCurrentBasePanel
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|,
name|editedGroup
argument_list|)
expr_stmt|;
block|}
DECL|method|formatRegExException (String regExp, Exception e)
specifier|private
specifier|static
name|String
name|formatRegExException
parameter_list|(
name|String
name|regExp
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
index|[]
name|sa
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sa
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|sa
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"The regular expression<b>%0</b> is invalid:"
argument_list|,
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|regExp
argument_list|)
argument_list|)
operator|+
literal|"<p><tt>"
operator|+
name|sb
operator|+
literal|"</tt>"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|PatternSyntaxException
operator|)
condition|)
block|{
return|return
name|s
return|;
block|}
name|int
name|lastNewline
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|"<br>"
argument_list|)
decl_stmt|;
name|int
name|hat
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|'^'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lastNewline
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|hat
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|hat
operator|>
name|lastNewline
operator|)
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastNewline
operator|+
literal|4
argument_list|)
operator|+
name|s
operator|.
name|substring
argument_list|(
name|lastNewline
operator|+
literal|4
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
return|;
block|}
return|return
name|s
return|;
block|}
DECL|method|createOptionsTexGroup ()
specifier|private
name|VBox
name|createOptionsTexGroup
parameter_list|()
block|{
name|VBox
name|texPanel
init|=
operator|new
name|VBox
argument_list|()
decl_stmt|;
name|texPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|texPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Aux file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|texGroupBrowseButton
operator|.
name|setOnAction
argument_list|(
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
lambda|->
name|openBrowseDialog
argument_list|()
argument_list|)
expr_stmt|;
name|texGroupHBox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|texGroupFilePath
argument_list|)
expr_stmt|;
name|texGroupHBox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|texGroupBrowseButton
argument_list|)
expr_stmt|;
name|HBox
operator|.
name|setHgrow
argument_list|(
name|texGroupFilePath
argument_list|,
name|Priority
operator|.
name|ALWAYS
argument_list|)
expr_stmt|;
name|texPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|texGroupHBox
argument_list|)
expr_stmt|;
return|return
name|texPanel
return|;
block|}
DECL|method|createOptionsAutoGroup ()
specifier|private
name|VBox
name|createOptionsAutoGroup
parameter_list|()
block|{
name|VBox
name|autoPanel
init|=
operator|new
name|VBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|autoPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToggleGroup
name|tg
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|autoGroupKeywordsOption
operator|.
name|setToggleGroup
argument_list|(
name|tg
argument_list|)
expr_stmt|;
name|autoGroupPersonsOption
operator|.
name|setToggleGroup
argument_list|(
name|tg
argument_list|)
expr_stmt|;
name|VBox
name|fieldToGroupByKeywords
init|=
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field to group by"
argument_list|)
operator|+
literal|":"
argument_list|)
argument_list|,
name|autoGroupKeywordsField
argument_list|)
decl_stmt|;
name|fieldToGroupByKeywords
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|VBox
name|delimiterCharacters
init|=
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Use the following delimiter character(s):"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HBox
argument_list|(
literal|10
argument_list|,
name|autoGroupKeywordsDeliminator
argument_list|,
name|autoGroupKeywordsHierarchicalDeliminator
argument_list|)
argument_list|)
decl_stmt|;
name|delimiterCharacters
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|VBox
name|fieldToGroupByPersons
init|=
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field to group by"
argument_list|)
operator|+
literal|":"
argument_list|)
argument_list|,
name|autoGroupPersonsField
argument_list|)
decl_stmt|;
name|fieldToGroupByPersons
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|autoPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|autoGroupKeywordsOption
argument_list|,
name|fieldToGroupByKeywords
argument_list|,
name|delimiterCharacters
argument_list|,
name|autoGroupPersonsOption
argument_list|,
name|fieldToGroupByPersons
argument_list|)
expr_stmt|;
name|autoGroupKeywordsOption
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|autoGroupKeywordsField
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|GROUPS_DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|autoGroupKeywordsDeliminator
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEYWORD_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|autoGroupKeywordsHierarchicalDeliminator
operator|.
name|setText
argument_list|(
name|Keyword
operator|.
name|DEFAULT_HIERARCHICAL_DELIMITER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|autoGroupPersonsField
operator|.
name|setText
argument_list|(
name|StandardField
operator|.
name|AUTHOR
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|autoPanel
return|;
block|}
DECL|method|createOptionsSearchGroup ()
specifier|private
name|VBox
name|createOptionsSearchGroup
parameter_list|()
block|{
name|VBox
name|searchPanel
init|=
operator|new
name|VBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|searchPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|searchPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search expression"
argument_list|)
argument_list|)
argument_list|,
name|searchGroupSearchExpression
argument_list|)
argument_list|,
name|searchGroupCaseSensitive
argument_list|,
name|searchGroupRegExp
argument_list|)
expr_stmt|;
return|return
name|searchPanel
return|;
block|}
DECL|method|createOptionsExplicitGroup ()
specifier|private
name|VBox
name|createOptionsExplicitGroup
parameter_list|()
block|{
return|return
operator|new
name|VBox
argument_list|()
return|;
block|}
DECL|method|createOptionsKeywordGroup ()
specifier|private
name|VBox
name|createOptionsKeywordGroup
parameter_list|()
block|{
name|VBox
name|keywordPanel
init|=
operator|new
name|VBox
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|keywordPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|keywordPanel
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field"
argument_list|)
argument_list|)
argument_list|,
name|keywordGroupSearchField
argument_list|)
argument_list|,
operator|new
name|VBox
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Keyword"
argument_list|)
argument_list|)
argument_list|,
name|keywordGroupSearchTerm
argument_list|)
argument_list|,
name|keywordGroupCaseSensitive
argument_list|,
name|keywordGroupRegExp
argument_list|)
expr_stmt|;
return|return
name|keywordPanel
return|;
block|}
DECL|method|updateComponents ()
specifier|private
name|void
name|updateComponents
parameter_list|()
block|{
comment|// all groups need a name
name|boolean
name|okEnabled
init|=
operator|!
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a name for the group."
argument_list|)
argument_list|)
expr_stmt|;
name|getDialogPane
argument_list|()
operator|.
name|lookupButton
argument_list|(
name|ButtonType
operator|.
name|OK
argument_list|)
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|s1
decl_stmt|;
name|String
name|s2
decl_stmt|;
if|if
condition|(
name|keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|s1
operator|=
name|keywordGroupSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&&
name|s1
operator|.
name|matches
argument_list|(
literal|"\\w+"
argument_list|)
expr_stmt|;
name|s2
operator|=
name|keywordGroupSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&&
operator|!
name|s2
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|okEnabled
condition|)
block|{
if|if
condition|(
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
condition|)
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
name|GroupDescriptions
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|okEnabled
operator|=
literal|false
expr_stmt|;
name|setDescription
argument_list|(
name|formatRegExException
argument_list|(
name|s2
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|GroupDescriptions
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter the field to search (e.g.<b>keywords</b>) and the keyword to search it for (e.g.<b>electrical</b>)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNameFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|s1
operator|=
name|searchGroupSearchExpression
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&
operator|!
name|s1
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
name|fromTextFlowToHTMLString
argument_list|(
name|SearchDescribers
operator|.
name|getSearchDescriberFor
argument_list|(
operator|new
name|SearchQuery
argument_list|(
name|s1
argument_list|,
name|isCaseSensitive
argument_list|()
argument_list|,
name|isRegex
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRegex
argument_list|()
condition|)
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|s1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|okEnabled
operator|=
literal|false
expr_stmt|;
name|setDescription
argument_list|(
name|formatRegExException
argument_list|(
name|s1
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a search term. For example, to search all fields for<b>Smith</b>, enter:<p>"
operator|+
literal|"<tt>smith</tt><p>"
operator|+
literal|"To search the field<b>Author</b> for<b>Smith</b> and the field<b>Title</b> for<b>electrical</b>, enter:<p>"
operator|+
literal|"<tt>author=smith and title=electrical</tt>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNameFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|setDescription
argument_list|(
name|GroupDescriptions
operator|.
name|getDescriptionForPreview
argument_list|()
argument_list|)
expr_stmt|;
name|setNameFontItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|getDialogPane
argument_list|()
operator|.
name|lookupButton
argument_list|(
name|ButtonType
operator|.
name|OK
argument_list|)
operator|.
name|setDisable
argument_list|(
operator|!
name|okEnabled
argument_list|)
expr_stmt|;
block|}
DECL|method|openBrowseDialog ()
specifier|private
name|void
name|openBrowseDialog
parameter_list|()
block|{
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|addExtensionFilter
argument_list|(
name|StandardFileType
operator|.
name|AUX
argument_list|)
operator|.
name|withDefaultExtension
argument_list|(
name|StandardFileType
operator|.
name|AUX
argument_list|)
operator|.
name|withInitialDirectory
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|dialogService
operator|.
name|showFileOpenDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|file
lambda|->
name|texGroupFilePath
operator|.
name|setText
argument_list|(
name|relativize
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|relativize (Path path)
specifier|private
name|Path
name|relativize
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|fileDirectories
init|=
name|getFileDirectoriesAsPaths
argument_list|()
decl_stmt|;
return|return
name|FileUtil
operator|.
name|relativize
argument_list|(
name|path
argument_list|,
name|fileDirectories
argument_list|)
return|;
block|}
DECL|method|getFileDirectoriesAsPaths ()
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|getFileDirectoriesAsPaths
parameter_list|()
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|fileDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MetaData
name|metaData
init|=
name|basePanel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|metaData
operator|.
name|getLaTexFileDirectory
argument_list|(
name|prefs
operator|.
name|getFilePreferences
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|laTexFileDirectory
lambda|->
name|fileDirs
operator|.
name|add
argument_list|(
name|laTexFileDirectory
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|fileDirs
return|;
block|}
DECL|method|fromTextFlowToHTMLString (TextFlow textFlow)
specifier|private
name|String
name|fromTextFlowToHTMLString
parameter_list|(
name|TextFlow
name|textFlow
parameter_list|)
block|{
name|StringBuilder
name|htmlStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|textFlow
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Text
condition|)
block|{
name|htmlStringBuilder
operator|.
name|append
argument_list|(
name|TooltipTextUtil
operator|.
name|textToHTMLString
argument_list|(
operator|(
name|Text
operator|)
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|htmlStringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|isRegex ()
specifier|private
name|boolean
name|isRegex
parameter_list|()
block|{
return|return
name|searchGroupRegExp
operator|.
name|isSelected
argument_list|()
return|;
block|}
DECL|method|isCaseSensitive ()
specifier|private
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|searchGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
return|;
block|}
DECL|method|setDescription (String description)
specifier|private
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|descriptionTextFlow
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|createFormattedDescription
argument_list|(
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createFormattedDescription (String descriptionHTML)
specifier|private
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|createFormattedDescription
parameter_list|(
name|String
name|descriptionHTML
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|descriptionHTML
operator|=
name|descriptionHTML
operator|.
name|replaceAll
argument_list|(
literal|"<p>|<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|String
index|[]
name|boldSplit
init|=
name|descriptionHTML
operator|.
name|split
argument_list|(
literal|"(?=<b>)|(?<=</b>)|(?=<i>)|(?<=</i>)|(?=<tt>)|(?<=</tt>)|(?=<kbd>)|(?<=</kbd>)"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bs
range|:
name|boldSplit
control|)
block|{
if|if
condition|(
name|bs
operator|.
name|matches
argument_list|(
literal|"<b>[^<>]*</b>"
argument_list|)
condition|)
block|{
name|bs
operator|=
name|bs
operator|.
name|replaceAll
argument_list|(
literal|"<b>|</b>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Text
name|textElement
init|=
operator|new
name|Text
argument_list|(
name|bs
argument_list|)
decl_stmt|;
name|textElement
operator|.
name|setStyle
argument_list|(
literal|"-fx-font-weight: bold"
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|textElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bs
operator|.
name|matches
argument_list|(
literal|"<i>[^<>]*</i>"
argument_list|)
condition|)
block|{
name|bs
operator|=
name|bs
operator|.
name|replaceAll
argument_list|(
literal|"<i>|</i>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Text
name|textElement
init|=
operator|new
name|Text
argument_list|(
name|bs
argument_list|)
decl_stmt|;
name|textElement
operator|.
name|setStyle
argument_list|(
literal|"-fx-font-style: italic"
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|textElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bs
operator|.
name|matches
argument_list|(
literal|"<tt>[^<>]*</tt>|<kbd>[^<>]*</kbd>"
argument_list|)
condition|)
block|{
name|bs
operator|=
name|bs
operator|.
name|replaceAll
argument_list|(
literal|"<tt>|</tt>|<kbd>|</kbd>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Text
name|textElement
init|=
operator|new
name|Text
argument_list|(
name|bs
argument_list|)
decl_stmt|;
name|textElement
operator|.
name|setStyle
argument_list|(
literal|"-fx-font-family: 'Courier New', Courier, monospace"
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|textElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|bs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
comment|/**      * Sets the font of the name entry field.      */
DECL|method|setNameFontItalic (boolean italic)
specifier|private
name|void
name|setNameFontItalic
parameter_list|(
name|boolean
name|italic
parameter_list|)
block|{
name|Font
name|f
init|=
name|nameField
operator|.
name|getFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|italic
condition|)
block|{
name|Font
operator|.
name|font
argument_list|(
name|f
operator|.
name|getFamily
argument_list|()
argument_list|,
name|FontPosture
operator|.
name|ITALIC
argument_list|,
name|f
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Font
operator|.
name|font
argument_list|(
name|f
operator|.
name|getFamily
argument_list|()
argument_list|,
name|FontPosture
operator|.
name|REGULAR
argument_list|,
name|f
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the int representing the selected hierarchical group context.      */
DECL|method|getContext ()
specifier|private
name|GroupHierarchyType
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|independentButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|GroupHierarchyType
operator|.
name|INDEPENDENT
return|;
block|}
if|if
condition|(
name|intersectionButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|GroupHierarchyType
operator|.
name|REFINING
return|;
block|}
if|if
condition|(
name|unionButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|GroupHierarchyType
operator|.
name|INCLUDING
return|;
block|}
return|return
name|GroupHierarchyType
operator|.
name|INDEPENDENT
return|;
comment|// default
block|}
DECL|method|setContext (GroupHierarchyType context)
specifier|private
name|void
name|setContext
parameter_list|(
name|GroupHierarchyType
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|context
condition|)
block|{
case|case
name|INDEPENDENT
case|:
name|independentButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|REFINING
case|:
name|intersectionButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|INCLUDING
case|:
name|unionButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

