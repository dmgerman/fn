begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.groups
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|groups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|CardLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ItemListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|BorderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ButtonGroup
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JDialog
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JRadioButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|CaretListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|JabRefGUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|Dialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|AbstractGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|ExplicitGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|GroupHierarchyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|RegexKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|SearchGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|groups
operator|.
name|WordKeywordGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|ButtonBarBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|builder
operator|.
name|DefaultFormBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|jgoodies
operator|.
name|forms
operator|.
name|layout
operator|.
name|FormLayout
import|;
end_import

begin_comment
comment|/**  * Dialog for creating or modifying groups. Operates directly on the Vector  * containing group information.  */
end_comment

begin_class
DECL|class|GroupDialog
class|class
name|GroupDialog
extends|extends
name|JDialog
implements|implements
name|Dialog
argument_list|<
name|AbstractGroup
argument_list|>
block|{
DECL|field|INDEX_EXPLICIT_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_EXPLICIT_GROUP
init|=
literal|0
decl_stmt|;
DECL|field|INDEX_KEYWORD_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_KEYWORD_GROUP
init|=
literal|1
decl_stmt|;
DECL|field|INDEX_SEARCH_GROUP
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_SEARCH_GROUP
init|=
literal|2
decl_stmt|;
DECL|field|TEXTFIELD_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|TEXTFIELD_LENGTH
init|=
literal|30
decl_stmt|;
comment|// for all types
DECL|field|nameField
specifier|private
specifier|final
name|JTextField
name|nameField
init|=
operator|new
name|JTextField
argument_list|(
name|GroupDialog
operator|.
name|TEXTFIELD_LENGTH
argument_list|)
decl_stmt|;
DECL|field|explicitRadioButton
specifier|private
specifier|final
name|JRadioButton
name|explicitRadioButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Statically group entries by manual assignment"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keywordsRadioButton
specifier|private
specifier|final
name|JRadioButton
name|keywordsRadioButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Dynamically group entries by searching a field for a keyword"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|searchRadioButton
specifier|private
specifier|final
name|JRadioButton
name|searchRadioButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Dynamically group entries by a free-form search expression"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|independentButton
specifier|private
specifier|final
name|JRadioButton
name|independentButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Independent group: When selected, view only this group's entries"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|intersectionButton
specifier|private
specifier|final
name|JRadioButton
name|intersectionButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Refine supergroup: When selected, view entries contained in both this group and its supergroup"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|unionButton
specifier|private
specifier|final
name|JRadioButton
name|unionButton
init|=
operator|new
name|JRadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Include subgroups: When selected, view entries contained in this group or its subgroups"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for KeywordGroup
DECL|field|keywordGroupSearchField
specifier|private
specifier|final
name|JTextField
name|keywordGroupSearchField
init|=
operator|new
name|JTextField
argument_list|(
name|GroupDialog
operator|.
name|TEXTFIELD_LENGTH
argument_list|)
decl_stmt|;
DECL|field|keywordGroupSearchTerm
specifier|private
specifier|final
name|TextField
name|keywordGroupSearchTerm
init|=
operator|new
name|TextField
argument_list|(
name|FieldName
operator|.
name|KEYWORDS
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
DECL|field|keywordGroupCaseSensitive
specifier|private
specifier|final
name|JCheckBox
name|keywordGroupCaseSensitive
init|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keywordGroupRegExp
specifier|private
specifier|final
name|JCheckBox
name|keywordGroupRegExp
init|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"regular expression"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for SearchGroup
DECL|field|searchGroupSearchExpression
specifier|private
specifier|final
name|JTextField
name|searchGroupSearchExpression
init|=
operator|new
name|JTextField
argument_list|(
name|GroupDialog
operator|.
name|TEXTFIELD_LENGTH
argument_list|)
decl_stmt|;
DECL|field|searchGroupCaseSensitive
specifier|private
specifier|final
name|JCheckBox
name|searchGroupCaseSensitive
init|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Case sensitive"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|searchGroupRegExp
specifier|private
specifier|final
name|JCheckBox
name|searchGroupRegExp
init|=
operator|new
name|JCheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"regular expression"
argument_list|)
argument_list|)
decl_stmt|;
comment|// for all types
DECL|field|okButton
specifier|private
specifier|final
name|JButton
name|okButton
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|optionsPanel
specifier|private
specifier|final
name|JPanel
name|optionsPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|descriptionLabel
specifier|private
specifier|final
name|JLabel
name|descriptionLabel
init|=
operator|new
name|JLabel
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Dimension
name|getPreferredSize
parameter_list|()
block|{
name|Dimension
name|d
init|=
name|super
operator|.
name|getPreferredSize
argument_list|()
decl_stmt|;
comment|// width must be smaller than width of enclosing JScrollPane
comment|// to prevent a horizontal scroll bar
name|d
operator|.
name|width
operator|=
literal|1
expr_stmt|;
return|return
name|d
return|;
block|}
block|}
decl_stmt|;
DECL|field|optionsLayout
specifier|private
specifier|final
name|CardLayout
name|optionsLayout
init|=
operator|new
name|CardLayout
argument_list|()
decl_stmt|;
DECL|field|isOkPressed
specifier|private
name|boolean
name|isOkPressed
decl_stmt|;
DECL|field|resultingGroup
specifier|private
name|AbstractGroup
name|resultingGroup
decl_stmt|;
comment|/**      * Shows a group add/edit dialog.      *      * @param jabrefFrame The parent frame.      * @param editedGroup The group being edited, or null if a new group is to be      *                    created.      */
DECL|method|GroupDialog (JabRefFrame jabrefFrame, AbstractGroup editedGroup)
specifier|public
name|GroupDialog
parameter_list|(
name|JabRefFrame
name|jabrefFrame
parameter_list|,
name|AbstractGroup
name|editedGroup
parameter_list|)
block|{
name|super
argument_list|(
name|jabrefFrame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit group"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set default values (overwritten if editedGroup != null)
name|keywordGroupSearchField
operator|.
name|setText
argument_list|(
name|jabrefFrame
operator|.
name|prefs
argument_list|()
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|GROUPS_DEFAULT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
comment|// configure elements
name|ButtonGroup
name|groupType
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|groupType
operator|.
name|add
argument_list|(
name|explicitRadioButton
argument_list|)
expr_stmt|;
name|groupType
operator|.
name|add
argument_list|(
name|keywordsRadioButton
argument_list|)
expr_stmt|;
name|groupType
operator|.
name|add
argument_list|(
name|searchRadioButton
argument_list|)
expr_stmt|;
name|ButtonGroup
name|groupHierarchy
init|=
operator|new
name|ButtonGroup
argument_list|()
decl_stmt|;
name|groupHierarchy
operator|.
name|add
argument_list|(
name|independentButton
argument_list|)
expr_stmt|;
name|groupHierarchy
operator|.
name|add
argument_list|(
name|intersectionButton
argument_list|)
expr_stmt|;
name|groupHierarchy
operator|.
name|add
argument_list|(
name|unionButton
argument_list|)
expr_stmt|;
name|descriptionLabel
operator|.
name|setVerticalAlignment
argument_list|(
name|SwingConstants
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|getRootPane
argument_list|()
operator|.
name|setDefaultButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
comment|// build individual layout cards for each group
name|optionsPanel
operator|.
name|setLayout
argument_list|(
name|optionsLayout
argument_list|)
expr_stmt|;
comment|// ... for explicit group
name|optionsPanel
operator|.
name|add
argument_list|(
operator|new
name|JPanel
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GroupDialog
operator|.
name|INDEX_EXPLICIT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... for keyword group
name|FormLayout
name|layoutKG
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 4dlu, fill:1dlu:grow, 2dlu, left:pref"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builderKG
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutKG
argument_list|)
decl_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field"
argument_list|)
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|keywordGroupSearchField
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|keywordGroupSearchTerm
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|keywordGroupCaseSensitive
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builderKG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderKG
operator|.
name|append
argument_list|(
name|keywordGroupRegExp
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|optionsPanel
operator|.
name|add
argument_list|(
name|builderKG
operator|.
name|getPanel
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GroupDialog
operator|.
name|INDEX_KEYWORD_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... for search group
name|FormLayout
name|layoutSG
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 4dlu, fill:1dlu:grow"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builderSG
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutSG
argument_list|)
decl_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Search expression"
argument_list|)
argument_list|)
expr_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|searchGroupSearchExpression
argument_list|)
expr_stmt|;
name|builderSG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|searchGroupCaseSensitive
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|builderSG
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderSG
operator|.
name|append
argument_list|(
name|searchGroupRegExp
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|optionsPanel
operator|.
name|add
argument_list|(
name|builderSG
operator|.
name|getPanel
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GroupDialog
operator|.
name|INDEX_SEARCH_GROUP
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... for buttons panel
name|FormLayout
name|layoutBP
init|=
operator|new
name|FormLayout
argument_list|(
literal|"pref, 4dlu, pref"
argument_list|,
literal|"p"
argument_list|)
decl_stmt|;
name|layoutBP
operator|.
name|setColumnGroups
argument_list|(
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|3
block|}
block|}
argument_list|)
expr_stmt|;
name|ButtonBarBuilder
name|builderBP
init|=
operator|new
name|ButtonBarBuilder
argument_list|()
decl_stmt|;
name|builderBP
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|builderBP
operator|.
name|addButton
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
name|JButton
name|mCancel
init|=
operator|new
name|JButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
name|builderBP
operator|.
name|addButton
argument_list|(
name|mCancel
argument_list|)
expr_stmt|;
name|builderBP
operator|.
name|addGlue
argument_list|()
expr_stmt|;
name|builderBP
operator|.
name|getPanel
argument_list|()
operator|.
name|setBorder
argument_list|(
name|BorderFactory
operator|.
name|createEmptyBorder
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// create layout
name|FormLayout
name|layoutAll
init|=
operator|new
name|FormLayout
argument_list|(
literal|"right:pref, 4dlu, fill:600px, 4dlu, fill:pref"
argument_list|,
literal|"p, 3dlu, p, 3dlu, p, 0dlu, p, 0dlu, p, 3dlu, p, 3dlu, p, "
operator|+
literal|"0dlu, p, 0dlu, p, 3dlu, p, 3dlu, "
operator|+
literal|"p, 3dlu, p, 3dlu, top:80dlu, 9dlu, p, 9dlu, p"
argument_list|)
decl_stmt|;
name|DefaultFormBuilder
name|builderAll
init|=
operator|new
name|DefaultFormBuilder
argument_list|(
name|layoutAll
argument_list|)
decl_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"General"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|nameField
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|explicitRadioButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|keywordsRadioButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|searchRadioButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Hierarchical context"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|independentButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|intersectionButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|unionButton
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|optionsPanel
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Description"
argument_list|)
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|JScrollPane
name|sp
init|=
operator|new
name|JScrollPane
argument_list|(
name|descriptionLabel
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_AS_NEEDED
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Dimension
name|getPreferredSize
parameter_list|()
block|{
return|return
name|getMaximumSize
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|builderAll
operator|.
name|append
argument_list|(
name|sp
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|appendSeparator
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|builderAll
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|Container
name|cp
init|=
name|getContentPane
argument_list|()
decl_stmt|;
name|cp
operator|.
name|add
argument_list|(
name|builderAll
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|cp
operator|.
name|add
argument_list|(
name|builderBP
operator|.
name|getPanel
argument_list|()
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|pack
argument_list|()
expr_stmt|;
name|setResizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateComponents
argument_list|()
expr_stmt|;
name|setLayoutForSelectedGroup
argument_list|()
expr_stmt|;
name|setLocationRelativeTo
argument_list|(
name|jabrefFrame
argument_list|)
expr_stmt|;
comment|// add listeners
name|ItemListener
name|radioButtonItemListener
init|=
name|e
lambda|->
block|{
name|setLayoutForSelectedGroup
argument_list|()
expr_stmt|;
name|updateComponents
argument_list|()
expr_stmt|;
block|}
decl_stmt|;
name|explicitRadioButton
operator|.
name|addItemListener
argument_list|(
name|radioButtonItemListener
argument_list|)
expr_stmt|;
name|keywordsRadioButton
operator|.
name|addItemListener
argument_list|(
name|radioButtonItemListener
argument_list|)
expr_stmt|;
name|searchRadioButton
operator|.
name|addItemListener
argument_list|(
name|radioButtonItemListener
argument_list|)
expr_stmt|;
name|Action
name|cancelAction
init|=
operator|new
name|AbstractAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|mCancel
operator|.
name|addActionListener
argument_list|(
name|cancelAction
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|getPanel
argument_list|()
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_DIALOG
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|builderAll
operator|.
name|getPanel
argument_list|()
operator|.
name|getActionMap
argument_list|()
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|cancelAction
argument_list|)
expr_stmt|;
name|okButton
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
block|{
name|isOkPressed
operator|=
literal|true
expr_stmt|;
try|try
block|{
if|if
condition|(
name|explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|resultingGroup
operator|=
operator|new
name|ExplicitGroup
argument_list|(
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
comment|// regex is correct, otherwise OK would have been disabled
comment|// therefore I don't catch anything here
if|if
condition|(
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|resultingGroup
operator|=
operator|new
name|RegexKeywordGroup
argument_list|(
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|keywordGroupSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordGroupSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultingGroup
operator|=
operator|new
name|WordKeywordGroup
argument_list|(
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|keywordGroupSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordGroupSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
try|try
block|{
comment|// regex is correct, otherwise OK would have been
comment|// disabled
comment|// therefore I don't catch anything here
name|resultingGroup
operator|=
operator|new
name|SearchGroup
argument_list|(
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|getContext
argument_list|()
argument_list|,
name|searchGroupSearchExpression
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|isCaseSensitive
argument_list|()
argument_list|,
name|isRegex
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
comment|// should never happen
block|}
block|}
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exception
parameter_list|)
block|{
name|jabrefFrame
operator|.
name|showMessage
argument_list|(
name|exception
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CaretListener
name|caretListener
init|=
name|e
lambda|->
name|updateComponents
argument_list|()
decl_stmt|;
name|ItemListener
name|itemListener
init|=
name|e
lambda|->
name|updateComponents
argument_list|()
decl_stmt|;
name|nameField
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|keywordGroupSearchField
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|keywordGroupCaseSensitive
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
name|keywordGroupRegExp
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
name|searchGroupSearchExpression
operator|.
name|addCaretListener
argument_list|(
name|caretListener
argument_list|)
expr_stmt|;
name|searchGroupRegExp
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
name|searchGroupCaseSensitive
operator|.
name|addItemListener
argument_list|(
name|itemListener
argument_list|)
expr_stmt|;
comment|// configure for current type
if|if
condition|(
operator|(
name|editedGroup
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|WordKeywordGroup
operator|.
name|class
operator|)
condition|)
block|{
name|WordKeywordGroup
name|group
init|=
operator|(
name|WordKeywordGroup
operator|)
name|editedGroup
decl_stmt|;
name|nameField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchField
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupRegExp
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|keywordsRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|editedGroup
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|RegexKeywordGroup
operator|.
name|class
operator|)
condition|)
block|{
name|RegexKeywordGroup
name|group
init|=
operator|(
name|RegexKeywordGroup
operator|)
name|editedGroup
decl_stmt|;
name|nameField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchField
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupSearchTerm
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|keywordGroupRegExp
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|keywordsRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|editedGroup
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|SearchGroup
operator|.
name|class
operator|)
condition|)
block|{
name|SearchGroup
name|group
init|=
operator|(
name|SearchGroup
operator|)
name|editedGroup
decl_stmt|;
name|nameField
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|searchGroupSearchExpression
operator|.
name|setText
argument_list|(
name|group
operator|.
name|getSearchExpression
argument_list|()
argument_list|)
expr_stmt|;
name|searchGroupCaseSensitive
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
name|searchGroupRegExp
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|isRegularExpression
argument_list|()
argument_list|)
expr_stmt|;
name|searchRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|editedGroup
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|editedGroup
operator|.
name|getClass
argument_list|()
operator|==
name|ExplicitGroup
operator|.
name|class
operator|)
condition|)
block|{
name|nameField
operator|.
name|setText
argument_list|(
name|editedGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|editedGroup
operator|.
name|getHierarchicalContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// creating new group -> defaults!
name|explicitRadioButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|GroupHierarchyType
operator|.
name|INDEPENDENT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|GroupDialog ()
specifier|public
name|GroupDialog
parameter_list|()
block|{
name|this
argument_list|(
name|JabRefGUI
operator|.
name|getMainFrame
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|formatRegExException (String regExp, Exception e)
specifier|private
specifier|static
name|String
name|formatRegExException
parameter_list|(
name|String
name|regExp
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
index|[]
name|sa
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sa
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|sa
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"The regular expression<b>%0</b> is invalid:"
argument_list|,
name|StringUtil
operator|.
name|quoteForHTML
argument_list|(
name|regExp
argument_list|)
argument_list|)
operator|+
literal|"<p><tt>"
operator|+
name|sb
operator|+
literal|"</tt>"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|PatternSyntaxException
operator|)
condition|)
block|{
return|return
name|s
return|;
block|}
name|int
name|lastNewline
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|"<br>"
argument_list|)
decl_stmt|;
name|int
name|hat
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
literal|'^'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lastNewline
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|hat
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|hat
operator|>
name|lastNewline
operator|)
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastNewline
operator|+
literal|4
argument_list|)
operator|+
name|s
operator|.
name|substring
argument_list|(
name|lastNewline
operator|+
literal|4
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
return|;
block|}
return|return
name|s
return|;
block|}
DECL|method|okPressed ()
specifier|public
name|boolean
name|okPressed
parameter_list|()
block|{
return|return
name|isOkPressed
return|;
block|}
DECL|method|getResultingGroup ()
specifier|public
name|AbstractGroup
name|getResultingGroup
parameter_list|()
block|{
return|return
name|resultingGroup
return|;
block|}
DECL|method|setLayoutForSelectedGroup ()
specifier|private
name|void
name|setLayoutForSelectedGroup
parameter_list|()
block|{
if|if
condition|(
name|explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|optionsLayout
operator|.
name|show
argument_list|(
name|optionsPanel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GroupDialog
operator|.
name|INDEX_EXPLICIT_GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|optionsLayout
operator|.
name|show
argument_list|(
name|optionsPanel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GroupDialog
operator|.
name|INDEX_KEYWORD_GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|optionsLayout
operator|.
name|show
argument_list|(
name|optionsPanel
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|GroupDialog
operator|.
name|INDEX_SEARCH_GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateComponents ()
specifier|private
name|void
name|updateComponents
parameter_list|()
block|{
comment|// all groups need a name
name|boolean
name|okEnabled
init|=
operator|!
name|nameField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a name for the group."
argument_list|)
argument_list|)
expr_stmt|;
name|okButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|s1
decl_stmt|;
name|String
name|s2
decl_stmt|;
if|if
condition|(
name|keywordsRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|s1
operator|=
name|keywordGroupSearchField
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&&
name|s1
operator|.
name|matches
argument_list|(
literal|"\\w+"
argument_list|)
expr_stmt|;
name|s2
operator|=
name|keywordGroupSearchTerm
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&&
operator|!
name|s2
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|okEnabled
condition|)
block|{
if|if
condition|(
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
condition|)
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
name|GroupDescriptions
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|okEnabled
operator|=
literal|false
expr_stmt|;
name|setDescription
argument_list|(
name|formatRegExException
argument_list|(
name|s2
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|GroupDescriptions
operator|.
name|getDescriptionForPreview
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|keywordGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
argument_list|,
name|keywordGroupRegExp
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter the field to search (e.g.<b>keywords</b>) and the keyword to search it for (e.g.<b>electrical</b>)."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNameFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|searchRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|s1
operator|=
name|searchGroupSearchExpression
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|okEnabled
operator|=
name|okEnabled
operator|&
operator|!
name|s1
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|okEnabled
condition|)
block|{
name|setDescription
argument_list|(
operator|new
name|SearchQuery
argument_list|(
name|s1
argument_list|,
name|isCaseSensitive
argument_list|()
argument_list|,
name|isRegex
argument_list|()
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRegex
argument_list|()
condition|)
block|{
try|try
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|s1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|okEnabled
operator|=
literal|false
expr_stmt|;
name|setDescription
argument_list|(
name|formatRegExException
argument_list|(
name|s1
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|setDescription
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a search term. For example, to search all fields for<b>Smith</b>, enter:<p>"
operator|+
literal|"<tt>smith</tt><p>"
operator|+
literal|"To search the field<b>Author</b> for<b>Smith</b> and the field<b>Title</b> for<b>electrical</b>, enter:<p>"
operator|+
literal|"<tt>author=smith and title=electrical</tt>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setNameFontItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|explicitRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|setDescription
argument_list|(
name|GroupDescriptions
operator|.
name|getDescriptionForPreview
argument_list|()
argument_list|)
expr_stmt|;
name|setNameFontItalic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|okButton
operator|.
name|setEnabled
argument_list|(
name|okEnabled
argument_list|)
expr_stmt|;
block|}
DECL|method|isRegex ()
specifier|private
name|boolean
name|isRegex
parameter_list|()
block|{
return|return
name|searchGroupRegExp
operator|.
name|isSelected
argument_list|()
return|;
block|}
DECL|method|isCaseSensitive ()
specifier|private
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|searchGroupCaseSensitive
operator|.
name|isSelected
argument_list|()
return|;
block|}
DECL|method|setDescription (String description)
specifier|private
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|descriptionLabel
operator|.
name|setText
argument_list|(
literal|"<html>"
operator|+
name|description
operator|+
literal|"</html>"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the font of the name entry field.      */
DECL|method|setNameFontItalic (boolean italic)
specifier|private
name|void
name|setNameFontItalic
parameter_list|(
name|boolean
name|italic
parameter_list|)
block|{
name|Font
name|f
init|=
name|nameField
operator|.
name|getFont
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isItalic
argument_list|()
operator|!=
name|italic
condition|)
block|{
name|f
operator|=
name|f
operator|.
name|deriveFont
argument_list|(
name|italic
condition|?
name|Font
operator|.
name|ITALIC
else|:
name|Font
operator|.
name|PLAIN
argument_list|)
expr_stmt|;
name|nameField
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the int representing the selected hierarchical group context.      */
DECL|method|getContext ()
specifier|private
name|GroupHierarchyType
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|independentButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|GroupHierarchyType
operator|.
name|INDEPENDENT
return|;
block|}
if|if
condition|(
name|intersectionButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|GroupHierarchyType
operator|.
name|REFINING
return|;
block|}
if|if
condition|(
name|unionButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
return|return
name|GroupHierarchyType
operator|.
name|INCLUDING
return|;
block|}
return|return
name|GroupHierarchyType
operator|.
name|INDEPENDENT
return|;
comment|// default
block|}
DECL|method|setContext (GroupHierarchyType context)
specifier|private
name|void
name|setContext
parameter_list|(
name|GroupHierarchyType
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
name|GroupHierarchyType
operator|.
name|REFINING
condition|)
block|{
name|intersectionButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|==
name|GroupHierarchyType
operator|.
name|INCLUDING
condition|)
block|{
name|unionButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|independentButton
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|showAndWait ()
specifier|public
name|Optional
argument_list|<
name|AbstractGroup
argument_list|>
name|showAndWait
parameter_list|()
block|{
name|this
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|okPressed
argument_list|()
condition|)
block|{
name|AbstractGroup
name|newGroup
init|=
name|getResultingGroup
argument_list|()
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|newGroup
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

