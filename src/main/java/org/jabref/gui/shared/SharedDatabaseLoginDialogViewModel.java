begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.shared
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Alert
operator|.
name|AlertType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonBar
operator|.
name|ButtonData
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AbstractViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|exporter
operator|.
name|SaveDatabaseAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileDialogConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|FileFilterConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|DBMSConnectionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|exception
operator|.
name|InvalidDBMSConnectionPropertiesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|prefs
operator|.
name|SharedDatabasePreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|shared
operator|.
name|security
operator|.
name|Password
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|StandardFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DBMSType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|shared
operator|.
name|DatabaseNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|CompositeValidator
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|FunctionBasedValidator
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|ValidationMessage
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|ValidationStatus
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SharedDatabaseLoginDialogViewModel
specifier|public
class|class
name|SharedDatabaseLoginDialogViewModel
extends|extends
name|AbstractViewModel
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SharedDatabaseLoginDialogViewModel
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|selectedDBMSType
specifier|private
specifier|final
name|ObjectProperty
argument_list|<
name|DBMSType
argument_list|>
name|selectedDBMSType
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|(
name|DBMSType
operator|.
name|values
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|StringProperty
name|database
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|StringProperty
name|host
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|StringProperty
name|port
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|StringProperty
name|user
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|password
specifier|private
specifier|final
name|StringProperty
name|password
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|folder
specifier|private
specifier|final
name|StringProperty
name|folder
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|autosave
specifier|private
specifier|final
name|BooleanProperty
name|autosave
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|field|rememberPassword
specifier|private
specifier|final
name|BooleanProperty
name|rememberPassword
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|field|loading
specifier|private
specifier|final
name|BooleanProperty
name|loading
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|field|keystore
specifier|private
specifier|final
name|StringProperty
name|keystore
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|useSSL
specifier|private
specifier|final
name|BooleanProperty
name|useSSL
init|=
operator|new
name|SimpleBooleanProperty
argument_list|()
decl_stmt|;
DECL|field|keyStorePasswordProperty
specifier|private
specifier|final
name|StringProperty
name|keyStorePasswordProperty
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|serverTimezone
specifier|private
specifier|final
name|StringProperty
name|serverTimezone
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|SharedDatabasePreferences
name|prefs
init|=
operator|new
name|SharedDatabasePreferences
argument_list|()
decl_stmt|;
DECL|field|databaseValidator
specifier|private
specifier|final
name|Validator
name|databaseValidator
decl_stmt|;
DECL|field|hostValidator
specifier|private
specifier|final
name|Validator
name|hostValidator
decl_stmt|;
DECL|field|portValidator
specifier|private
specifier|final
name|Validator
name|portValidator
decl_stmt|;
DECL|field|userValidator
specifier|private
specifier|final
name|Validator
name|userValidator
decl_stmt|;
DECL|field|folderValidator
specifier|private
specifier|final
name|Validator
name|folderValidator
decl_stmt|;
DECL|field|keystoreValidator
specifier|private
specifier|final
name|Validator
name|keystoreValidator
decl_stmt|;
DECL|field|formValidator
specifier|private
specifier|final
name|CompositeValidator
name|formValidator
decl_stmt|;
DECL|method|SharedDatabaseLoginDialogViewModel (JabRefFrame frame, DialogService dialogService)
specifier|public
name|SharedDatabaseLoginDialogViewModel
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|DialogService
name|dialogService
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|selectedDBMSType
argument_list|,
name|selected
lambda|->
block|{
name|port
operator|.
name|setValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|selected
operator|.
name|getDefaultPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|notEmpty
init|=
name|input
lambda|->
operator|(
name|input
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|input
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|fileExists
init|=
name|input
lambda|->
name|Files
operator|.
name|exists
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|Predicate
argument_list|<
name|String
argument_list|>
name|notEmptyAndfilesExist
init|=
name|notEmpty
operator|.
name|and
argument_list|(
name|fileExists
argument_list|)
decl_stmt|;
name|databaseValidator
operator|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|database
argument_list|,
name|notEmpty
argument_list|,
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required field \"%0\" is empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Library"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hostValidator
operator|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|host
argument_list|,
name|notEmpty
argument_list|,
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required field \"%0\" is empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Port"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|portValidator
operator|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|port
argument_list|,
name|notEmpty
argument_list|,
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required field \"%0\" is empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Host"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|userValidator
operator|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|user
argument_list|,
name|notEmpty
argument_list|,
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required field \"%0\" is empty."
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"User"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|folderValidator
operator|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|folder
argument_list|,
name|notEmptyAndfilesExist
argument_list|,
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a valid file path."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|keystoreValidator
operator|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|keystore
argument_list|,
name|notEmptyAndfilesExist
argument_list|,
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Please enter a valid file path."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|formValidator
operator|=
operator|new
name|CompositeValidator
argument_list|()
expr_stmt|;
name|formValidator
operator|.
name|addValidators
argument_list|(
name|databaseValidator
argument_list|,
name|hostValidator
argument_list|,
name|portValidator
argument_list|,
name|userValidator
argument_list|)
expr_stmt|;
name|applyPreferences
argument_list|()
expr_stmt|;
block|}
DECL|method|openDatabase ()
specifier|public
name|boolean
name|openDatabase
parameter_list|()
block|{
name|DBMSConnectionProperties
name|connectionProperties
init|=
operator|new
name|DBMSConnectionProperties
argument_list|()
decl_stmt|;
name|connectionProperties
operator|.
name|setType
argument_list|(
name|selectedDBMSType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setHost
argument_list|(
name|host
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setDatabase
argument_list|(
name|database
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setUser
argument_list|(
name|user
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setPassword
argument_list|(
name|password
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setUseSSL
argument_list|(
name|useSSL
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setKeyStore
argument_list|(
name|keystore
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|connectionProperties
operator|.
name|setServerTimezone
argument_list|(
name|serverTimezone
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|setupKeyStore
argument_list|()
expr_stmt|;
name|boolean
name|connected
init|=
name|openSharedDatabase
argument_list|(
name|connectionProperties
argument_list|)
decl_stmt|;
return|return
name|connected
return|;
block|}
DECL|method|setupKeyStore ()
specifier|private
name|void
name|setupKeyStore
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|,
name|keystore
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
name|keyStorePasswordProperty
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.debug"
argument_list|,
literal|"ssl"
argument_list|)
expr_stmt|;
block|}
DECL|method|openSharedDatabase (DBMSConnectionProperties connectionProperties)
specifier|private
name|boolean
name|openSharedDatabase
parameter_list|(
name|DBMSConnectionProperties
name|connectionProperties
parameter_list|)
block|{
if|if
condition|(
name|isSharedDatabaseAlreadyPresent
argument_list|(
name|connectionProperties
argument_list|)
condition|)
block|{
name|dialogService
operator|.
name|showWarningDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Shared database connection"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You are already connected to a database using entered connection details."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|autosave
operator|.
name|get
argument_list|()
condition|)
block|{
name|Path
name|localFilePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|folder
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|localFilePath
argument_list|)
operator|&&
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|localFilePath
argument_list|)
condition|)
block|{
name|boolean
name|overwriteFilePressed
init|=
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Existing file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"'%0' exists. Overwrite file?"
argument_list|,
name|localFilePath
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Overwrite file"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overwriteFilePressed
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|loading
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|SharedDatabaseUIManager
name|manager
init|=
operator|new
name|SharedDatabaseUIManager
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|BasePanel
name|panel
init|=
name|manager
operator|.
name|openNewSharedDatabaseTab
argument_list|(
name|connectionProperties
argument_list|)
decl_stmt|;
name|setPreferences
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|folder
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
operator|new
name|SaveDatabaseAction
argument_list|(
name|panel
argument_list|,
name|Globals
operator|.
name|prefs
argument_list|)
operator|.
name|saveAs
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|folder
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error while saving the database"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
decl||
name|InvalidDBMSConnectionPropertiesException
name|exception
parameter_list|)
block|{
name|frame
operator|.
name|getDialogService
argument_list|()
operator|.
name|showErrorDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Connection error"
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseNotSupportedException
name|exception
parameter_list|)
block|{
name|ButtonType
name|openHelp
init|=
operator|new
name|ButtonType
argument_list|(
literal|"Open Help"
argument_list|,
name|ButtonData
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|ButtonType
argument_list|>
name|result
init|=
name|dialogService
operator|.
name|showCustomButtonDialogAndWait
argument_list|(
name|AlertType
operator|.
name|INFORMATION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Migration help information"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entered database has obsolete structure and is no longer supported."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Click help to learn about the migration of pre-3.6 databases."
argument_list|)
operator|+
literal|"\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"However, a new database was created alongside the pre-3.6 one."
argument_list|)
argument_list|,
name|ButtonType
operator|.
name|OK
argument_list|,
name|openHelp
argument_list|)
decl_stmt|;
name|result
operator|.
name|filter
argument_list|(
name|btn
lambda|->
name|btn
operator|.
name|equals
argument_list|(
name|openHelp
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|btn
lambda|->
name|HelpAction
operator|.
name|openHelpPage
argument_list|(
name|HelpFile
operator|.
name|SQL_DATABASE_MIGRATION
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|filter
argument_list|(
name|btn
lambda|->
name|btn
operator|.
name|equals
argument_list|(
name|ButtonType
operator|.
name|OK
argument_list|)
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|btn
lambda|->
name|openSharedDatabase
argument_list|(
name|connectionProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loading
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|setPreferences ()
specifier|private
name|void
name|setPreferences
parameter_list|()
block|{
name|prefs
operator|.
name|setType
argument_list|(
name|selectedDBMSType
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setHost
argument_list|(
name|host
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setPort
argument_list|(
name|port
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setName
argument_list|(
name|database
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setUser
argument_list|(
name|user
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setUseSSL
argument_list|(
name|useSSL
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setKeystoreFile
argument_list|(
name|keystore
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|setServerTimezone
argument_list|(
name|serverTimezone
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rememberPassword
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|prefs
operator|.
name|setPassword
argument_list|(
operator|new
name|Password
argument_list|(
name|password
operator|.
name|getValue
argument_list|()
argument_list|,
name|password
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|encrypt
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
decl||
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not store the password due to encryption problems."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|prefs
operator|.
name|clearPassword
argument_list|()
expr_stmt|;
comment|// for the case that the password is already set
block|}
name|prefs
operator|.
name|setRememberPassword
argument_list|(
name|rememberPassword
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fetches possibly saved data and configures the control elements respectively.      */
DECL|method|applyPreferences ()
specifier|private
name|void
name|applyPreferences
parameter_list|()
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseType
init|=
name|prefs
operator|.
name|getType
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseHost
init|=
name|prefs
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabasePort
init|=
name|prefs
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseName
init|=
name|prefs
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseUser
init|=
name|prefs
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabasePassword
init|=
name|prefs
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|boolean
name|sharedDatabaseRememberPassword
init|=
name|prefs
operator|.
name|getRememberPassword
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|sharedDatabaseKeystoreFile
init|=
name|prefs
operator|.
name|getKeyStoreFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharedDatabaseType
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Optional
argument_list|<
name|DBMSType
argument_list|>
name|dbmsType
init|=
name|DBMSType
operator|.
name|fromString
argument_list|(
name|sharedDatabaseType
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|dbmsType
operator|.
name|ifPresent
argument_list|(
name|selectedDBMSType
operator|::
name|set
argument_list|)
expr_stmt|;
block|}
name|sharedDatabaseHost
operator|.
name|ifPresent
argument_list|(
name|host
operator|::
name|set
argument_list|)
expr_stmt|;
name|sharedDatabasePort
operator|.
name|ifPresent
argument_list|(
name|port
operator|::
name|set
argument_list|)
expr_stmt|;
name|sharedDatabaseName
operator|.
name|ifPresent
argument_list|(
name|database
operator|::
name|set
argument_list|)
expr_stmt|;
name|sharedDatabaseUser
operator|.
name|ifPresent
argument_list|(
name|user
operator|::
name|set
argument_list|)
expr_stmt|;
name|sharedDatabaseKeystoreFile
operator|.
name|ifPresent
argument_list|(
name|keystore
operator|::
name|set
argument_list|)
expr_stmt|;
name|useSSL
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|isUseSSL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sharedDatabasePassword
operator|.
name|isPresent
argument_list|()
operator|&&
name|sharedDatabaseUser
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|password
operator|.
name|setValue
argument_list|(
operator|new
name|Password
argument_list|(
name|sharedDatabasePassword
operator|.
name|get
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|sharedDatabaseUser
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|decrypt
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
decl||
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Could not read the password due to decryption problems."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|rememberPassword
operator|.
name|set
argument_list|(
name|sharedDatabaseRememberPassword
argument_list|)
expr_stmt|;
block|}
DECL|method|isSharedDatabaseAlreadyPresent (DBMSConnectionProperties connectionProperties)
specifier|private
name|boolean
name|isSharedDatabaseAlreadyPresent
parameter_list|(
name|DBMSConnectionProperties
name|connectionProperties
parameter_list|)
block|{
name|List
argument_list|<
name|BasePanel
argument_list|>
name|panels
init|=
name|frame
operator|.
name|getBasePanelList
argument_list|()
decl_stmt|;
return|return
name|panels
operator|.
name|parallelStream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|panel
lambda|->
block|{
name|BibDatabaseContext
name|context
init|=
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|context
operator|.
name|getLocation
argument_list|()
operator|==
name|DatabaseLocation
operator|.
name|SHARED
operator|)
operator|&&
name|connectionProperties
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getDBMSSynchronizer
argument_list|()
operator|.
name|getConnectionProperties
argument_list|()
argument_list|)
operator|)
return|;
block|}
argument_list|)
return|;
block|}
DECL|method|showSaveDbToFileDialog ()
specifier|public
name|void
name|showSaveDbToFileDialog
parameter_list|()
block|{
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|addExtensionFilter
argument_list|(
name|StandardFileType
operator|.
name|BIBTEX_DB
argument_list|)
operator|.
name|withDefaultExtension
argument_list|(
name|StandardFileType
operator|.
name|BIBTEX_DB
argument_list|)
operator|.
name|withInitialDirectory
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|exportPath
init|=
name|dialogService
operator|.
name|showFileSaveDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
decl_stmt|;
name|exportPath
operator|.
name|ifPresent
argument_list|(
name|path
lambda|->
block|{
name|folder
operator|.
name|setValue
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showOpenKeystoreFileDialog ()
specifier|public
name|void
name|showOpenKeystoreFileDialog
parameter_list|()
block|{
name|FileDialogConfiguration
name|fileDialogConfiguration
init|=
operator|new
name|FileDialogConfiguration
operator|.
name|Builder
argument_list|()
operator|.
name|addExtensionFilter
argument_list|(
name|FileFilterConverter
operator|.
name|ANY_FILE
argument_list|)
operator|.
name|addExtensionFilter
argument_list|(
name|StandardFileType
operator|.
name|JAVA_KEYSTORE
argument_list|)
operator|.
name|withDefaultExtension
argument_list|(
name|StandardFileType
operator|.
name|JAVA_KEYSTORE
argument_list|)
operator|.
name|withInitialDirectory
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|WORKING_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|Path
argument_list|>
name|keystorePath
init|=
name|dialogService
operator|.
name|showFileOpenDialog
argument_list|(
name|fileDialogConfiguration
argument_list|)
decl_stmt|;
name|keystorePath
operator|.
name|ifPresent
argument_list|(
name|path
lambda|->
block|{
name|keystore
operator|.
name|setValue
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|databaseproperty ()
specifier|public
name|StringProperty
name|databaseproperty
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|hostProperty ()
specifier|public
name|StringProperty
name|hostProperty
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|portProperty ()
specifier|public
name|StringProperty
name|portProperty
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|userProperty ()
specifier|public
name|StringProperty
name|userProperty
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|passwordProperty ()
specifier|public
name|StringProperty
name|passwordProperty
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|autosaveProperty ()
specifier|public
name|BooleanProperty
name|autosaveProperty
parameter_list|()
block|{
return|return
name|autosave
return|;
block|}
DECL|method|rememberPasswordProperty ()
specifier|public
name|BooleanProperty
name|rememberPasswordProperty
parameter_list|()
block|{
return|return
name|rememberPassword
return|;
block|}
DECL|method|folderProperty ()
specifier|public
name|StringProperty
name|folderProperty
parameter_list|()
block|{
return|return
name|folder
return|;
block|}
DECL|method|keyStoreProperty ()
specifier|public
name|StringProperty
name|keyStoreProperty
parameter_list|()
block|{
return|return
name|keystore
return|;
block|}
DECL|method|keyStorePasswordProperty ()
specifier|public
name|StringProperty
name|keyStorePasswordProperty
parameter_list|()
block|{
return|return
name|keyStorePasswordProperty
return|;
block|}
DECL|method|useSSLProperty ()
specifier|public
name|BooleanProperty
name|useSSLProperty
parameter_list|()
block|{
return|return
name|useSSL
return|;
block|}
DECL|method|selectedDbmstypeProperty ()
specifier|public
name|ObjectProperty
argument_list|<
name|DBMSType
argument_list|>
name|selectedDbmstypeProperty
parameter_list|()
block|{
return|return
name|selectedDBMSType
return|;
block|}
DECL|method|loadingProperty ()
specifier|public
name|BooleanProperty
name|loadingProperty
parameter_list|()
block|{
return|return
name|loading
return|;
block|}
DECL|method|dbValidation ()
specifier|public
name|ValidationStatus
name|dbValidation
parameter_list|()
block|{
return|return
name|databaseValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|hostValidation ()
specifier|public
name|ValidationStatus
name|hostValidation
parameter_list|()
block|{
return|return
name|hostValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|portValidation ()
specifier|public
name|ValidationStatus
name|portValidation
parameter_list|()
block|{
return|return
name|portValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|userValidation ()
specifier|public
name|ValidationStatus
name|userValidation
parameter_list|()
block|{
return|return
name|userValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|folderValidation ()
specifier|public
name|ValidationStatus
name|folderValidation
parameter_list|()
block|{
return|return
name|folderValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|keystoreValidation ()
specifier|public
name|ValidationStatus
name|keystoreValidation
parameter_list|()
block|{
return|return
name|keystoreValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|formValidation ()
specifier|public
name|ValidationStatus
name|formValidation
parameter_list|()
block|{
return|return
name|formValidator
operator|.
name|getValidationStatus
argument_list|()
return|;
block|}
DECL|method|serverTimezoneProperty ()
specifier|public
name|StringProperty
name|serverTimezoneProperty
parameter_list|()
block|{
return|return
name|serverTimezone
return|;
block|}
block|}
end_class

end_unit

