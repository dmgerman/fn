begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.entryeditor
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoManager
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ContextMenu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|InputMethodRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|StateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|StandardActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|CountingUndoManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableChangeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BindingsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|BibEntryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|InvalidFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatterPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ImportFormatPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|util
operator|.
name|FileUpdateMonitor
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|ObservableRuleBasedValidator
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|ValidationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|controlsfx
operator|.
name|control
operator|.
name|NotificationPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|flowless
operator|.
name|VirtualizedScrollPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|richtext
operator|.
name|CodeArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SourceTab
specifier|public
class|class
name|SourceTab
extends|extends
name|EntryEditorTab
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SourceTab
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fieldFormatterPreferences
specifier|private
specifier|final
name|LatexFieldFormatterPreferences
name|fieldFormatterPreferences
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|BibDatabaseMode
name|mode
decl_stmt|;
DECL|field|undoManager
specifier|private
specifier|final
name|UndoManager
name|undoManager
decl_stmt|;
DECL|field|sourceIsValid
specifier|private
specifier|final
name|ObjectProperty
argument_list|<
name|ValidationMessage
argument_list|>
name|sourceIsValid
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sourceValidator
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|final
name|ObservableRuleBasedValidator
name|sourceValidator
init|=
operator|new
name|ObservableRuleBasedValidator
argument_list|(
name|sourceIsValid
argument_list|)
decl_stmt|;
DECL|field|importFormatPreferences
specifier|private
specifier|final
name|ImportFormatPreferences
name|importFormatPreferences
decl_stmt|;
DECL|field|fileMonitor
specifier|private
specifier|final
name|FileUpdateMonitor
name|fileMonitor
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|stateManager
specifier|private
specifier|final
name|StateManager
name|stateManager
decl_stmt|;
DECL|field|searchHighlightPattern
specifier|private
name|Optional
argument_list|<
name|Pattern
argument_list|>
name|searchHighlightPattern
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|codeArea
specifier|private
name|CodeArea
name|codeArea
decl_stmt|;
DECL|class|EditAction
specifier|private
class|class
name|EditAction
extends|extends
name|SimpleCommand
block|{
DECL|field|command
specifier|private
specifier|final
name|StandardActions
name|command
decl_stmt|;
DECL|method|EditAction (StandardActions command)
specifier|public
name|EditAction
parameter_list|(
name|StandardActions
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|codeArea
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|command
condition|)
block|{
case|case
name|COPY
case|:
name|codeArea
operator|.
name|copy
argument_list|()
expr_stmt|;
break|break;
case|case
name|CUT
case|:
name|codeArea
operator|.
name|cut
argument_list|()
expr_stmt|;
break|break;
case|case
name|PASTE
case|:
name|codeArea
operator|.
name|paste
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT_ALL
case|:
name|codeArea
operator|.
name|selectAll
argument_list|()
expr_stmt|;
break|break;
block|}
name|codeArea
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|SourceTab (BibDatabaseContext bibDatabaseContext, CountingUndoManager undoManager, LatexFieldFormatterPreferences fieldFormatterPreferences, ImportFormatPreferences importFormatPreferences, FileUpdateMonitor fileMonitor, DialogService dialogService, StateManager stateManager)
specifier|public
name|SourceTab
parameter_list|(
name|BibDatabaseContext
name|bibDatabaseContext
parameter_list|,
name|CountingUndoManager
name|undoManager
parameter_list|,
name|LatexFieldFormatterPreferences
name|fieldFormatterPreferences
parameter_list|,
name|ImportFormatPreferences
name|importFormatPreferences
parameter_list|,
name|FileUpdateMonitor
name|fileMonitor
parameter_list|,
name|DialogService
name|dialogService
parameter_list|,
name|StateManager
name|stateManager
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|bibDatabaseContext
operator|.
name|getMode
argument_list|()
expr_stmt|;
name|this
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 source"
argument_list|,
name|mode
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show/edit %0 source"
argument_list|,
name|mode
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|SOURCE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|undoManager
operator|=
name|undoManager
expr_stmt|;
name|this
operator|.
name|fieldFormatterPreferences
operator|=
name|fieldFormatterPreferences
expr_stmt|;
name|this
operator|.
name|importFormatPreferences
operator|=
name|importFormatPreferences
expr_stmt|;
name|this
operator|.
name|fileMonitor
operator|=
name|fileMonitor
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|dialogService
expr_stmt|;
name|this
operator|.
name|stateManager
operator|=
name|stateManager
expr_stmt|;
name|stateManager
operator|.
name|activeSearchQueryProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
block|{
name|searchHighlightPattern
operator|=
name|newValue
operator|.
name|flatMap
argument_list|(
name|SearchQuery
operator|::
name|getPatternForWords
argument_list|)
expr_stmt|;
name|highlightSearchPattern
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|highlightSearchPattern ()
specifier|private
name|void
name|highlightSearchPattern
parameter_list|()
block|{
if|if
condition|(
name|searchHighlightPattern
operator|.
name|isPresent
argument_list|()
operator|&&
name|codeArea
operator|!=
literal|null
condition|)
block|{
name|codeArea
operator|.
name|setStyleClass
argument_list|(
literal|0
argument_list|,
name|codeArea
operator|.
name|getLength
argument_list|()
argument_list|,
literal|"text"
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|searchHighlightPattern
operator|.
name|get
argument_list|()
operator|.
name|matcher
argument_list|(
name|codeArea
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|matcher
operator|.
name|groupCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|codeArea
operator|.
name|setStyleClass
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|,
literal|"search"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getSourceString (BibEntry entry, BibDatabaseMode type, LatexFieldFormatterPreferences fieldFormatterPreferences)
specifier|private
specifier|static
name|String
name|getSourceString
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|,
name|LatexFieldFormatterPreferences
name|fieldFormatterPreferences
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|LatexFieldFormatter
name|formatter
init|=
name|LatexFieldFormatter
operator|.
name|buildIgnoreHashes
argument_list|(
name|fieldFormatterPreferences
argument_list|)
decl_stmt|;
operator|new
name|BibEntryWriter
argument_list|(
name|formatter
argument_list|,
literal|false
argument_list|)
operator|.
name|writeWithoutPrependedNewlines
argument_list|(
name|entry
argument_list|,
name|stringWriter
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|stringWriter
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* Work around for different input methods.      * https://github.com/FXMisc/RichTextFX/issues/146      */
DECL|class|InputMethodRequestsObject
specifier|private
class|class
name|InputMethodRequestsObject
implements|implements
name|InputMethodRequests
block|{
annotation|@
name|Override
DECL|method|getSelectedText ()
specifier|public
name|String
name|getSelectedText
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
DECL|method|getLocationOffset (int x, int y)
specifier|public
name|int
name|getLocationOffset
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|cancelLatestCommittedText ()
specifier|public
name|void
name|cancelLatestCommittedText
parameter_list|()
block|{
return|return;
block|}
annotation|@
name|Override
DECL|method|getTextLocation (int offset)
specifier|public
name|Point2D
name|getTextLocation
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
operator|new
name|Point2D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
DECL|method|createSourceEditor ()
specifier|private
name|CodeArea
name|createSourceEditor
parameter_list|()
block|{
name|CodeArea
name|codeArea
init|=
operator|new
name|CodeArea
argument_list|()
decl_stmt|;
name|codeArea
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|setInputMethodRequests
argument_list|(
operator|new
name|InputMethodRequestsObject
argument_list|()
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|setOnInputMethodTextChanged
argument_list|(
name|event
lambda|->
block|{
name|String
name|committed
init|=
name|event
operator|.
name|getCommitted
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|committed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|codeArea
operator|.
name|insertText
argument_list|(
name|codeArea
operator|.
name|getCaretPosition
argument_list|()
argument_list|,
name|committed
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|setId
argument_list|(
literal|"bibtexSourceCodeArea"
argument_list|)
expr_stmt|;
name|ActionFactory
name|factory
init|=
operator|new
name|ActionFactory
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
argument_list|)
decl_stmt|;
name|ContextMenu
name|contextMenu
init|=
operator|new
name|ContextMenu
argument_list|()
decl_stmt|;
name|contextMenu
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CUT
argument_list|,
operator|new
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|CUT
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY
argument_list|,
operator|new
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|COPY
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|PASTE
argument_list|,
operator|new
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|PASTE
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SELECT_ALL
argument_list|,
operator|new
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|SELECT_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|contextMenu
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"context-menu"
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|setContextMenu
argument_list|(
name|contextMenu
argument_list|)
expr_stmt|;
return|return
name|codeArea
return|;
block|}
annotation|@
name|Override
DECL|method|shouldShow (BibEntry entry)
specifier|public
name|boolean
name|shouldShow
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|bindToEntry (BibEntry entry)
specifier|protected
name|void
name|bindToEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|CodeArea
name|codeArea
init|=
name|createSourceEditor
argument_list|()
decl_stmt|;
name|VirtualizedScrollPane
argument_list|<
name|CodeArea
argument_list|>
name|node
init|=
operator|new
name|VirtualizedScrollPane
argument_list|<>
argument_list|(
name|codeArea
argument_list|)
decl_stmt|;
name|NotificationPane
name|notificationPane
init|=
operator|new
name|NotificationPane
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|notificationPane
operator|.
name|setShowFromTop
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sourceValidator
operator|.
name|getValidationStatus
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|addListener
argument_list|(
operator|(
name|ListChangeListener
argument_list|<
name|ValidationMessage
argument_list|>
operator|)
name|c
lambda|->
block|{
if|if
condition|(
name|sourceValidator
operator|.
name|getValidationStatus
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|notificationPane
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sourceValidator
operator|.
name|getValidationStatus
argument_list|()
operator|.
name|getHighestMessage
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|validationMessage
lambda|->
block|{
name|notificationPane
operator|.
name|show
argument_list|(
name|validationMessage
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|//this seems not working
name|dialogService
operator|.
name|showErrorDialogAndWait
argument_list|(
name|validationMessage
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|setContent
argument_list|(
name|codeArea
argument_list|)
expr_stmt|;
name|this
operator|.
name|codeArea
operator|=
name|codeArea
expr_stmt|;
comment|// Store source for on focus out event in the source code (within its text area)
comment|// and update source code for every change of entry field values
name|BindingsHelper
operator|.
name|bindContentBidirectional
argument_list|(
name|entry
operator|.
name|getFieldsObservable
argument_list|()
argument_list|,
name|codeArea
operator|.
name|focusedProperty
argument_list|()
argument_list|,
name|onFocus
lambda|->
block|{
if|if
condition|(
operator|!
name|onFocus
condition|)
block|{
name|storeSource
argument_list|(
name|entry
argument_list|,
name|codeArea
operator|.
name|textProperty
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|fields
lambda|->
block|{
name|DefaultTaskExecutor
operator|.
name|runAndWaitInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
name|codeArea
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|codeArea
operator|.
name|appendText
argument_list|(
name|getSourceString
argument_list|(
name|entry
argument_list|,
name|mode
argument_list|,
name|fieldFormatterPreferences
argument_list|)
argument_list|)
expr_stmt|;
name|highlightSearchPattern
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|codeArea
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|appendText
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Correct the entry, and reopen editor to display/edit source."
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|storeSource (BibEntry outOfFocusEntry, String text)
specifier|private
name|void
name|storeSource
parameter_list|(
name|BibEntry
name|outOfFocusEntry
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
operator|(
name|outOfFocusEntry
operator|==
literal|null
operator|)
operator|||
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|BibtexParser
name|bibtexParser
init|=
operator|new
name|BibtexParser
argument_list|(
name|importFormatPreferences
argument_list|,
name|fileMonitor
argument_list|)
decl_stmt|;
try|try
block|{
name|ParserResult
name|parserResult
init|=
name|bibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|database
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"More than one entry found."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|database
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
if|if
condition|(
name|parserResult
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
comment|// put the warning into as exception text -> it will be displayed to the user
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|parserResult
operator|.
name|warnings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No entries found."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|parserResult
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
comment|// put the warning into as exception text -> it will be displayed to the user
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|parserResult
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"source edit"
argument_list|)
argument_list|)
decl_stmt|;
name|BibEntry
name|newEntry
init|=
name|database
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|newKey
init|=
name|newEntry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|newKey
operator|!=
literal|null
condition|)
block|{
name|outOfFocusEntry
operator|.
name|setCiteKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outOfFocusEntry
operator|.
name|clearCiteKey
argument_list|()
expr_stmt|;
block|}
comment|// First, remove fields that the user has removed.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|outOfFocusEntry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|fieldValue
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|InternalBibtexFields
operator|.
name|isDisplayableField
argument_list|(
name|fieldName
argument_list|)
operator|&&
operator|!
name|newEntry
operator|.
name|hasField
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|outOfFocusEntry
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|outOfFocusEntry
operator|.
name|clearField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Then set all fields that have been set by the user.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|newEntry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|outOfFocusEntry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
comment|// Test if the field is legally set.
operator|new
name|LatexFieldFormatter
argument_list|(
name|fieldFormatterPreferences
argument_list|)
operator|.
name|format
argument_list|(
name|newValue
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|outOfFocusEntry
argument_list|,
name|fieldName
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|outOfFocusEntry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// See if the user has changed the entry type:
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|,
name|outOfFocusEntry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableChangeType
argument_list|(
name|outOfFocusEntry
argument_list|,
name|outOfFocusEntry
operator|.
name|getType
argument_list|()
argument_list|,
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outOfFocusEntry
operator|.
name|setType
argument_list|(
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
name|undoManager
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
name|sourceIsValid
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFieldValueException
decl||
name|IllegalStateException
decl||
name|IOException
name|ex
parameter_list|)
block|{
name|sourceIsValid
operator|.
name|setValue
argument_list|(
name|ValidationMessage
operator|.
name|error
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Problem with parsing entry"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect source"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

