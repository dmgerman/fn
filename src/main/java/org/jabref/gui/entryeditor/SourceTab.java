begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.entryeditor
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|FXDialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableChangeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|BibEntryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|InvalidFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|EntryChangedEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|flowless
operator|.
name|VirtualizedScrollPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|richtext
operator|.
name|CodeArea
import|;
end_import

begin_class
DECL|class|SourceTab
specifier|public
class|class
name|SourceTab
extends|extends
name|EntryEditorTab
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SourceTab
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mode
specifier|private
specifier|final
name|BibDatabaseMode
name|mode
decl_stmt|;
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
DECL|field|codeArea
specifier|private
name|CodeArea
name|codeArea
decl_stmt|;
DECL|method|SourceTab (BibDatabaseContext context, BibEntry entry)
specifier|public
name|SourceTab
parameter_list|(
name|BibDatabaseContext
name|context
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|context
operator|.
name|getMode
argument_list|()
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|context
operator|.
name|getDatabase
argument_list|()
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|setText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 source"
argument_list|,
name|mode
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show/edit %0 source"
argument_list|,
name|mode
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|setGraphic
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|SOURCE
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getSourceString (BibEntry entry, BibDatabaseMode type)
specifier|private
specifier|static
name|String
name|getSourceString
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|LatexFieldFormatter
name|formatter
init|=
name|LatexFieldFormatter
operator|.
name|buildIgnoreHashes
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|BibEntryWriter
argument_list|(
name|formatter
argument_list|,
literal|false
argument_list|)
operator|.
name|writeWithoutPrependedNewlines
argument_list|(
name|entry
argument_list|,
name|stringWriter
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|stringWriter
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (EntryChangedEvent event)
specifier|public
name|void
name|listen
parameter_list|(
name|EntryChangedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|codeArea
operator|!=
literal|null
operator|&&
name|this
operator|.
name|entry
operator|.
name|equals
argument_list|(
name|event
operator|.
name|getBibEntry
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|codeArea
operator|.
name|clear
argument_list|()
expr_stmt|;
name|codeArea
operator|.
name|appendText
argument_list|(
name|getSourceString
argument_list|(
name|entry
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|codeArea
operator|.
name|appendText
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Correct the entry, and reopen editor to display/edit source."
argument_list|)
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createSourceEditor (BibEntry entry, BibDatabaseMode mode)
specifier|private
name|Node
name|createSourceEditor
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|BibDatabaseMode
name|mode
parameter_list|)
block|{
name|codeArea
operator|=
operator|new
name|CodeArea
argument_list|()
expr_stmt|;
name|codeArea
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|lookup
argument_list|(
literal|".styled-text-area"
argument_list|)
operator|.
name|setStyle
argument_list|(
literal|"-fx-font-size: "
operator|+
name|Globals
operator|.
name|prefs
operator|.
name|getFontSizeFX
argument_list|()
operator|+
literal|"pt;"
argument_list|)
expr_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|codeArea
operator|.
name|focusedProperty
argument_list|()
argument_list|,
name|focused
lambda|->
block|{
if|if
condition|(
operator|!
name|focused
condition|)
block|{
name|storeSource
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|srcString
init|=
name|getSourceString
argument_list|(
name|entry
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|codeArea
operator|.
name|appendText
argument_list|(
name|srcString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|codeArea
operator|.
name|appendText
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Correct the entry, and reopen editor to display/edit source."
argument_list|)
argument_list|)
expr_stmt|;
name|codeArea
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|VirtualizedScrollPane
argument_list|<>
argument_list|(
name|codeArea
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|shouldShow ()
specifier|public
name|boolean
name|shouldShow
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|initialize ()
specifier|protected
name|void
name|initialize
parameter_list|()
block|{
name|this
operator|.
name|setContent
argument_list|(
name|createSourceEditor
argument_list|(
name|entry
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|storeSource ()
specifier|private
name|void
name|storeSource
parameter_list|()
block|{
if|if
condition|(
name|codeArea
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|BibtexParser
name|bibtexParser
init|=
operator|new
name|BibtexParser
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ParserResult
name|parserResult
init|=
name|bibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|codeArea
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|database
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"More than one entry found."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|database
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
if|if
condition|(
name|parserResult
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
comment|// put the warning into as exception text -> it will be displayed to the user
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|parserResult
operator|.
name|warnings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No entries found."
argument_list|)
throw|;
block|}
block|}
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"source edit"
argument_list|)
argument_list|)
decl_stmt|;
name|BibEntry
name|newEntry
init|=
name|database
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|newKey
init|=
name|newEntry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|entryChanged
init|=
literal|false
decl_stmt|;
name|boolean
name|emptyWarning
init|=
operator|(
name|newKey
operator|==
literal|null
operator|)
operator|||
name|newKey
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|newKey
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|clearCiteKey
argument_list|()
expr_stmt|;
block|}
comment|// First, remove fields that the user has removed.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|entry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|fieldValue
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|InternalBibtexFields
operator|.
name|isDisplayableField
argument_list|(
name|fieldName
argument_list|)
operator|&&
operator|!
name|newEntry
operator|.
name|hasField
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|entryChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Then set all fields that have been set by the user.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|newEntry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
comment|// Test if the field is legally set.
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|newValue
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fieldName
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|entryChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// See if the user has changed the entry type:
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableChangeType
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|entryChanged
operator|=
literal|true
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// TODO: Add undo
comment|//panel.getUndoManager().addEdit(compound);
comment|// TODO: Warn about duplicate/empty bibtext key
comment|/*             if (panel.getDatabase().getDuplicationChecker().isDuplicateCiteKeyExisting(entry)) {                 warnDuplicateBibtexkey();             } else if (emptyWarning) {                 warnEmptyBibtexkey();             } else {                 panel.output(Localization.lang("Stored entry") + '.');             }             */
block|}
catch|catch
parameter_list|(
name|InvalidFieldValueException
decl||
name|IOException
name|ex
parameter_list|)
block|{
comment|// The source couldn't be parsed, so the user is given an
comment|// error message, and the choice to keep or revert the contents
comment|// of the source text field.
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect source"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|DialogService
name|dialogService
init|=
operator|new
name|FXDialogService
argument_list|()
decl_stmt|;
name|boolean
name|keepEditing
init|=
name|dialogService
operator|.
name|showConfirmationDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Problem with parsing entry"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Revert to original source"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keepEditing
condition|)
block|{
comment|// Revert
try|try
block|{
name|codeArea
operator|.
name|replaceText
argument_list|(
literal|0
argument_list|,
name|codeArea
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|getSourceString
argument_list|(
name|entry
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect source"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

