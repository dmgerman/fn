begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.entryeditor.fileannotationtab
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|fileannotationtab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
operator|.
name|FileAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|pdf
operator|.
name|FileAnnotationType
import|;
end_import

begin_class
DECL|class|FileAnnotationViewModel
specifier|public
class|class
name|FileAnnotationViewModel
extends|extends
name|FileAnnotation
block|{
DECL|field|author
specifier|private
name|StringProperty
name|author
init|=
operator|new
name|SimpleStringProperty
argument_list|()
decl_stmt|;
DECL|method|FileAnnotationViewModel (FileAnnotation annotation)
specifier|public
name|FileAnnotationViewModel
parameter_list|(
name|FileAnnotation
name|annotation
parameter_list|)
block|{
name|super
argument_list|(
name|annotation
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|annotation
operator|.
name|getTimeModified
argument_list|()
argument_list|,
name|annotation
operator|.
name|getPage
argument_list|()
argument_list|,
name|annotation
operator|.
name|getContent
argument_list|()
argument_list|,
name|annotation
operator|.
name|getAnnotationType
argument_list|()
argument_list|,
name|annotation
operator|.
name|hasLinkedAnnotation
argument_list|()
condition|?
name|Optional
operator|.
name|of
argument_list|(
name|annotation
operator|.
name|getLinkedFileAnnotation
argument_list|()
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|author
operator|.
name|set
argument_list|(
name|annotation
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use content just for test, since some annotations don't have an author
block|}
DECL|method|authorProperty ()
specifier|public
name|StringProperty
name|authorProperty
parameter_list|()
block|{
return|return
name|author
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|hasLinkedAnnotation
argument_list|()
operator|&&
name|this
operator|.
name|getContent
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|FileAnnotationType
operator|.
name|UNDERLINE
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAnnotationType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Empty Underline"
argument_list|)
return|;
block|}
if|if
condition|(
name|FileAnnotationType
operator|.
name|HIGHLIGHT
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAnnotationType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Empty Highlight"
argument_list|)
return|;
block|}
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Empty Marking"
argument_list|)
return|;
block|}
if|if
condition|(
name|FileAnnotationType
operator|.
name|UNDERLINE
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAnnotationType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Underline"
argument_list|)
operator|+
literal|": "
operator|+
name|this
operator|.
name|getContent
argument_list|()
return|;
block|}
if|if
condition|(
name|FileAnnotationType
operator|.
name|HIGHLIGHT
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getAnnotationType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Highlight"
argument_list|)
operator|+
literal|": "
operator|+
name|this
operator|.
name|getContent
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getMarking (FileAnnotation annotation)
specifier|private
name|String
name|getMarking
parameter_list|(
name|FileAnnotation
name|annotation
parameter_list|)
block|{
if|if
condition|(
name|annotation
operator|.
name|hasLinkedAnnotation
argument_list|()
condition|)
block|{
return|return
name|getContentOrNA
argument_list|(
name|annotation
operator|.
name|getLinkedFileAnnotation
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|"N/A"
return|;
block|}
DECL|method|getContentOrNA (String content)
specifier|private
name|String
name|getContentOrNA
parameter_list|(
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|content
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"N/A"
return|;
block|}
return|return
name|content
return|;
block|}
block|}
end_class

end_unit

