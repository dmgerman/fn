begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.entryeditor
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComboBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|contentselector
operator|.
name|FieldContentSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|date
operator|.
name|DatePickerButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|EntryEditor
operator|.
name|StoreFieldAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Month
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|FieldExtraComponents
specifier|public
class|class
name|FieldExtraComponents
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FieldExtraComponents
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FieldExtraComponents ()
specifier|private
name|FieldExtraComponents
parameter_list|()
block|{     }
comment|/**      * Return a dropdown list containing Yes and No for fields with EXTRA_YES_NO      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getYesNoExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getYesNoExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|options
init|=
block|{
literal|""
block|,
literal|"Yes"
block|,
literal|"No"
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|yesno
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|yesno
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
operator|(
operator|(
name|String
operator|)
name|yesno
operator|.
name|getSelectedItem
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|yesno
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the month names for fields with EXTRA_MONTH      *      * @param fieldEditor      * @param entryEditor      * @param type      * @return      */
DECL|method|getMonthExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor, BibDatabaseMode type)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getMonthExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|monthNames
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|Month
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Month
operator|::
name|getFullName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addAll
argument_list|(
name|monthNames
argument_list|)
expr_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|month
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|options
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|month
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|int
name|monthNumber
init|=
name|month
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|monthNumber
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|BibDatabaseMode
operator|.
name|BIBLATEX
condition|)
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|monthNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|Month
operator|.
name|getMonthByNumber
argument_list|(
name|monthNumber
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getJabRefFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
name|month
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|month
argument_list|)
return|;
block|}
comment|/**      * Return a button opening a content selector for fields where one exists      *      * @param frame      * @param panel      * @param editor      * @param contentSelectors      * @param storeFieldAction      * @return      */
DECL|method|getSelectorExtraComponent (JabRefFrame frame, BasePanel panel, FieldEditor editor, Set<FieldContentSelector> contentSelectors, StoreFieldAction storeFieldAction)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getSelectorExtraComponent
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|FieldEditor
name|editor
parameter_list|,
name|Set
argument_list|<
name|FieldContentSelector
argument_list|>
name|contentSelectors
parameter_list|,
name|StoreFieldAction
name|storeFieldAction
parameter_list|)
block|{
name|FieldContentSelector
name|ws
init|=
operator|new
name|FieldContentSelector
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|frame
argument_list|,
name|editor
argument_list|,
name|storeFieldAction
argument_list|,
literal|false
argument_list|,
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|editor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PERSON_NAMES
argument_list|)
condition|?
literal|" and "
else|:
literal|", "
argument_list|)
decl_stmt|;
name|contentSelectors
operator|.
name|add
argument_list|(
name|ws
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ws
argument_list|)
return|;
block|}
comment|/**      * Set up field such that double click inserts the current date      * If isDataPicker is True, a button with a data picker is returned      *      * @param editor reference to the FieldEditor to display the date value      * @param useDatePicker shows a DatePickerButton if true      * @param useIsoFormat if true ISO format is always used      * @return      */
DECL|method|getDateTimeExtraComponent (FieldEditor editor, boolean useDatePicker, boolean useIsoFormat)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getDateTimeExtraComponent
parameter_list|(
name|FieldEditor
name|editor
parameter_list|,
name|boolean
name|useDatePicker
parameter_list|,
name|boolean
name|useIsoFormat
parameter_list|)
block|{
comment|/*         ((JTextArea) editor).addMouseListener(new MouseAdapter() {             @Override             public void mouseClicked(MouseEvent e) {                 if (e.getClickCount() == 2) {// double click                     String date = "";                     if(useIsoFormat) {                         date = DateTimeFormatter.ISO_DATE.format(LocalDate.now());                     } else {                         date = DateTimeFormatter.ofPattern(Globals.prefs.get(JabRefPreferences.TIME_STAMP_FORMAT)).format(                                 LocalDateTime.now());                     }                     editor.setText(date);                 }             }         });         */
comment|// insert a datepicker, if the extras field contains this command
if|if
condition|(
name|useDatePicker
condition|)
block|{
name|DatePickerButton
name|datePicker
init|=
operator|new
name|DatePickerButton
argument_list|(
name|editor
argument_list|,
name|useIsoFormat
argument_list|)
decl_stmt|;
comment|/*             // register a DocumentListener on the underlying text document which notifies the DatePicker which date is currently set             ((JTextArea) editor).getDocument().addDocumentListener(new DocumentListener() {                 @Override                 public void insertUpdate(DocumentEvent e) {                     datePicker.updateDatePickerDate(editor.getText());                 }                 @Override                 public void removeUpdate(DocumentEvent e) {                     datePicker.updateDatePickerDate(editor.getText());                 }                 @Override                 public void changedUpdate(DocumentEvent e) {                     datePicker.updateDatePickerDate(editor.getText());                 }             });             */
return|return
name|Optional
operator|.
name|of
argument_list|(
name|datePicker
operator|.
name|getDatePicker
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
comment|/**      * Return a dropdown list with the alternatives for editor type fields      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getEditorTypeExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getEditorTypeExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|optionValues
init|=
block|{
literal|""
block|,
literal|"editor"
block|,
literal|"compiler"
block|,
literal|"founder"
block|,
literal|"continuator"
block|,
literal|"redactor"
block|,
literal|"reviser"
block|,
literal|"collaborator"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|optionDescriptions
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Editor"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Compiler"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Founder"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Continuator"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Redactor"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Reviser"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Collaborator"
argument_list|)
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|editorType
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|editorType
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|editorType
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|editorType
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the alternatives for pagination type fields      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getPaginationExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getPaginationExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|optionValues
init|=
block|{
literal|""
block|,
literal|"page"
block|,
literal|"column"
block|,
literal|"line"
block|,
literal|"verse"
block|,
literal|"section"
block|,
literal|"paragraph"
block|,
literal|"none"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|optionDescriptions
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Page"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Column"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Line"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Verse"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Section"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Paragraph"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"None"
argument_list|)
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|pagination
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|pagination
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|pagination
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|pagination
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the alternatives for pagination type fields      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getTypeExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor, boolean isPatent)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getTypeExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|,
name|boolean
name|isPatent
parameter_list|)
block|{
name|String
index|[]
name|optionValues
decl_stmt|;
name|String
index|[]
name|optionDescriptions
decl_stmt|;
if|if
condition|(
name|isPatent
condition|)
block|{
name|optionValues
operator|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"patent"
block|,
literal|"patentde"
block|,
literal|"patenteu"
block|,
literal|"patentfr"
block|,
literal|"patentuk"
block|,
literal|"patentus"
block|,
literal|"patreq"
block|,
literal|"patreqde"
block|,
literal|"patreqeu"
block|,
literal|"patreqfr"
block|,
literal|"patrequk"
block|,
literal|"patrequs"
block|}
expr_stmt|;
name|optionDescriptions
operator|=
operator|new
name|String
index|[]
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"German patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"European patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"French patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"British patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"U.S. patent"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"German patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"European patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"French patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"British patent request"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"U.S. patent request"
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|optionValues
operator|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"mathesis"
block|,
literal|"phdthesis"
block|,
literal|"candthesis"
block|,
literal|"techreport"
block|,
literal|"resreport"
block|,
literal|"software"
block|,
literal|"datacd"
block|,
literal|"audiocd"
block|}
expr_stmt|;
name|optionDescriptions
operator|=
operator|new
name|String
index|[]
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Master's thesis"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"PhD thesis"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Candidate thesis"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Technical report"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Research report"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Software"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Data CD"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Audio CD"
argument_list|)
block|}
expr_stmt|;
block|}
name|JComboBox
argument_list|<
name|String
argument_list|>
name|type
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|type
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|type
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Return a dropdown list with the gender alternatives for fields with GENDER      *      * @param fieldEditor      * @param entryEditor      * @return      */
DECL|method|getGenderExtraComponent (FieldEditor fieldEditor, EntryEditor entryEditor)
specifier|public
specifier|static
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getGenderExtraComponent
parameter_list|(
name|FieldEditor
name|fieldEditor
parameter_list|,
name|EntryEditor
name|entryEditor
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|optionValues
init|=
block|{
literal|""
block|,
literal|"sf"
block|,
literal|"sm"
block|,
literal|"sp"
block|,
literal|"pf"
block|,
literal|"pm"
block|,
literal|"pn"
block|,
literal|"pp"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|optionDescriptions
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Select"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Female name"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Male name"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Neuter name"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Female names"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Male names"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Neuter names"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Mixed names"
argument_list|)
block|}
decl_stmt|;
name|JComboBox
argument_list|<
name|String
argument_list|>
name|gender
init|=
operator|new
name|JComboBox
argument_list|<>
argument_list|(
name|optionDescriptions
argument_list|)
decl_stmt|;
name|gender
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|fieldEditor
operator|.
name|setText
argument_list|(
name|optionValues
index|[
name|gender
operator|.
name|getSelectedIndex
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|entryEditor
operator|.
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|gender
argument_list|)
return|;
block|}
block|}
end_class

end_unit

