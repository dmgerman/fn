begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.entryeditor
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|AWTKeyStroke
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|KeyboardFocusManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|RenderingHints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ActionMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|InputMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JLabel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTabbedPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JToolBar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ScrollPaneConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|embed
operator|.
name|swing
operator|.
name|JFXPanel
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Scene
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|StackPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|EntryContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|OSXCompatibleToolbar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|contentselector
operator|.
name|FieldContentSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|WriteXMPEntryEditorAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditorFocusListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FileListEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|JTextAreaWithHighlighting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|menus
operator|.
name|ChangeEntryTypeMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|EntryFetchAndMergeWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|specialfields
operator|.
name|SpecialFieldUpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableChangeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableKeyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|CheckBoxMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
operator|.
name|VerticalLabelUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|TypedBibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|autocompleter
operator|.
name|AutoCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|BibEntryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|InvalidFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|EntryBasedFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|ParserResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|WebFetchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|fileformat
operator|.
name|BibtexParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQueryHighlightListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|FieldProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|InternalBibtexFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|FieldChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|identifier
operator|.
name|MathSciNetId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * GUI component that allows editing of the fields of a BibEntry (i.e. the  * one that shows up, when you double click on an entry in the table)  *<p>  * It hosts the tabs (required, general, optional) and the buttons to the left.  *<p>  * EntryEditor also registers itself to the event bus, receiving  * events whenever a field of the entry changes, enabling the text fields to  * update themselves if the change is made from somewhere else.  */
end_comment

begin_class
DECL|class|EntryEditor
specifier|public
class|class
name|EntryEditor
extends|extends
name|JPanel
implements|implements
name|EntryContainer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EntryEditor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * A reference to the entry this object works on.      */
DECL|field|entry
specifier|private
specifier|final
name|BibEntry
name|entry
decl_stmt|;
comment|/**      * The currently displayed type      */
DECL|field|displayedBibEntryType
specifier|private
specifier|final
name|String
name|displayedBibEntryType
decl_stmt|;
comment|/**      * The action concerned with closing the window.      */
DECL|field|closeAction
specifier|private
specifier|final
name|CloseAction
name|closeAction
init|=
operator|new
name|CloseAction
argument_list|()
decl_stmt|;
comment|/**      * The action that deletes the current entry, and closes the editor.      */
DECL|field|deleteAction
specifier|private
specifier|final
name|DeleteAction
name|deleteAction
init|=
operator|new
name|DeleteAction
argument_list|()
decl_stmt|;
comment|/**      * The action for switching to the next entry.      */
DECL|field|nextEntryAction
specifier|private
specifier|final
name|AbstractAction
name|nextEntryAction
init|=
operator|new
name|NextEntryAction
argument_list|()
decl_stmt|;
comment|/**      * The action for switching to the previous entry.      */
DECL|field|prevEntryAction
specifier|private
specifier|final
name|AbstractAction
name|prevEntryAction
init|=
operator|new
name|PrevEntryAction
argument_list|()
decl_stmt|;
comment|/**      * The action concerned with storing a field value.      */
DECL|field|storeFieldAction
specifier|private
specifier|final
name|StoreFieldAction
name|storeFieldAction
init|=
operator|new
name|StoreFieldAction
argument_list|()
decl_stmt|;
comment|/**      * The action for switching to the next tab      */
DECL|field|switchLeftAction
specifier|private
specifier|final
name|SwitchLeftAction
name|switchLeftAction
init|=
operator|new
name|SwitchLeftAction
argument_list|()
decl_stmt|;
comment|/**      * The action for switching to the previous tab      */
DECL|field|switchRightAction
specifier|private
specifier|final
name|SwitchRightAction
name|switchRightAction
init|=
operator|new
name|SwitchRightAction
argument_list|()
decl_stmt|;
comment|/**      * The action which generates a BibTeX key for this entry.      */
DECL|field|generateKeyAction
specifier|private
specifier|final
name|GenerateKeyAction
name|generateKeyAction
init|=
operator|new
name|GenerateKeyAction
argument_list|()
decl_stmt|;
DECL|field|autoLinkAction
specifier|private
specifier|final
name|AutoLinkAction
name|autoLinkAction
init|=
operator|new
name|AutoLinkAction
argument_list|()
decl_stmt|;
DECL|field|writeXmp
specifier|private
specifier|final
name|AbstractAction
name|writeXmp
decl_stmt|;
DECL|field|srcPanel
specifier|private
specifier|final
name|JPanel
name|srcPanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|relatedArticlePanel
specifier|private
specifier|final
name|JPanel
name|relatedArticlePanel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
DECL|field|tabbed
specifier|private
specifier|final
name|JTabbedPane
name|tabbed
init|=
operator|new
name|JTabbedPane
argument_list|()
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|contentSelectors
specifier|private
specifier|final
name|Set
argument_list|<
name|FieldContentSelector
argument_list|>
name|contentSelectors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|tabs
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|tabs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|helpAction
specifier|private
specifier|final
name|HelpAction
name|helpAction
init|=
operator|new
name|HelpAction
argument_list|(
name|HelpFile
operator|.
name|ENTRY_EDITOR
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|HELP
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|undoAction
specifier|private
specifier|final
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
specifier|private
specifier|final
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
DECL|field|tabListener
specifier|private
specifier|final
name|TabListener
name|tabListener
init|=
operator|new
name|TabListener
argument_list|()
decl_stmt|;
DECL|field|searchListeners
specifier|private
specifier|final
name|List
argument_list|<
name|SearchQueryHighlightListener
argument_list|>
name|searchListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// UGLY HACK to have a pointer to the fileListEditor to call autoSetLinks()
DECL|field|fileListEditor
specifier|private
name|FileListEditor
name|fileListEditor
decl_stmt|;
DECL|field|relatedArticlesTab
specifier|private
name|EntryEditorTabRelatedArticles
name|relatedArticlesTab
decl_stmt|;
DECL|field|source
specifier|private
name|JTextArea
name|source
decl_stmt|;
DECL|field|fileAnnotationTab
specifier|private
name|FileAnnotationTab
name|fileAnnotationTab
decl_stmt|;
comment|/**      * This can be set to false to stop the source text area from getting updated. This is used in cases where the      * source couldn't be parsed, and the user is given the option to edit it.      */
DECL|field|updateSource
specifier|private
name|boolean
name|updateSource
init|=
literal|true
decl_stmt|;
comment|/**      * Indicates that we are about to go to the next or previous entry      */
DECL|field|movingToDifferentEntry
specifier|private
name|boolean
name|movingToDifferentEntry
decl_stmt|;
DECL|field|validEntry
specifier|private
name|boolean
name|validEntry
init|=
literal|true
decl_stmt|;
DECL|field|lastFieldAccepted
specifier|private
name|boolean
name|lastFieldAccepted
init|=
literal|true
decl_stmt|;
comment|/**      * This indicates whether the last attempt at parsing the source was successful. It is used to determine whether      * the dialog should close; it should stay open if the user received an error message about the source,      * whatever he or she chose to do about it.      */
DECL|field|lastSourceAccepted
specifier|private
name|boolean
name|lastSourceAccepted
init|=
literal|true
decl_stmt|;
comment|/**      * This is used to prevent double updates after editing source.      */
DECL|field|lastSourceStringAccepted
specifier|private
name|String
name|lastSourceStringAccepted
decl_stmt|;
comment|/**      * The index the source panel has in tabbed.      */
DECL|field|sourceIndex
specifier|private
name|int
name|sourceIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|saveDatabaseAction
specifier|private
name|Action
name|saveDatabaseAction
decl_stmt|;
DECL|method|EntryEditor (JabRefFrame frame, BasePanel panel, BibEntry entry)
specifier|public
name|EntryEditor
parameter_list|(
name|JabRefFrame
name|frame
parameter_list|,
name|BasePanel
name|panel
parameter_list|,
name|BibEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|entry
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|entry
operator|.
name|registerListener
argument_list|(
name|SpecialFieldUpdateListener
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|displayedBibEntryType
operator|=
name|entry
operator|.
name|getType
argument_list|()
expr_stmt|;
name|writeXmp
operator|=
operator|new
name|WriteXMPEntryEditorAction
argument_list|(
name|panel
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|BorderLayout
name|borderLayout
init|=
operator|new
name|BorderLayout
argument_list|()
decl_stmt|;
name|setLayout
argument_list|(
name|borderLayout
argument_list|)
expr_stmt|;
name|setupToolBar
argument_list|()
expr_stmt|;
name|setupFieldPanels
argument_list|()
expr_stmt|;
name|setupSourcePanel
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|tabbed
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addChangeListener
argument_list|(
name|tabListener
argument_list|)
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_SHOW_SOURCE
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|sourceIndex
argument_list|)
expr_stmt|;
block|}
name|updateAllFields
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fileListEditor
operator|.
name|adjustColumnWidth
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSourceString (BibEntry entry, BibDatabaseMode type)
specifier|private
specifier|static
name|String
name|getSourceString
parameter_list|(
name|BibEntry
name|entry
parameter_list|,
name|BibDatabaseMode
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|LatexFieldFormatter
name|formatter
init|=
name|LatexFieldFormatter
operator|.
name|buildIgnoreHashes
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|BibEntryWriter
argument_list|(
name|formatter
argument_list|,
literal|false
argument_list|)
operator|.
name|writeWithoutPrependedNewlines
argument_list|(
name|entry
argument_list|,
name|stringWriter
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|stringWriter
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|setupFieldPanels ()
specifier|private
name|void
name|setupFieldPanels
parameter_list|()
block|{
name|tabbed
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|tabs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|EntryType
name|type
init|=
name|EntryTypes
operator|.
name|getTypeOrDefault
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|this
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
comment|// required fields
name|addRequiredTab
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// optional fields
name|Set
argument_list|<
name|String
argument_list|>
name|deprecatedFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_TEX_TO_LTX
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|usedOptionalFieldsDeprecated
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|deprecatedFields
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|.
name|getOptionalFields
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|type
operator|.
name|getOptionalFields
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|isBiblatexMode
argument_list|()
condition|)
block|{
name|addOptionalTab
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addOptionalTab
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|deprecatedFields
operator|.
name|add
argument_list|(
name|FieldName
operator|.
name|YEAR
argument_list|)
expr_stmt|;
name|deprecatedFields
operator|.
name|add
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|secondaryOptionalFields
init|=
name|type
operator|.
name|getSecondaryOptionalFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|optionalFieldsNotPrimaryOrDeprecated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|secondaryOptionalFields
argument_list|)
decl_stmt|;
name|optionalFieldsNotPrimaryOrDeprecated
operator|.
name|removeAll
argument_list|(
name|deprecatedFields
argument_list|)
expr_stmt|;
comment|// Get list of all optional fields of this entry and their aliases
name|Set
argument_list|<
name|String
argument_list|>
name|optionalFieldsAndAliases
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|type
operator|.
name|getOptionalFields
argument_list|()
control|)
block|{
name|optionalFieldsAndAliases
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_LTX_TO_TEX
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|optionalFieldsAndAliases
operator|.
name|add
argument_list|(
name|EntryConverter
operator|.
name|FIELD_ALIASES_LTX_TO_TEX
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get all optional fields which are deprecated
name|usedOptionalFieldsDeprecated
operator|.
name|retainAll
argument_list|(
name|optionalFieldsAndAliases
argument_list|)
expr_stmt|;
comment|// Get other deprecated fields
name|usedOptionalFieldsDeprecated
operator|.
name|add
argument_list|(
name|FieldName
operator|.
name|MONTH
argument_list|)
expr_stmt|;
comment|// Add tabs
name|EntryEditorTab
name|optPan2
init|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|optionalFieldsNotPrimaryOrDeprecated
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Optional fields 2"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|optPan2
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|fileListEditor
operator|=
name|optPan2
operator|.
name|fileListEditor
expr_stmt|;
block|}
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Optional fields 2"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPTIONAL
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|optPan2
operator|.
name|getPane
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show optional fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optPan2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|usedOptionalFieldsDeprecated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EntryEditorTab
name|optPan3
decl_stmt|;
name|optPan3
operator|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|usedOptionalFieldsDeprecated
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deprecated fields"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optPan3
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|fileListEditor
operator|=
name|optPan3
operator|.
name|fileListEditor
expr_stmt|;
block|}
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deprecated fields"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPTIONAL
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|optPan3
operator|.
name|getPane
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show deprecated BibTeX fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optPan3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// other fields
name|List
argument_list|<
name|String
argument_list|>
name|displayedFields
init|=
name|type
operator|.
name|getAllFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
name|toLowerCase
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|otherFields
init|=
name|entry
operator|.
name|getFieldNames
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
name|toLowerCase
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
operator|!
name|displayedFields
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|usedOptionalFieldsDeprecated
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|otherFields
operator|.
name|removeAll
argument_list|(
name|usedOptionalFieldsDeprecated
argument_list|)
expr_stmt|;
block|}
name|otherFields
operator|.
name|remove
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|)
expr_stmt|;
name|otherFields
operator|.
name|removeAll
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getCustomTabFieldNames
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|otherFields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addOtherTab
argument_list|(
name|otherFields
argument_list|)
expr_stmt|;
block|}
comment|// general fields from preferences
name|addGeneralTabs
argument_list|()
expr_stmt|;
comment|// special tabs (like MathSciNet Reviews)
name|addSpecialTabs
argument_list|()
expr_stmt|;
comment|// pdf annotations tab
name|addPDFAnnotationTab
argument_list|()
expr_stmt|;
comment|//related articles
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOW_RECOMMENDATIONS
argument_list|)
condition|)
block|{
name|addRelatedArticlesTab
argument_list|()
expr_stmt|;
block|}
comment|// source tab
name|addSourceTab
argument_list|()
expr_stmt|;
block|}
DECL|method|addGeneralTabs ()
specifier|private
name|void
name|addGeneralTabs
parameter_list|()
block|{
name|EntryEditorTabList
name|tabList
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getEntryEditorTabList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|EntryEditorTab
name|newTab
init|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|tabList
operator|.
name|getTabFields
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|tabList
operator|.
name|getTabName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newTab
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|fileListEditor
operator|=
name|newTab
operator|.
name|fileListEditor
expr_stmt|;
block|}
name|tabbed
operator|.
name|addTab
argument_list|(
name|tabList
operator|.
name|getTabName
argument_list|(
name|i
argument_list|)
argument_list|,
name|newTab
operator|.
name|getPane
argument_list|()
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|newTab
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSpecialTabs ()
specifier|private
name|void
name|addSpecialTabs
parameter_list|()
block|{
comment|// MathSciNet Review
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|MR_NUMBER
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|mrNumberRaw
lambda|->
block|{
name|MathSciNetId
name|mrNumber
init|=
name|MathSciNetId
operator|.
name|fromString
argument_list|(
name|mrNumberRaw
argument_list|)
decl_stmt|;
name|JFXPanel
name|reviewPane
init|=
operator|new
name|JFXPanel
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"MathSciNet Review"
argument_list|)
argument_list|,
name|reviewPane
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|reviewPane
argument_list|)
expr_stmt|;
comment|// Execute on JavaFX Application Thread
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|StackPane
name|root
init|=
operator|new
name|MathSciNetPaneView
argument_list|(
name|mrNumber
argument_list|)
operator|.
name|getPane
argument_list|()
decl_stmt|;
name|reviewPane
operator|.
name|setScene
argument_list|(
operator|new
name|Scene
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addSourceTab ()
specifier|private
name|void
name|addSourceTab
parameter_list|()
block|{
name|String
name|panelName
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"%0 source"
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|getFormattedName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|toolTip
init|=
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show/edit %0 source"
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
operator|.
name|getFormattedName
argument_list|()
argument_list|)
decl_stmt|;
name|srcPanel
operator|.
name|setName
argument_list|(
name|panelName
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|panelName
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|SOURCE
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|srcPanel
argument_list|,
name|toolTip
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|srcPanel
argument_list|)
expr_stmt|;
name|sourceIndex
operator|=
name|tabs
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|srcPanel
operator|.
name|setFocusCycleRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|addOtherTab (List<String> otherFields)
specifier|private
name|void
name|addOtherTab
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|otherFields
parameter_list|)
block|{
name|EntryEditorTab
name|otherPanel
init|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|otherFields
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Other fields"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherPanel
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|fileListEditor
operator|=
name|otherPanel
operator|.
name|fileListEditor
expr_stmt|;
block|}
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Other fields"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPTIONAL
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|otherPanel
operator|.
name|getPane
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show remaining fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|otherPanel
argument_list|)
expr_stmt|;
block|}
DECL|method|addRequiredTab (EntryType type)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|addRequiredTab
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|requiredFields
init|=
name|type
operator|.
name|getRequiredFieldsFlat
argument_list|()
decl_stmt|;
name|EntryEditorTab
name|requiredPanel
init|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|requiredFields
argument_list|,
name|this
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required fields"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredPanel
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|fileListEditor
operator|=
name|requiredPanel
operator|.
name|fileListEditor
expr_stmt|;
block|}
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Required fields"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REQUIRED
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|requiredPanel
operator|.
name|getPane
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show required fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|requiredPanel
argument_list|)
expr_stmt|;
return|return
name|requiredFields
return|;
block|}
comment|/**      * Creates the related Article Tab      */
DECL|method|addRelatedArticlesTab ()
specifier|private
name|void
name|addRelatedArticlesTab
parameter_list|()
block|{
name|relatedArticlePanel
operator|.
name|setName
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Related articles"
argument_list|)
argument_list|)
expr_stmt|;
name|relatedArticlePanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|relatedArticlesTab
operator|=
operator|new
name|EntryEditorTabRelatedArticles
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|JScrollPane
name|relatedArticleScrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|relatedArticlesTab
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
name|relatedArticlePanel
operator|.
name|add
argument_list|(
name|relatedArticleScrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Related articles"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|getImage
argument_list|(
literal|"mdl"
argument_list|)
argument_list|,
name|relatedArticlePanel
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Related articles"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|relatedArticlePanel
argument_list|)
expr_stmt|;
name|relatedArticlePanel
operator|.
name|setFocusCycleRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|addOptionalTab (EntryType type)
specifier|private
name|void
name|addOptionalTab
parameter_list|(
name|EntryType
name|type
parameter_list|)
block|{
name|EntryEditorTab
name|optionalPanel
init|=
operator|new
name|EntryEditorTab
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|type
operator|.
name|getPrimaryOptionalFields
argument_list|()
argument_list|,
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionalPanel
operator|.
name|fileListEditor
operator|!=
literal|null
condition|)
block|{
name|fileListEditor
operator|=
name|optionalPanel
operator|.
name|fileListEditor
expr_stmt|;
block|}
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Optional fields"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPTIONAL
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|optionalPanel
operator|.
name|getPane
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show optional fields"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|optionalPanel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a tab for displaying comments from a PDF      */
DECL|method|addPDFAnnotationTab ()
specifier|private
name|void
name|addPDFAnnotationTab
parameter_list|()
block|{
name|tabbed
operator|.
name|remove
argument_list|(
name|fileAnnotationTab
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|remove
argument_list|(
name|fileAnnotationTab
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|field
init|=
name|entry
operator|.
name|getField
argument_list|(
name|FieldName
operator|.
name|FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|fileAnnotationTab
operator|=
operator|new
name|FileAnnotationTab
argument_list|(
name|this
argument_list|,
name|panel
operator|.
name|getAnnotationCache
argument_list|()
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|addTab
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"File annotations"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|OPTIONAL
operator|.
name|getSmallIcon
argument_list|()
argument_list|,
name|fileAnnotationTab
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show file annotations"
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|fileAnnotationTab
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDisplayedBibEntryType ()
specifier|public
name|String
name|getDisplayedBibEntryType
parameter_list|()
block|{
return|return
name|displayedBibEntryType
return|;
block|}
comment|/**      * @return reference to the currently edited entry      */
annotation|@
name|Override
DECL|method|getEntry ()
specifier|public
name|BibEntry
name|getEntry
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
DECL|method|getDatabase ()
specifier|public
name|BibDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|panel
operator|.
name|getDatabase
argument_list|()
return|;
block|}
DECL|method|setupToolBar ()
specifier|private
name|void
name|setupToolBar
parameter_list|()
block|{
name|JPanel
name|leftPan
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|leftPan
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|JToolBar
name|toolBar
init|=
operator|new
name|OSXCompatibleToolbar
argument_list|(
name|SwingConstants
operator|.
name|VERTICAL
argument_list|)
decl_stmt|;
name|toolBar
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setRollover
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// The toolbar carries all the key bindings that are valid for the whole window.
name|ActionMap
name|actionMap
init|=
name|toolBar
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|InputMap
name|inputMap
init|=
name|toolBar
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_IN_FOCUSED_WINDOW
argument_list|)
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|CLOSE_ENTRY_EDITOR
argument_list|)
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"close"
argument_list|,
name|closeAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_STORE_FIELD
argument_list|)
argument_list|,
literal|"store"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
name|storeFieldAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|AUTOGENERATE_BIBTEX_KEYS
argument_list|)
argument_list|,
literal|"generateKey"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"generateKey"
argument_list|,
name|generateKeyAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|AUTOMATICALLY_LINK_FILES
argument_list|)
argument_list|,
literal|"autoLink"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"autoLink"
argument_list|,
name|autoLinkAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_PREVIOUS_ENTRY
argument_list|)
argument_list|,
literal|"prev"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"prev"
argument_list|,
name|prevEntryAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_NEXT_ENTRY
argument_list|)
argument_list|,
literal|"next"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"next"
argument_list|,
name|nextEntryAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|UNDO
argument_list|)
argument_list|,
literal|"undo"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"undo"
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|REDO
argument_list|)
argument_list|,
literal|"redo"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"redo"
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|HELP
argument_list|)
argument_list|,
literal|"help"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"help"
argument_list|,
name|helpAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|setFloatable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Add actions (and thus buttons)
name|JButton
name|closeBut
init|=
operator|new
name|JButton
argument_list|(
name|closeAction
argument_list|)
decl_stmt|;
name|closeBut
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|closeBut
operator|.
name|setBorder
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|closeBut
operator|.
name|setMargin
argument_list|(
operator|new
name|Insets
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|leftPan
operator|.
name|add
argument_list|(
name|closeBut
argument_list|,
name|BorderLayout
operator|.
name|NORTH
argument_list|)
expr_stmt|;
comment|// Create type-label
name|TypedBibEntry
name|typedEntry
init|=
operator|new
name|TypedBibEntry
argument_list|(
name|entry
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|leftPan
operator|.
name|add
argument_list|(
operator|new
name|TypeLabel
argument_list|(
name|typedEntry
operator|.
name|getTypeForDisplay
argument_list|()
argument_list|)
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|TypeButton
name|typeButton
init|=
operator|new
name|TypeButton
argument_list|()
decl_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|typeButton
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|generateKeyAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|autoLinkAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|writeXmp
argument_list|)
expr_stmt|;
name|JPopupMenu
name|fetcherPopup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|EntryBasedFetcher
name|fetcher
range|:
name|WebFetchers
operator|.
name|getEntryBasedFetchers
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
control|)
block|{
name|fetcherPopup
operator|.
name|add
argument_list|(
operator|new
name|JMenuItem
argument_list|(
operator|new
name|AbstractAction
argument_list|(
name|fetcher
operator|.
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
operator|new
name|EntryFetchAndMergeWorker
argument_list|(
name|panel
argument_list|,
name|getEntry
argument_list|()
argument_list|,
name|fetcher
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|JButton
name|fetcherButton
init|=
operator|new
name|JButton
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REFRESH
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
name|fetcherButton
operator|.
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Update with bibliographic information from the web"
argument_list|)
argument_list|)
expr_stmt|;
name|fetcherButton
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mousePressed
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
name|fetcherPopup
operator|.
name|show
argument_list|(
name|e
operator|.
name|getComponent
argument_list|()
argument_list|,
name|e
operator|.
name|getX
argument_list|()
argument_list|,
name|e
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|fetcherButton
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|prevEntryAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|nextEntryAction
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|toolBar
operator|.
name|add
argument_list|(
name|helpAction
argument_list|)
expr_stmt|;
name|Component
index|[]
name|comps
init|=
name|toolBar
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|Component
name|comp
range|:
name|comps
control|)
block|{
operator|(
operator|(
name|JComponent
operator|)
name|comp
operator|)
operator|.
name|setOpaque
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|leftPan
operator|.
name|add
argument_list|(
name|toolBar
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|leftPan
argument_list|,
name|BorderLayout
operator|.
name|WEST
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rebuild the field tabs. This is called e.g. when a new content selector      * has been added.      */
DECL|method|rebuildPanels ()
specifier|public
name|void
name|rebuildPanels
parameter_list|()
block|{
comment|// Remove change listener, because the rebuilding causes meaningless
comment|// events and trouble:
name|tabbed
operator|.
name|removeChangeListener
argument_list|(
name|tabListener
argument_list|)
expr_stmt|;
name|setupFieldPanels
argument_list|()
expr_stmt|;
comment|// Add the change listener again:
name|tabbed
operator|.
name|addChangeListener
argument_list|(
name|tabListener
argument_list|)
expr_stmt|;
name|revalidate
argument_list|()
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
block|}
comment|/**      * getExtra checks the field name against InternalBibtexFields.getFieldExtras(name).      * If the name has an entry, the proper component to be shown is created and      * returned. Otherwise, null is returned. In addition, e.g. listeners can be      * added to the field editor, even if no component is returned.      *      * @param editor Field editor      * @return Component to show, or null if none.      */
DECL|method|getExtra (final FieldEditor editor)
specifier|public
name|Optional
argument_list|<
name|JComponent
argument_list|>
name|getExtra
parameter_list|(
specifier|final
name|FieldEditor
name|editor
parameter_list|)
block|{
specifier|final
name|String
name|fieldName
init|=
name|editor
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|FieldProperty
argument_list|>
name|fieldExtras
init|=
name|InternalBibtexFields
operator|.
name|getFieldProperties
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// timestamp or a other field with datepicker command
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TIME_STAMP_FIELD
argument_list|)
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
operator|||
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|DATE
argument_list|)
condition|)
block|{
comment|// double click AND datefield => insert the current date (today)
return|return
name|FieldExtraComponents
operator|.
name|getDateTimeExtraComponent
argument_list|(
name|editor
argument_list|,
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|DATE
argument_list|)
argument_list|,
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|ISO_DATE
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|EXTERNAL
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getExternalExtraComponent
argument_list|(
name|panel
argument_list|,
name|editor
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|JOURNAL_NAME
argument_list|)
condition|)
block|{
comment|// Add controls for switching between abbreviated and full journal names.
comment|// If this field also has a FieldContentSelector, we need to combine these.
return|return
name|FieldExtraComponents
operator|.
name|getJournalExtraComponent
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|editor
argument_list|,
name|entry
argument_list|,
name|contentSelectors
argument_list|,
name|storeFieldAction
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getContentSelectorValuesForField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getSelectorExtraComponent
argument_list|(
name|frame
argument_list|,
name|panel
argument_list|,
name|editor
argument_list|,
name|contentSelectors
argument_list|,
name|storeFieldAction
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|DOI
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getDoiExtraComponent
argument_list|(
name|panel
argument_list|,
name|this
argument_list|,
name|editor
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|EPRINT
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getEprintExtraComponent
argument_list|(
name|panel
argument_list|,
name|this
argument_list|,
name|editor
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|ISBN
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getIsbnExtraComponent
argument_list|(
name|panel
argument_list|,
name|this
argument_list|,
name|editor
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|OWNER
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getSetOwnerExtraComponent
argument_list|(
name|editor
argument_list|,
name|storeFieldAction
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|YES_NO
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getYesNoExtraComponent
argument_list|(
name|editor
argument_list|,
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|MONTH
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getMonthExtraComponent
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|GENDER
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getGenderExtraComponent
argument_list|(
name|editor
argument_list|,
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|EDITOR_TYPE
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getEditorTypeExtraComponent
argument_list|(
name|editor
argument_list|,
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|PAGINATION
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getPaginationExtraComponent
argument_list|(
name|editor
argument_list|,
name|this
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fieldExtras
operator|.
name|contains
argument_list|(
name|FieldProperty
operator|.
name|TYPE
argument_list|)
condition|)
block|{
return|return
name|FieldExtraComponents
operator|.
name|getTypeExtraComponent
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
literal|"patent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|method|setupSourcePanel ()
specifier|private
name|void
name|setupSourcePanel
parameter_list|()
block|{
name|source
operator|=
operator|new
name|JTextAreaWithHighlighting
argument_list|()
expr_stmt|;
name|addSearchListener
argument_list|(
operator|(
name|SearchQueryHighlightListener
operator|)
name|source
argument_list|)
expr_stmt|;
name|source
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|setLineWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|source
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FieldEditorFocusListener
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add the global focus listener, so a menu item can see if this field was focused when an action was called.
name|source
operator|.
name|addFocusListener
argument_list|(
name|Globals
operator|.
name|getFocusListener
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|.
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"Monospaced"
argument_list|,
name|Font
operator|.
name|PLAIN
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getInt
argument_list|(
name|JabRefPreferences
operator|.
name|FONT_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setupJTextComponent
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|source
argument_list|,
name|ScrollPaneConstants
operator|.
name|VERTICAL_SCROLLBAR_AS_NEEDED
argument_list|,
name|ScrollPaneConstants
operator|.
name|HORIZONTAL_SCROLLBAR_NEVER
argument_list|)
decl_stmt|;
name|srcPanel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
name|srcPanel
operator|.
name|add
argument_list|(
name|scrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
DECL|method|addSearchListener (SearchQueryHighlightListener listener)
name|void
name|addSearchListener
parameter_list|(
name|SearchQueryHighlightListener
name|listener
parameter_list|)
block|{
name|searchListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSearchListeners ()
specifier|private
name|void
name|removeSearchListeners
parameter_list|()
block|{
for|for
control|(
name|SearchQueryHighlightListener
name|listener
range|:
name|searchListeners
control|)
block|{
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|removeSearchListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateSource ()
specifier|public
name|void
name|updateSource
parameter_list|()
block|{
if|if
condition|(
name|updateSource
condition|)
block|{
try|try
block|{
name|String
name|srcString
init|=
name|getSourceString
argument_list|(
name|entry
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|source
operator|.
name|setText
argument_list|(
name|srcString
argument_list|)
expr_stmt|;
name|lastSourceStringAccepted
operator|=
name|srcString
expr_stmt|;
comment|// Set the current Entry to be selected.
comment|// Fixes the bug of losing selection after, e.g. an autogeneration of a BibTeX key.
comment|// This is also important for the "select all"-action (else it will always select the first entry except it is already)
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|ensureVisible
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|source
operator|.
name|setText
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Correct the entry, and reopen editor to display/edit source."
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect entry"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * NOTE: This method is only used for the source panel, not for the      * other tabs. Look at EntryEditorTab for the setup of text components      * in the other tabs.      */
DECL|method|setupJTextComponent (JTextComponent textComponent)
specifier|private
name|void
name|setupJTextComponent
parameter_list|(
name|JTextComponent
name|textComponent
parameter_list|)
block|{
comment|// Set up key bindings and focus listener for the FieldEditor.
name|InputMap
name|inputMap
init|=
name|textComponent
operator|.
name|getInputMap
argument_list|(
name|JComponent
operator|.
name|WHEN_FOCUSED
argument_list|)
decl_stmt|;
name|ActionMap
name|actionMap
init|=
name|textComponent
operator|.
name|getActionMap
argument_list|()
decl_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_STORE_FIELD
argument_list|)
argument_list|,
literal|"store"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"store"
argument_list|,
name|storeFieldAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_NEXT_PANEL
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_NEXT_PANEL_2
argument_list|)
argument_list|,
literal|"right"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"right"
argument_list|,
name|switchRightAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_PREVIOUS_PANEL
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|ENTRY_EDITOR_PREVIOUS_PANEL_2
argument_list|)
argument_list|,
literal|"left"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"left"
argument_list|,
name|switchLeftAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|HELP
argument_list|)
argument_list|,
literal|"help"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"help"
argument_list|,
name|helpAction
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|NEXT_TAB
argument_list|)
argument_list|,
literal|"nexttab"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"nexttab"
argument_list|,
name|frame
operator|.
name|nextTab
argument_list|)
expr_stmt|;
name|inputMap
operator|.
name|put
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|getKey
argument_list|(
name|KeyBinding
operator|.
name|PREVIOUS_TAB
argument_list|)
argument_list|,
literal|"prevtab"
argument_list|)
expr_stmt|;
name|actionMap
operator|.
name|put
argument_list|(
literal|"prevtab"
argument_list|,
name|frame
operator|.
name|prevTab
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AWTKeyStroke
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|textComponent
operator|.
name|getFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|FORWARD_TRAVERSAL_KEYS
argument_list|)
argument_list|)
decl_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|AWTKeyStroke
operator|.
name|getAWTKeyStroke
argument_list|(
literal|"pressed TAB"
argument_list|)
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|setFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|FORWARD_TRAVERSAL_KEYS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|keys
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|textComponent
operator|.
name|getFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|BACKWARD_TRAVERSAL_KEYS
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
literal|"shift pressed TAB"
argument_list|)
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|setFocusTraversalKeys
argument_list|(
name|KeyboardFocusManager
operator|.
name|BACKWARD_TRAVERSAL_KEYS
argument_list|,
name|keys
argument_list|)
expr_stmt|;
name|textComponent
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FieldListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|requestFocus ()
specifier|public
name|void
name|requestFocus
parameter_list|()
block|{
name|activateVisible
argument_list|()
expr_stmt|;
block|}
DECL|method|activateVisible ()
specifier|private
name|void
name|activateVisible
parameter_list|()
block|{
name|Object
name|activeTab
init|=
name|tabs
operator|.
name|get
argument_list|(
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeTab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|activeTab
operator|)
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|activeTab
operator|instanceof
name|FileAnnotationTab
condition|)
block|{
operator|(
operator|(
name|FileAnnotationTab
operator|)
name|activeTab
operator|)
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|source
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Reports the enabled status of the editor, as set by setEnabled()      */
annotation|@
name|Override
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|source
operator|.
name|isEnabled
argument_list|()
return|;
block|}
comment|/**      * Sets the enabled status of all text fields of the entry editor.      */
annotation|@
name|Override
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|Object
name|tab
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|tab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|tab
operator|)
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
name|source
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
comment|/**      * Makes sure the current edit is stored.      */
DECL|method|storeCurrentEdit ()
specifier|public
name|void
name|storeCurrentEdit
parameter_list|()
block|{
name|Component
name|comp
init|=
name|Globals
operator|.
name|getFocusListener
argument_list|()
operator|.
name|getFocused
argument_list|()
decl_stmt|;
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|comp
argument_list|,
name|source
argument_list|)
operator|||
operator|(
operator|(
name|comp
operator|instanceof
name|FieldEditor
operator|)
operator|&&
name|this
operator|.
name|isAncestorOf
argument_list|(
name|comp
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|comp
operator|instanceof
name|FieldEditor
condition|)
block|{
operator|(
operator|(
name|FieldEditor
operator|)
name|comp
operator|)
operator|.
name|clearAutoCompleteSuggestion
argument_list|()
expr_stmt|;
block|}
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|comp
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the name of the currently selected component.      */
DECL|method|getVisiblePanelName ()
specifier|public
name|String
name|getVisiblePanelName
parameter_list|()
block|{
return|return
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|setVisiblePanel (String name)
specifier|public
name|void
name|setVisiblePanel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabbed
operator|.
name|getTabCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|tabbed
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
name|tabbed
operator|.
name|getComponent
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setFocusToField (String fieldName)
specifier|public
name|void
name|setFocusToField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Object
name|tab
range|:
name|tabs
control|)
block|{
if|if
condition|(
operator|(
name|tab
operator|instanceof
name|EntryEditorTab
operator|)
operator|&&
operator|(
operator|(
name|EntryEditorTab
operator|)
name|tab
operator|)
operator|.
name|getFields
argument_list|()
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|EntryEditorTab
name|entryEditorTab
init|=
operator|(
name|EntryEditorTab
operator|)
name|tab
decl_stmt|;
name|setVisiblePanel
argument_list|(
name|entryEditorTab
operator|.
name|getTabTitle
argument_list|()
argument_list|)
expr_stmt|;
name|entryEditorTab
operator|.
name|setActive
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|entryEditorTab
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|storeSource ()
specifier|private
name|boolean
name|storeSource
parameter_list|()
block|{
name|BibtexParser
name|bibtexParser
init|=
operator|new
name|BibtexParser
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ParserResult
name|parserResult
init|=
name|bibtexParser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|source
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BibDatabase
name|database
init|=
name|parserResult
operator|.
name|getDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|database
operator|.
name|getEntryCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"More than one entry found."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|database
operator|.
name|hasEntries
argument_list|()
condition|)
block|{
if|if
condition|(
name|parserResult
operator|.
name|hasWarnings
argument_list|()
condition|)
block|{
comment|// put the warning into as exception text -> it will be displayed to the user
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|parserResult
operator|.
name|warnings
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No entries found."
argument_list|)
throw|;
block|}
block|}
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"source edit"
argument_list|)
argument_list|)
decl_stmt|;
name|BibEntry
name|newEntry
init|=
name|database
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|newKey
init|=
name|newEntry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|entryChanged
init|=
literal|false
decl_stmt|;
name|boolean
name|emptyWarning
init|=
operator|(
name|newKey
operator|==
literal|null
operator|)
operator|||
name|newKey
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|newKey
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|clearCiteKey
argument_list|()
expr_stmt|;
block|}
comment|// First, remove fields that the user has removed.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|entry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|fieldValue
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|InternalBibtexFields
operator|.
name|isDisplayableField
argument_list|(
name|fieldName
argument_list|)
operator|&&
operator|!
name|newEntry
operator|.
name|hasField
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|entryChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Then set all fields that have been set by the user.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|field
range|:
name|newEntry
operator|.
name|getFieldMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
condition|)
block|{
comment|// Test if the field is legally set.
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|newValue
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fieldName
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|fieldName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|entryChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// See if the user has changed the entry type:
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableChangeType
argument_list|(
name|entry
argument_list|,
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setType
argument_list|(
name|newEntry
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|entryChanged
operator|=
literal|true
expr_stmt|;
block|}
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|entryChanged
condition|)
block|{
return|return
literal|true
return|;
block|}
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|isDuplicateCiteKeyExisting
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|warnDuplicateBibtexkey
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|emptyWarning
condition|)
block|{
name|warnEmptyBibtexkey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Stored entry"
argument_list|)
operator|+
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|lastSourceStringAccepted
operator|=
name|source
operator|.
name|getText
argument_list|()
expr_stmt|;
comment|// Update UI
comment|// TODO: we need to repaint the entryeditor if fields that are not displayed have been added
name|panel
operator|.
name|updateEntryEditorIfShowing
argument_list|()
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|true
expr_stmt|;
name|updateSource
operator|=
literal|true
expr_stmt|;
comment|// TODO: does updating work properly after source stored?
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|highlightEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InvalidFieldValueException
decl||
name|IOException
name|ex
parameter_list|)
block|{
comment|// The source couldn't be parsed, so the user is given an
comment|// error message, and the choice to keep or revert the contents
comment|// of the source text field.
name|updateSource
operator|=
literal|false
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|false
expr_stmt|;
name|tabbed
operator|.
name|setSelectedComponent
argument_list|(
name|srcPanel
argument_list|)
expr_stmt|;
name|Object
index|[]
name|options
init|=
block|{
name|Localization
operator|.
name|lang
argument_list|(
literal|"Edit"
argument_list|)
block|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Revert to original source"
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showOptionDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Problem with parsing entry"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|options
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|0
condition|)
block|{
name|updateSource
operator|=
literal|true
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|true
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Incorrect source"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|setField (String fieldName, String newFieldData)
specifier|private
name|void
name|setField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|newFieldData
parameter_list|)
block|{
for|for
control|(
name|Object
name|tab
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|tab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|tab
operator|)
operator|.
name|updateField
argument_list|(
name|fieldName
argument_list|,
name|newFieldData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets all the text areas according to the shown entry.      */
DECL|method|updateAllFields ()
specifier|public
name|void
name|updateAllFields
parameter_list|()
block|{
for|for
control|(
name|Object
name|tab
range|:
name|tabs
control|)
block|{
if|if
condition|(
name|tab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|tab
operator|)
operator|.
name|setEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateAllContentSelectors ()
specifier|public
name|void
name|updateAllContentSelectors
parameter_list|()
block|{
if|if
condition|(
operator|!
name|contentSelectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|FieldContentSelector
name|contentSelector
range|:
name|contentSelectors
control|)
block|{
name|contentSelector
operator|.
name|rebuildComboBox
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Update the JTextArea when a field has changed.      */
annotation|@
name|Subscribe
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|listen (FieldChangedEvent fieldChangedEvent)
specifier|public
name|void
name|listen
parameter_list|(
name|FieldChangedEvent
name|fieldChangedEvent
parameter_list|)
block|{
name|String
name|newValue
init|=
name|fieldChangedEvent
operator|.
name|getNewValue
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|fieldChangedEvent
operator|.
name|getNewValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|setField
argument_list|(
name|fieldChangedEvent
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|setField
argument_list|(
name|fieldChangedEvent
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateField (final Object sourceObject)
specifier|public
name|void
name|updateField
parameter_list|(
specifier|final
name|Object
name|sourceObject
parameter_list|)
block|{
name|storeFieldAction
operator|.
name|actionPerformed
argument_list|(
operator|new
name|ActionEvent
argument_list|(
name|sourceObject
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setMovingToDifferentEntry ()
specifier|public
name|void
name|setMovingToDifferentEntry
parameter_list|()
block|{
name|movingToDifferentEntry
operator|=
literal|true
expr_stmt|;
name|unregisterListeners
argument_list|()
expr_stmt|;
block|}
DECL|method|unregisterListeners ()
specifier|private
name|void
name|unregisterListeners
parameter_list|()
block|{
name|entry
operator|.
name|unregisterListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|removeSearchListeners
argument_list|()
expr_stmt|;
block|}
DECL|method|getGenerateKeyAction ()
specifier|public
name|GenerateKeyAction
name|getGenerateKeyAction
parameter_list|()
block|{
return|return
name|generateKeyAction
return|;
block|}
DECL|method|getPrevEntryAction ()
specifier|public
name|AbstractAction
name|getPrevEntryAction
parameter_list|()
block|{
return|return
name|prevEntryAction
return|;
block|}
DECL|method|getNextEntryAction ()
specifier|public
name|AbstractAction
name|getNextEntryAction
parameter_list|()
block|{
return|return
name|nextEntryAction
return|;
block|}
DECL|method|getStoreFieldAction ()
specifier|public
name|StoreFieldAction
name|getStoreFieldAction
parameter_list|()
block|{
return|return
name|storeFieldAction
return|;
block|}
DECL|method|getSwitchLeftAction ()
specifier|public
name|SwitchLeftAction
name|getSwitchLeftAction
parameter_list|()
block|{
return|return
name|switchLeftAction
return|;
block|}
DECL|method|getSwitchRightAction ()
specifier|public
name|SwitchRightAction
name|getSwitchRightAction
parameter_list|()
block|{
return|return
name|switchRightAction
return|;
block|}
DECL|method|getHelpAction ()
specifier|public
name|HelpAction
name|getHelpAction
parameter_list|()
block|{
return|return
name|helpAction
return|;
block|}
DECL|method|getSaveDatabaseAction ()
specifier|public
name|Action
name|getSaveDatabaseAction
parameter_list|()
block|{
return|return
name|saveDatabaseAction
return|;
block|}
DECL|method|showChangeEntryTypePopupMenu ()
specifier|private
name|void
name|showChangeEntryTypePopupMenu
parameter_list|()
block|{
name|JPopupMenu
name|typeMenu
init|=
operator|new
name|ChangeEntryTypeMenu
argument_list|()
operator|.
name|getChangeentryTypePopupMenu
argument_list|(
name|panel
argument_list|)
decl_stmt|;
name|typeMenu
operator|.
name|show
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|tabbed
operator|.
name|getSelectedComponent
argument_list|()
operator|==
name|srcPanel
condition|)
block|{
name|updateField
argument_list|(
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSourceAccepted
condition|)
block|{
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|)
expr_stmt|;
name|lastSourceAccepted
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|lastFieldAccepted
condition|)
block|{
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|)
expr_stmt|;
name|lastFieldAccepted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|warnDuplicateBibtexkey ()
specifier|private
name|void
name|warnDuplicateBibtexkey
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Duplicate BibTeX key"
argument_list|)
operator|+
literal|". "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Grouping may not work for this entry."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|warnEmptyBibtexkey ()
specifier|private
name|void
name|warnEmptyBibtexkey
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Empty BibTeX key"
argument_list|)
operator|+
literal|". "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Grouping may not work for this entry."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateTimeStampIsSet ()
specifier|private
name|boolean
name|updateTimeStampIsSet
parameter_list|()
block|{
return|return
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_TIME_STAMP
argument_list|)
operator|&&
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|UPDATE_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**      * Updates the timestamp of the given entry and returns the FieldChange      */
DECL|method|doUpdateTimeStamp ()
specifier|private
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|doUpdateTimeStamp
parameter_list|()
block|{
name|String
name|timeStampField
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TIME_STAMP_FIELD
argument_list|)
decl_stmt|;
name|String
name|timeStampFormat
init|=
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|TIME_STAMP_FORMAT
argument_list|)
decl_stmt|;
name|String
name|timestamp
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
name|timeStampFormat
argument_list|)
operator|.
name|format
argument_list|(
name|LocalDateTime
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
name|timeStampField
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
DECL|class|TypeButton
specifier|private
class|class
name|TypeButton
extends|extends
name|JButton
block|{
DECL|method|TypeButton ()
specifier|private
name|TypeButton
parameter_list|()
block|{
name|super
argument_list|(
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|EDIT
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|setToolTipText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Change entry type"
argument_list|)
argument_list|)
expr_stmt|;
name|addActionListener
argument_list|(
name|e
lambda|->
name|showChangeEntryTypePopupMenu
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TypeLabel
specifier|private
class|class
name|TypeLabel
extends|extends
name|JLabel
block|{
DECL|method|TypeLabel (String type)
specifier|private
name|TypeLabel
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|setUI
argument_list|(
operator|new
name|VerticalLabelUI
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|setForeground
argument_list|(
name|GUIGlobals
operator|.
name|ENTRY_EDITOR_LABEL_COLOR
argument_list|)
expr_stmt|;
name|setHorizontalAlignment
argument_list|(
name|SwingConstants
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|setFont
argument_list|(
operator|new
name|Font
argument_list|(
literal|"dialog"
argument_list|,
name|Font
operator|.
name|ITALIC
operator|+
name|Font
operator|.
name|BOLD
argument_list|,
literal|18
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a mouse listener so the user can right-click the type label to change the entry type:
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mouseReleased
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
operator|||
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
operator|)
condition|)
block|{
name|handleTypeChange
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|isPopupTrigger
argument_list|()
operator|||
operator|(
name|e
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON3
operator|)
condition|)
block|{
name|handleTypeChange
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleTypeChange
parameter_list|()
block|{
name|showChangeEntryTypePopupMenu
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|paintComponent (Graphics g)
specifier|public
name|void
name|paintComponent
parameter_list|(
name|Graphics
name|g
parameter_list|)
block|{
name|Graphics2D
name|g2
init|=
operator|(
name|Graphics2D
operator|)
name|g
decl_stmt|;
name|g2
operator|.
name|setRenderingHint
argument_list|(
name|RenderingHints
operator|.
name|KEY_ANTIALIASING
argument_list|,
name|RenderingHints
operator|.
name|VALUE_ANTIALIAS_ON
argument_list|)
expr_stmt|;
name|super
operator|.
name|paintComponent
argument_list|(
name|g2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Focus listener that fires the storeFieldAction when a TextArea loses focus.      */
DECL|class|FieldListener
specifier|private
class|class
name|FieldListener
extends|extends
name|FocusAdapter
block|{
annotation|@
name|Override
DECL|method|focusLost (FocusEvent event)
specifier|public
name|void
name|focusLost
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|updateField
argument_list|(
name|event
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TabListener
specifier|private
class|class
name|TabListener
implements|implements
name|ChangeListener
block|{
annotation|@
name|Override
DECL|method|stateChanged (ChangeEvent event)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
comment|// We tell the editor tab to update all its fields. This makes sure they are updated even if the tab we
comment|// just left contained one or more of the same fields as this one:
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|Object
name|activeTab
init|=
name|tabs
operator|.
name|get
argument_list|(
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|activeTab
operator|instanceof
name|FileAnnotationTab
operator|)
operator|&&
operator|!
operator|(
operator|(
name|FileAnnotationTab
operator|)
name|activeTab
operator|)
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
comment|//Initialize by getting notes from cache if they are cached
name|FileAnnotationTab
name|tab
init|=
operator|(
name|FileAnnotationTab
operator|)
name|activeTab
decl_stmt|;
name|tab
operator|.
name|initializeTab
argument_list|(
name|tab
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|activeTab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
operator|(
operator|(
name|EntryEditorTab
operator|)
name|activeTab
operator|)
operator|.
name|updateAll
argument_list|()
expr_stmt|;
name|activateVisible
argument_list|()
expr_stmt|;
block|}
comment|// When the tab "Related articles" gets selected, the request to get the recommendations is started.
if|if
condition|(
name|activeTab
operator|==
name|relatedArticlePanel
condition|)
block|{
name|relatedArticlesTab
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|DeleteAction
specifier|private
class|class
name|DeleteAction
extends|extends
name|AbstractAction
block|{
DECL|method|DeleteAction ()
specifier|private
name|DeleteAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DELETE_ENTRY
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Show confirmation dialog if not disabled:
name|boolean
name|goOn
init|=
name|panel
operator|.
name|showDeleteConfirmationDialog
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|goOn
condition|)
block|{
return|return;
block|}
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deleted entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CloseAction
specifier|private
class|class
name|CloseAction
extends|extends
name|AbstractAction
block|{
DECL|method|CloseAction ()
specifier|private
name|CloseAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|CLOSE
operator|.
name|getSmallIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Close window"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|StoreFieldAction
specifier|public
class|class
name|StoreFieldAction
extends|extends
name|AbstractAction
block|{
DECL|method|StoreFieldAction ()
specifier|public
name|StoreFieldAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Store field value"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
literal|"Store field value"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|boolean
name|movingAway
init|=
name|movingToDifferentEntry
decl_stmt|;
name|movingToDifferentEntry
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getSource
argument_list|()
operator|instanceof
name|TextField
condition|)
block|{
comment|// Storage from bibtex key field.
name|TextField
name|textField
init|=
operator|(
name|TextField
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|textField
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|newValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newValue
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
name|Objects
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
operator|)
condition|)
block|{
return|return;
comment|// No change.
block|}
comment|// Make sure the key is legal:
name|String
name|cleaned
init|=
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|newValue
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ENFORCE_LEGAL_BIBTEX_KEY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cleaned
operator|==
literal|null
operator|)
operator|||
name|cleaned
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|textField
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lastFieldAccepted
operator|=
literal|false
expr_stmt|;
name|textField
operator|.
name|setInvalidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Invalid BibTeX key"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error setting field"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|requestFocus
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearCiteKey
argument_list|()
expr_stmt|;
name|warnEmptyBibtexkey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|boolean
name|isDuplicate
init|=
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|isDuplicateCiteKeyExisting
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDuplicate
condition|)
block|{
name|warnDuplicateBibtexkey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibTeX key is unique."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add an UndoableKeyChange to the baseframe's undoManager.
name|UndoableKeyChange
name|undoableKeyChange
init|=
operator|new
name|UndoableKeyChange
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateTimeStampIsSet
argument_list|()
condition|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|undoableKeyChange
operator|.
name|getPresentationName
argument_list|()
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
name|undoableKeyChange
argument_list|)
expr_stmt|;
name|doUpdateTimeStamp
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|fieldChange
lambda|->
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|fieldChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoableKeyChange
argument_list|)
expr_stmt|;
block|}
name|textField
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
name|textField
operator|.
name|getTextComponent
argument_list|()
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
name|textField
operator|.
name|setActiveBackgroundColor
argument_list|()
expr_stmt|;
block|}
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldEditor
condition|)
block|{
name|String
name|toSet
init|=
literal|null
decl_stmt|;
name|FieldEditor
name|fieldEditor
init|=
operator|(
name|FieldEditor
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|boolean
name|set
decl_stmt|;
comment|// Trim the whitespace off this value
name|String
name|currentText
init|=
name|fieldEditor
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toSet
operator|=
name|currentText
expr_stmt|;
block|}
comment|// We check if the field has changed, since we don't want to
comment|// mark the base as changed unless we have a real change.
if|if
condition|(
name|toSet
operator|==
literal|null
condition|)
block|{
name|set
operator|=
name|entry
operator|.
name|hasField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|!
operator|(
operator|(
name|entry
operator|.
name|hasField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|)
operator|&&
name|toSet
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|set
condition|)
block|{
comment|// We set the field and label color.
name|fieldEditor
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// The following statement attempts to write the new contents into a StringWriter, and this will
comment|// cause an IOException if the field is not properly formatted. If that happens, the field
comment|// is not stored and the textarea turns red.
if|if
condition|(
name|toSet
operator|!=
literal|null
condition|)
block|{
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|toSet
argument_list|,
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSet
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|toSet
argument_list|)
expr_stmt|;
block|}
name|fieldEditor
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
comment|// See if we need to update an AutoCompleter instance:
name|AutoCompleter
argument_list|<
name|String
argument_list|>
name|aComp
init|=
name|panel
operator|.
name|getAutoCompleters
argument_list|()
operator|.
name|get
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|aComp
operator|!=
literal|null
condition|)
block|{
name|aComp
operator|.
name|addBibtexEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// Add an UndoableFieldChange to the baseframe's undoManager.
name|UndoableFieldChange
name|undoableFieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|oldValue
argument_list|,
name|toSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateTimeStampIsSet
argument_list|()
condition|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|undoableFieldChange
operator|.
name|getPresentationName
argument_list|()
argument_list|)
decl_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
name|undoableFieldChange
argument_list|)
expr_stmt|;
name|doUpdateTimeStamp
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|fieldChange
lambda|->
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|fieldChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoableFieldChange
argument_list|)
expr_stmt|;
block|}
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFieldValueException
name|ex
parameter_list|)
block|{
name|lastFieldAccepted
operator|=
literal|false
expr_stmt|;
name|fieldEditor
operator|.
name|setInvalidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error setting field"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Error setting field"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fieldEditor
operator|.
name|getTextComponent
argument_list|()
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
name|fieldEditor
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|ACTIVE_EDITOR_COLOR
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|isEditable
argument_list|()
operator|&&
operator|!
name|source
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSourceStringAccepted
argument_list|)
condition|)
block|{
name|validEntry
operator|=
name|storeSource
argument_list|()
expr_stmt|;
block|}
comment|// Make sure we scroll to the entry if it moved in the table.
comment|// Should only be done if this editor is currently showing:
comment|// don't select the current entry again (eg use BasePanel#highlightEntry} in case another entry was selected)
if|if
condition|(
operator|!
name|movingAway
operator|&&
name|isShowing
argument_list|()
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|ensureVisible
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SwitchLeftAction
specifier|private
class|class
name|SwitchLeftAction
extends|extends
name|AbstractAction
block|{
DECL|method|SwitchLeftAction ()
specifier|private
name|SwitchLeftAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Switch to the panel to the left"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
operator|>
literal|0
condition|?
name|i
operator|-
literal|1
else|:
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|activateVisible
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|SwitchRightAction
specifier|private
class|class
name|SwitchRightAction
extends|extends
name|AbstractAction
block|{
DECL|method|SwitchRightAction ()
specifier|private
name|SwitchRightAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Switch to the panel to the right"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|int
name|i
init|=
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|tabbed
operator|.
name|setSelectedIndex
argument_list|(
name|i
operator|<
operator|(
name|tabbed
operator|.
name|getTabCount
argument_list|()
operator|-
literal|1
operator|)
condition|?
name|i
operator|+
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|activateVisible
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NextEntryAction
specifier|private
class|class
name|NextEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|NextEntryAction ()
specifier|private
name|NextEntryAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Next entry"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|DOWN
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Next entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|selectNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|PrevEntryAction
specifier|private
class|class
name|PrevEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|PrevEntryAction ()
specifier|private
name|PrevEntryAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Previous entry"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UP
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Previous entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|selectPreviousEntry
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|GenerateKeyAction
specifier|private
class|class
name|GenerateKeyAction
extends|extends
name|AbstractAction
block|{
DECL|method|GenerateKeyAction ()
specifier|private
name|GenerateKeyAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate BibTeX key"
argument_list|)
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|MAKE_KEY
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate BibTeX key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// 1. get BibEntry for selected index (already have)
comment|// 2. update label
comment|// Store the current edit in case this action is called during the editing of a field:
name|storeCurrentEdit
argument_list|()
expr_stmt|;
comment|// This is a partial clone of org.jabref.gui.BasePanel.setupActions().new AbstractWorker() {...}.run()
comment|// this updates the table automatically, on close, but not within the tab
name|Optional
argument_list|<
name|String
argument_list|>
name|oldValue
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AVOID_OVERWRITING_KEY
argument_list|)
condition|)
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Not overwriting existing key. To change this setting, open Options -> Prefererences -> BibTeX key generator"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|)
condition|)
block|{
name|CheckBoxMessage
name|cbm
init|=
operator|new
name|CheckBoxMessage
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"The current BibTeX key will be overwritten. Continue?"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Disable this confirmation dialog"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|answer
init|=
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|frame
argument_list|,
name|cbm
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Overwrite key"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbm
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
name|JOptionPane
operator|.
name|NO_OPTION
condition|)
block|{
comment|// Ok, break off the operation.
return|return;
block|}
block|}
block|}
name|BibtexKeyPatternUtil
operator|.
name|makeAndSetLabel
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getCiteKeyPattern
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
argument_list|,
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBibtexKeyPatternPreferences
argument_list|()
argument_list|)
expr_stmt|;
comment|// Store undo information:
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableKeyChange
argument_list|(
name|entry
argument_list|,
name|oldValue
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cite key always set here
comment|// here we update the field
name|String
name|bibtexKeyData
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|setField
argument_list|(
name|BibEntry
operator|.
name|KEY_FIELD
argument_list|,
name|bibtexKeyData
argument_list|)
expr_stmt|;
name|updateSource
argument_list|()
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|UndoAction
specifier|private
class|class
name|UndoAction
extends|extends
name|AbstractAction
block|{
DECL|method|UndoAction ()
specifier|private
name|UndoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Undo"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UNDO
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
literal|"Undo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|UNDO
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RedoAction
specifier|private
class|class
name|RedoAction
extends|extends
name|AbstractAction
block|{
DECL|method|RedoAction ()
specifier|private
name|RedoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Redo"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REDO
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
literal|"Redo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|REDO
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SaveDatabaseAction
specifier|private
class|class
name|SaveDatabaseAction
extends|extends
name|AbstractAction
block|{
DECL|method|SaveDatabaseAction ()
specifier|private
name|SaveDatabaseAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Save library"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|Object
name|activeTab
init|=
name|tabs
operator|.
name|get
argument_list|(
name|tabbed
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeTab
operator|instanceof
name|EntryEditorTab
condition|)
block|{
comment|// Normal panel.
name|EntryEditorTab
name|tab
init|=
operator|(
name|EntryEditorTab
operator|)
name|activeTab
decl_stmt|;
name|FieldEditor
name|fieldEditor
init|=
name|tab
operator|.
name|getActive
argument_list|()
decl_stmt|;
name|fieldEditor
operator|.
name|clearAutoCompleteSuggestion
argument_list|()
expr_stmt|;
name|updateField
argument_list|(
name|fieldEditor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Source panel.
name|updateField
argument_list|(
name|activeTab
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validEntry
condition|)
block|{
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|SAVE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|AutoLinkAction
specifier|private
class|class
name|AutoLinkAction
extends|extends
name|AbstractAction
block|{
DECL|method|AutoLinkAction ()
specifier|private
name|AutoLinkAction
parameter_list|()
block|{
name|putValue
argument_list|(
name|Action
operator|.
name|SMALL_ICON
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|AUTO_FILE_LINK
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Automatically set file links for this entry"
argument_list|)
operator|+
literal|" (Alt-F)"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|FileListEditor
name|localFileListEditor
init|=
name|EntryEditor
operator|.
name|this
operator|.
name|fileListEditor
decl_stmt|;
if|if
condition|(
name|localFileListEditor
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"No file list editor found."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localFileListEditor
operator|.
name|autoSetLinks
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

