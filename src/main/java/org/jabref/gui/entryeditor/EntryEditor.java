begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.entryeditor
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JMenuItem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JOptionPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPopupMenu
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingUtilities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoableEdit
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tab
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TabPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToolBar
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|EntryContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|Actions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|entryeditor
operator|.
name|fileannotationtab
operator|.
name|FileAnnotationTab
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|WriteXMPEntryEditorAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|FieldEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|fieldeditors
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|keyboard
operator|.
name|KeyBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|mergeentries
operator|.
name|EntryFetchAndMergeWorker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableKeyChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableRemoveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ControlHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|TypedBibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|InvalidFieldValueException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtex
operator|.
name|LatexFieldFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|EntryBasedFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|importer
operator|.
name|WebFetchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|search
operator|.
name|SearchQueryHighlightListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|UpdateField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|EntryTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|EntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|event
operator|.
name|FieldAddedOrRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|eventbus
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_comment
comment|/**  * GUI component that allows editing of the fields of a BibEntry (i.e. the  * one that shows up, when you double click on an entry in the table)  *<p>  * It hosts the tabs (required, general, optional) and the buttons to the left.  *<p>  * EntryEditor also registers itself to the event bus, receiving  * events whenever a field of the entry changes, enabling the text fields to  * update themselves if the change is made from somewhere else.  */
end_comment

begin_class
DECL|class|EntryEditor
specifier|public
class|class
name|EntryEditor
extends|extends
name|BorderPane
implements|implements
name|EntryContainer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EntryEditor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * A reference to the entry this object works on.      */
DECL|field|entry
specifier|private
name|BibEntry
name|entry
decl_stmt|;
comment|/**      * The currently displayed type      */
DECL|field|displayedBibEntryType
specifier|private
name|String
name|displayedBibEntryType
decl_stmt|;
comment|/**      * The action that deletes the current entry, and closes the editor.      */
DECL|field|deleteAction
specifier|private
specifier|final
name|DeleteAction
name|deleteAction
init|=
operator|new
name|DeleteAction
argument_list|()
decl_stmt|;
comment|/**      * The action for switching to the next entry.      */
DECL|field|nextEntryAction
specifier|private
specifier|final
name|AbstractAction
name|nextEntryAction
init|=
operator|new
name|NextEntryAction
argument_list|()
decl_stmt|;
comment|/**      * The action for switching to the previous entry.      */
DECL|field|prevEntryAction
specifier|private
specifier|final
name|AbstractAction
name|prevEntryAction
init|=
operator|new
name|PrevEntryAction
argument_list|()
decl_stmt|;
DECL|field|writeXmp
specifier|private
specifier|final
name|AbstractAction
name|writeXmp
decl_stmt|;
DECL|field|tabbed
annotation|@
name|FXML
specifier|private
name|TabPane
name|tabbed
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|BasePanel
name|panel
decl_stmt|;
DECL|field|helpAction
specifier|private
specifier|final
name|HelpAction
name|helpAction
init|=
operator|new
name|HelpAction
argument_list|(
name|HelpFile
operator|.
name|ENTRY_EDITOR
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|HELP
operator|.
name|getIcon
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|undoAction
specifier|private
specifier|final
name|UndoAction
name|undoAction
init|=
operator|new
name|UndoAction
argument_list|()
decl_stmt|;
DECL|field|redoAction
specifier|private
specifier|final
name|RedoAction
name|redoAction
init|=
operator|new
name|RedoAction
argument_list|()
decl_stmt|;
DECL|field|searchListeners
specifier|private
specifier|final
name|List
argument_list|<
name|SearchQueryHighlightListener
argument_list|>
name|searchListeners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|tabs
specifier|private
specifier|final
name|List
argument_list|<
name|EntryEditorTab
argument_list|>
name|tabs
decl_stmt|;
comment|/**      * Indicates that we are about to go to the next or previous entry      */
DECL|field|entryType
specifier|private
name|EntryType
name|entryType
decl_stmt|;
DECL|field|sourceTab
specifier|private
name|SourceTab
name|sourceTab
decl_stmt|;
DECL|field|typeLabel
annotation|@
name|FXML
specifier|private
name|Label
name|typeLabel
decl_stmt|;
DECL|method|EntryEditor (BasePanel panel)
specifier|public
name|EntryEditor
parameter_list|(
name|BasePanel
name|panel
parameter_list|)
block|{
name|this
operator|.
name|frame
operator|=
name|panel
operator|.
name|frame
argument_list|()
expr_stmt|;
name|this
operator|.
name|panel
operator|=
name|panel
expr_stmt|;
name|ControlHelper
operator|.
name|loadFXMLForControl
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|writeXmp
operator|=
operator|new
name|WriteXMPEntryEditorAction
argument_list|(
name|panel
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|setTabClosingPolicy
argument_list|(
name|TabPane
operator|.
name|TabClosingPolicy
operator|.
name|UNAVAILABLE
argument_list|)
expr_stmt|;
name|tabbed
operator|.
name|setStyle
argument_list|(
literal|"-fx-font-size: "
operator|+
name|Globals
operator|.
name|prefs
operator|.
name|getFontSizeFX
argument_list|()
operator|+
literal|"pt;"
operator|+
literal|"-fx-open-tab-animation: NONE; -fx-close-tab-animation: NONE;"
argument_list|)
expr_stmt|;
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
argument_list|,
name|tab
lambda|->
block|{
name|EntryEditorTab
name|activeTab
init|=
operator|(
name|EntryEditorTab
operator|)
name|tab
decl_stmt|;
if|if
condition|(
name|activeTab
operator|!=
literal|null
condition|)
block|{
name|activeTab
operator|.
name|notifyAboutFocus
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|setupKeyBindings
argument_list|()
expr_stmt|;
name|tabs
operator|=
name|createTabs
argument_list|()
expr_stmt|;
block|}
DECL|method|setEntry (BibEntry entry)
specifier|public
name|void
name|setEntry
parameter_list|(
name|BibEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entryType
operator|=
name|EntryTypes
operator|.
name|getTypeOrDefault
argument_list|(
name|entry
operator|.
name|getType
argument_list|()
argument_list|,
name|this
operator|.
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|displayedBibEntryType
operator|=
name|entry
operator|.
name|getType
argument_list|()
expr_stmt|;
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
block|{
name|recalculateVisibleTabs
argument_list|()
expr_stmt|;
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_SHOW_SOURCE
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|sourceTab
argument_list|)
expr_stmt|;
block|}
comment|// Notify current tab about new entry
name|EntryEditorTab
name|selectedTab
init|=
operator|(
name|EntryEditorTab
operator|)
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|selectedTab
operator|.
name|notifyAboutFocus
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// Update type label
name|TypedBibEntry
name|typedEntry
init|=
operator|new
name|TypedBibEntry
argument_list|(
name|entry
argument_list|,
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
decl_stmt|;
name|typeLabel
operator|.
name|setText
argument_list|(
name|typedEntry
operator|.
name|getTypeForDisplay
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Subscribe
DECL|method|listen (FieldAddedOrRemovedEvent event)
specifier|public
specifier|synchronized
name|void
name|listen
parameter_list|(
name|FieldAddedOrRemovedEvent
name|event
parameter_list|)
block|{
comment|// Rebuild entry editor based on new information (e.g. hide/add tabs)
name|recalculateVisibleTabs
argument_list|()
expr_stmt|;
block|}
comment|/**      * Set-up key bindings specific for the entry editor.      */
DECL|method|setupKeyBindings ()
specifier|private
name|void
name|setupKeyBindings
parameter_list|()
block|{
name|tabbed
operator|.
name|addEventFilter
argument_list|(
name|KeyEvent
operator|.
name|KEY_PRESSED
argument_list|,
name|event
lambda|->
block|{
name|Optional
argument_list|<
name|KeyBinding
argument_list|>
name|keyBinding
init|=
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
operator|.
name|mapToKeyBinding
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyBinding
operator|.
name|isPresent
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|keyBinding
operator|.
name|get
argument_list|()
condition|)
block|{
case|case
name|ENTRY_EDITOR_NEXT_PANEL
case|:
case|case
name|ENTRY_EDITOR_NEXT_PANEL_2
case|:
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectNext
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|ENTRY_EDITOR_PREVIOUS_PANEL
case|:
case|case
name|ENTRY_EDITOR_PREVIOUS_PANEL_2
case|:
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectPrevious
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|HELP
case|:
name|helpAction
operator|.
name|actionPerformed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLOSE_ENTRY_EDITOR
case|:
name|close
argument_list|()
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// Pass other keys to children
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|recalculateVisibleTabs ()
specifier|private
name|void
name|recalculateVisibleTabs
parameter_list|()
block|{
name|List
argument_list|<
name|Tab
argument_list|>
name|visibleTabs
init|=
name|tabs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|tab
lambda|->
name|tab
operator|.
name|shouldShow
argument_list|(
name|entry
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Start of ugly hack:
comment|// We need to find out, which tabs will be shown and which not and remove and re-add the appropriate tabs
comment|// to the editor. We don't want to simply remove all and re-add the complete list of visible tabs, because
comment|// the tabs give an ugly animation the looks like all tabs are shifting in from the right.
comment|// This hack is required since tabbed.getTabs().setAll(visibleTabs) changes the order of the tabs in the editor
comment|// First, remove tabs that we do not want to show
name|List
argument_list|<
name|EntryEditorTab
argument_list|>
name|toBeRemoved
init|=
name|tabs
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|tab
lambda|->
operator|!
name|tab
operator|.
name|shouldShow
argument_list|(
name|entry
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|tabbed
operator|.
name|getTabs
argument_list|()
operator|.
name|removeAll
argument_list|(
name|toBeRemoved
argument_list|)
expr_stmt|;
comment|// Next add all the visible tabs (if not already present) at the right position
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|visibleTabs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tab
name|toBeAdded
init|=
name|visibleTabs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Tab
name|shown
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|tabbed
operator|.
name|getTabs
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|shown
operator|=
name|tabbed
operator|.
name|getTabs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|toBeAdded
operator|.
name|equals
argument_list|(
name|shown
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|getTabs
argument_list|()
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|toBeAdded
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createTabs ()
specifier|private
name|List
argument_list|<
name|EntryEditorTab
argument_list|>
name|createTabs
parameter_list|()
block|{
name|List
argument_list|<
name|EntryEditorTab
argument_list|>
name|tabs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Required fields
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|RequiredFieldsTab
argument_list|(
name|panel
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getSuggestionProviders
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Optional fields
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|OptionalFieldsTab
argument_list|(
name|panel
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getSuggestionProviders
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|OptionalFields2Tab
argument_list|(
name|panel
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getSuggestionProviders
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|DeprecatedFieldsTab
argument_list|(
name|panel
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getSuggestionProviders
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Other fields
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|OtherFieldsTab
argument_list|(
name|panel
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getSuggestionProviders
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// General fields from preferences
name|EntryEditorTabList
name|tabList
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getEntryEditorTabList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|getTabCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|UserDefinedFieldsTab
argument_list|(
name|tabList
operator|.
name|getTabName
argument_list|(
name|i
argument_list|)
argument_list|,
name|tabList
operator|.
name|getTabFields
argument_list|(
name|i
argument_list|)
argument_list|,
name|panel
operator|.
name|getDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getSuggestionProviders
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Special tabs
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|MathSciNetTab
argument_list|()
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|FileAnnotationTab
argument_list|(
name|panel
operator|.
name|getAnnotationCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
operator|new
name|RelatedArticlesTab
argument_list|(
name|Globals
operator|.
name|prefs
argument_list|)
argument_list|)
expr_stmt|;
comment|// Source tab
name|sourceTab
operator|=
operator|new
name|SourceTab
argument_list|(
name|panel
operator|.
name|getBibDatabaseContext
argument_list|()
argument_list|,
name|panel
operator|.
name|getUndoManager
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|tabs
operator|.
name|add
argument_list|(
name|sourceTab
argument_list|)
expr_stmt|;
return|return
name|tabs
return|;
block|}
DECL|method|getDisplayedBibEntryType ()
specifier|public
name|String
name|getDisplayedBibEntryType
parameter_list|()
block|{
return|return
name|displayedBibEntryType
return|;
block|}
comment|/**      * @return reference to the currently edited entry      */
annotation|@
name|Override
DECL|method|getEntry ()
specifier|public
name|BibEntry
name|getEntry
parameter_list|()
block|{
return|return
name|entry
return|;
block|}
DECL|method|getDatabase ()
specifier|public
name|BibDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|panel
operator|.
name|getDatabase
argument_list|()
return|;
block|}
DECL|method|setupToolBar ()
specifier|private
name|ToolBar
name|setupToolBar
parameter_list|()
block|{
name|JPopupMenu
name|fetcherPopup
init|=
operator|new
name|JPopupMenu
argument_list|()
decl_stmt|;
for|for
control|(
name|EntryBasedFetcher
name|fetcher
range|:
name|WebFetchers
operator|.
name|getEntryBasedFetchers
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getImportFormatPreferences
argument_list|()
argument_list|)
control|)
block|{
name|fetcherPopup
operator|.
name|add
argument_list|(
operator|new
name|JMenuItem
argument_list|(
operator|new
name|AbstractAction
argument_list|(
name|fetcher
operator|.
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
operator|new
name|EntryFetchAndMergeWorker
argument_list|(
name|panel
argument_list|,
name|getEntry
argument_list|()
argument_list|,
name|fetcher
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//        fetcherButton.addMouseListener(new MouseAdapter() {
comment|//  @Override
comment|//    public void mousePressed(MouseEvent e) {
comment|//              fetcherPopup.show(e.getComponent(), e.getX(), e.getY());
comment|//        }
comment|//  });
name|ToolBar
name|toolBar
init|=
operator|new
name|ToolBar
argument_list|(          )
decl_stmt|;
return|return
name|toolBar
return|;
block|}
DECL|method|addSearchListener (SearchQueryHighlightListener listener)
name|void
name|addSearchListener
parameter_list|(
name|SearchQueryHighlightListener
name|listener
parameter_list|)
block|{
comment|// TODO: Highlight search text in entry editors
name|searchListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|addSearchListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeSearchListeners ()
specifier|private
name|void
name|removeSearchListeners
parameter_list|()
block|{
for|for
control|(
name|SearchQueryHighlightListener
name|listener
range|:
name|searchListeners
control|)
block|{
name|panel
operator|.
name|frame
argument_list|()
operator|.
name|getGlobalSearchBar
argument_list|()
operator|.
name|getSearchQueryHighlightObservable
argument_list|()
operator|.
name|removeSearchListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|requestFocus ()
specifier|public
name|void
name|requestFocus
parameter_list|()
block|{
comment|//container.requestFocus();
block|}
comment|/**      * Returns the name of the currently selected tab.      */
DECL|method|getVisibleTabName ()
specifier|public
name|String
name|getVisibleTabName
parameter_list|()
block|{
name|Tab
name|selectedTab
init|=
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedTab
operator|!=
literal|null
condition|)
block|{
return|return
name|selectedTab
operator|.
name|getText
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|setVisibleTab (String name)
specifier|public
name|void
name|setVisibleTab
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Tab
name|tab
range|:
name|tabbed
operator|.
name|getTabs
argument_list|()
control|)
block|{
if|if
condition|(
name|tab
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|tab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setFocusToField (String fieldName)
specifier|public
name|void
name|setFocusToField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
name|Tab
name|tab
range|:
name|tabbed
operator|.
name|getTabs
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|tab
operator|instanceof
name|FieldsEditorTab
operator|)
operator|&&
operator|(
operator|(
name|FieldsEditorTab
operator|)
name|tab
operator|)
operator|.
name|determineFieldsToShow
argument_list|(
name|entry
argument_list|,
name|entryType
argument_list|)
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|FieldsEditorTab
name|fieldsEditorTab
init|=
operator|(
name|FieldsEditorTab
operator|)
name|tab
decl_stmt|;
name|tabbed
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|fieldsEditorTab
operator|.
name|requestFocus
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setMovingToDifferentEntry ()
specifier|public
name|void
name|setMovingToDifferentEntry
parameter_list|()
block|{
name|unregisterListeners
argument_list|()
expr_stmt|;
block|}
DECL|method|unregisterListeners ()
specifier|private
name|void
name|unregisterListeners
parameter_list|()
block|{
name|removeSearchListeners
argument_list|()
expr_stmt|;
block|}
DECL|method|showChangeEntryTypePopupMenu ()
specifier|private
name|void
name|showChangeEntryTypePopupMenu
parameter_list|()
block|{
comment|//JPopupMenu typeMenu = new ChangeEntryTypeMenu().getChangeentryTypePopupMenu(panel);
comment|//typeMenu.show(this, 0, 0);
block|}
DECL|method|warnDuplicateBibtexkey ()
specifier|private
name|void
name|warnDuplicateBibtexkey
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Duplicate BibTeX key"
argument_list|)
operator|+
literal|". "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Grouping may not work for this entry."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|warnEmptyBibtexkey ()
specifier|private
name|void
name|warnEmptyBibtexkey
parameter_list|()
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Empty BibTeX key"
argument_list|)
operator|+
literal|". "
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Grouping may not work for this entry."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TypeButton
specifier|private
class|class
name|TypeButton
extends|extends
name|JButton
block|{
DECL|method|TypeButton ()
specifier|private
name|TypeButton
parameter_list|()
block|{
name|addActionListener
argument_list|(
name|e
lambda|->
name|showChangeEntryTypePopupMenu
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TypeLabel
specifier|private
class|class
name|TypeLabel
extends|extends
name|Label
block|{
DECL|method|TypeLabel (String type)
specifier|private
name|TypeLabel
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|//setUI(new VerticalLabelUI(false));
comment|//setForeground(GUIGlobals.ENTRY_EDITOR_LABEL_COLOR);
comment|//setFont(new Font("dialog", Font.ITALIC + Font.BOLD, 18));
comment|// Add a mouse listener so the user can right-click the type label to change the entry type:
comment|/*             addMouseListener(new MouseAdapter() {                  @Override                 public void mouseReleased(MouseEvent e) {                     if (e.isPopupTrigger() || (e.getButton() == MouseEvent.BUTTON3)) {                         handleTypeChange();                     }                 }                  @Override                 public void mouseClicked(MouseEvent e) {                     if (e.isPopupTrigger() || (e.getButton() == MouseEvent.BUTTON3)) {                         handleTypeChange();                     }                 }                  private void handleTypeChange() {                     showChangeEntryTypePopupMenu();                 }             });             */
block|}
block|}
DECL|class|DeleteAction
specifier|private
class|class
name|DeleteAction
extends|extends
name|AbstractAction
block|{
DECL|method|DeleteAction ()
specifier|private
name|DeleteAction
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
comment|// Show confirmation dialog if not disabled:
name|boolean
name|goOn
init|=
name|panel
operator|.
name|showDeleteConfirmationDialog
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|goOn
condition|)
block|{
return|return;
block|}
name|panel
operator|.
name|entryEditorClosing
argument_list|(
name|EntryEditor
operator|.
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableRemoveEntry
argument_list|(
name|panel
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|entry
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Deleted entry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|StoreFieldAction
specifier|public
class|class
name|StoreFieldAction
extends|extends
name|AbstractAction
block|{
DECL|method|StoreFieldAction ()
specifier|public
name|StoreFieldAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Store field value"
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
literal|"Store field value"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getSource
argument_list|()
operator|instanceof
name|TextField
condition|)
block|{
comment|// Storage from bibtex key field.
name|TextField
name|textField
init|=
operator|(
name|TextField
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|entry
operator|.
name|getCiteKeyOptional
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|newValue
init|=
name|textField
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|newValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newValue
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|oldValue
operator|==
literal|null
operator|)
operator|&&
operator|(
name|newValue
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
name|Objects
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
operator|)
condition|)
block|{
return|return;
comment|// No change.
block|}
comment|// Make sure the key is legal:
name|String
name|cleaned
init|=
name|BibtexKeyPatternUtil
operator|.
name|checkLegalKey
argument_list|(
name|newValue
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ENFORCE_LEGAL_BIBTEX_KEY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cleaned
operator|==
literal|null
operator|)
operator|||
name|cleaned
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|textField
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|textField
operator|.
name|setInvalidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Invalid BibTeX key"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error setting field"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|requestFocus
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearCiteKey
argument_list|()
expr_stmt|;
name|warnEmptyBibtexkey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setCiteKey
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|boolean
name|isDuplicate
init|=
name|panel
operator|.
name|getDatabase
argument_list|()
operator|.
name|getDuplicationChecker
argument_list|()
operator|.
name|isDuplicateCiteKeyExisting
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDuplicate
condition|)
block|{
name|warnDuplicateBibtexkey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|output
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibTeX key is unique."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add an UndoableKeyChange to the baseframe's undoManager.
name|UndoableKeyChange
name|undoableKeyChange
init|=
operator|new
name|UndoableKeyChange
argument_list|(
name|entry
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
decl_stmt|;
name|updateTimestamp
argument_list|(
name|undoableKeyChange
argument_list|)
expr_stmt|;
name|textField
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
name|textField
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
name|textField
operator|.
name|setActiveBackgroundColor
argument_list|()
expr_stmt|;
block|}
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getSource
argument_list|()
operator|instanceof
name|FieldEditor
condition|)
block|{
name|String
name|toSet
init|=
literal|null
decl_stmt|;
name|FieldEditor
name|fieldEditor
init|=
operator|(
name|FieldEditor
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|boolean
name|set
decl_stmt|;
comment|// Trim the whitespace off this value
name|String
name|currentText
init|=
name|fieldEditor
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toSet
operator|=
name|currentText
expr_stmt|;
block|}
comment|// We check if the field has changed, since we don't want to
comment|// mark the base as changed unless we have a real change.
if|if
condition|(
name|toSet
operator|==
literal|null
condition|)
block|{
name|set
operator|=
name|entry
operator|.
name|hasField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|!
operator|(
operator|(
name|entry
operator|.
name|hasField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|)
operator|&&
name|toSet
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|set
condition|)
block|{
comment|// We set the field and label color.
name|fieldEditor
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// The following statement attempts to write the new contents into a StringWriter, and this will
comment|// cause an IOException if the field is not properly formatted. If that happens, the field
comment|// is not stored and the textarea turns red.
if|if
condition|(
name|toSet
operator|!=
literal|null
condition|)
block|{
operator|new
name|LatexFieldFormatter
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getLatexFieldFormatterPreferences
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|toSet
argument_list|,
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|toSet
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|toSet
argument_list|)
expr_stmt|;
block|}
name|fieldEditor
operator|.
name|setValidBackgroundColor
argument_list|()
expr_stmt|;
comment|//TODO: See if we need to update an AutoCompleter instance:
comment|/*                         AutoCompleter<String> aComp = panel.getSuggestionProviders().get(fieldEditor.getName());                         if (aComp != null) {                             aComp.addBibtexEntry(entry);                         }                         */
comment|// Add an UndoableFieldChange to the baseframe's undoManager.
name|UndoableFieldChange
name|undoableFieldChange
init|=
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|fieldEditor
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|oldValue
argument_list|,
name|toSet
argument_list|)
decl_stmt|;
name|updateTimestamp
argument_list|(
name|undoableFieldChange
argument_list|)
expr_stmt|;
name|panel
operator|.
name|markBaseChanged
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFieldValueException
name|ex
parameter_list|)
block|{
name|fieldEditor
operator|.
name|setInvalidBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SwingUtilities
operator|.
name|isEventDispatchThread
argument_list|()
condition|)
block|{
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|frame
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error"
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"Error setting field"
argument_list|)
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Error setting field"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fieldEditor
operator|.
name|hasFocus
argument_list|()
condition|)
block|{
name|fieldEditor
operator|.
name|setBackground
argument_list|(
name|GUIGlobals
operator|.
name|ACTIVE_EDITOR_COLOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make sure we scroll to the entry if it moved in the table.
comment|// Should only be done if this editor is currently showing:
comment|// don't select the current entry again (eg use BasePanel#highlightEntry} in case another entry was selected)
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|panel
operator|.
name|getMainTable
argument_list|()
operator|.
name|ensureVisible
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateTimestamp (UndoableEdit undoableEdit)
specifier|private
name|void
name|updateTimestamp
parameter_list|(
name|UndoableEdit
name|undoableEdit
parameter_list|)
block|{
if|if
condition|(
name|Globals
operator|.
name|prefs
operator|.
name|getTimestampPreferences
argument_list|()
operator|.
name|includeTimestamps
argument_list|()
condition|)
block|{
name|NamedCompound
name|compound
init|=
operator|new
name|NamedCompound
argument_list|(
name|undoableEdit
operator|.
name|getPresentationName
argument_list|()
argument_list|)
decl_stmt|;
name|compound
operator|.
name|addEdit
argument_list|(
name|undoableEdit
argument_list|)
expr_stmt|;
name|UpdateField
operator|.
name|updateField
argument_list|(
name|entry
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getTimestampPreferences
argument_list|()
operator|.
name|getTimestampField
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getTimestampPreferences
argument_list|()
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|fieldChange
lambda|->
name|compound
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|fieldChange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|compound
operator|.
name|end
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|undoableEdit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|NextEntryAction
specifier|private
class|class
name|NextEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|NextEntryAction ()
specifier|private
name|NextEntryAction
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|selectNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|PrevEntryAction
specifier|private
class|class
name|PrevEntryAction
extends|extends
name|AbstractAction
block|{
DECL|method|PrevEntryAction ()
specifier|private
name|PrevEntryAction
parameter_list|()
block|{          }
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|selectPreviousEntry
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|UndoAction
specifier|private
class|class
name|UndoAction
extends|extends
name|AbstractAction
block|{
DECL|method|UndoAction ()
specifier|private
name|UndoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Undo"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|UNDO
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
literal|"Undo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|UNDO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RedoAction
specifier|private
class|class
name|RedoAction
extends|extends
name|AbstractAction
block|{
DECL|method|RedoAction ()
specifier|private
name|RedoAction
parameter_list|()
block|{
name|super
argument_list|(
literal|"Redo"
argument_list|,
name|IconTheme
operator|.
name|JabRefIcon
operator|.
name|REDO
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
name|putValue
argument_list|(
name|Action
operator|.
name|SHORT_DESCRIPTION
argument_list|,
literal|"Redo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|panel
operator|.
name|runCommand
argument_list|(
name|Actions
operator|.
name|REDO
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

