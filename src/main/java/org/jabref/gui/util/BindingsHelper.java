begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|Bindings
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|BooleanBinding
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanPropertyBase
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ObservableValue
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|MapChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableMap
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|css
operator|.
name|PseudoClass
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|PreboundBinding
import|;
end_import

begin_comment
comment|/**  * Helper methods for javafx binding.  * Some methods are taken from https://bugs.openjdk.java.net/browse/JDK-8134679  */
end_comment

begin_class
DECL|class|BindingsHelper
specifier|public
class|class
name|BindingsHelper
block|{
DECL|method|BindingsHelper ()
specifier|private
name|BindingsHelper
parameter_list|()
block|{     }
DECL|method|any (ObservableList<T> source, Predicate<T> predicate)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BooleanBinding
name|any
parameter_list|(
name|ObservableList
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
return|return
name|Bindings
operator|.
name|createBooleanBinding
argument_list|(
parameter_list|()
lambda|->
name|source
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|predicate
argument_list|)
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|all (ObservableList<T> source, Predicate<T> predicate)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|BooleanBinding
name|all
parameter_list|(
name|ObservableList
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Predicate
argument_list|<
name|T
argument_list|>
name|predicate
parameter_list|)
block|{
comment|// Stream.allMatch() (in contrast to Stream.anyMatch() returns 'true' for empty streams, so this has to be checked explicitly.
return|return
name|Bindings
operator|.
name|createBooleanBinding
argument_list|(
parameter_list|()
lambda|->
operator|!
name|source
operator|.
name|isEmpty
argument_list|()
operator|&&
name|source
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|predicate
argument_list|)
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|method|includePseudoClassWhen (Node node, PseudoClass pseudoClass, ObservableValue<? extends Boolean> condition)
specifier|public
specifier|static
name|void
name|includePseudoClassWhen
parameter_list|(
name|Node
name|node
parameter_list|,
name|PseudoClass
name|pseudoClass
parameter_list|,
name|ObservableValue
argument_list|<
name|?
extends|extends
name|Boolean
argument_list|>
name|condition
parameter_list|)
block|{
name|BooleanProperty
name|pseudoClassState
init|=
operator|new
name|BooleanPropertyBase
argument_list|(
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|invalidated
parameter_list|()
block|{
name|node
operator|.
name|pseudoClassStateChanged
argument_list|(
name|pseudoClass
argument_list|,
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getBean
parameter_list|()
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|pseudoClass
operator|.
name|getPseudoClassName
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|pseudoClassState
operator|.
name|bind
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new list in which each element is converted using the provided mapping.      * All changes to the underlying list are propagated to the converted list.      *      * In contrast to {@link org.fxmisc.easybind.EasyBind#map(ObservableList, Function)},      * the items are converted when the are inserted (and at the initialization) instead of when they are accessed.      * Thus the initial CPU overhead and memory consumption is higher but the access to list items is quicker.      */
DECL|method|mapBacked (ObservableList<A> source, Function<A, B> mapper)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|MappedList
name|mapBacked
parameter_list|(
name|ObservableList
argument_list|<
name|A
argument_list|>
name|source
parameter_list|,
name|Function
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|MappedList
argument_list|<>
argument_list|(
name|source
argument_list|,
name|mapper
argument_list|)
return|;
block|}
DECL|method|map (ObservableValue<T> source, Function<T, List<U>> mapper)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
name|ObservableList
argument_list|<
name|U
argument_list|>
name|map
parameter_list|(
name|ObservableValue
argument_list|<
name|T
argument_list|>
name|source
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|U
argument_list|>
argument_list|>
name|mapper
parameter_list|)
block|{
name|PreboundBinding
argument_list|<
name|List
argument_list|<
name|U
argument_list|>
argument_list|>
name|binding
init|=
operator|new
name|PreboundBinding
argument_list|<
name|List
argument_list|<
name|U
argument_list|>
argument_list|>
argument_list|(
name|source
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|U
argument_list|>
name|computeValue
parameter_list|()
block|{
return|return
name|mapper
operator|.
name|apply
argument_list|(
name|source
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ObservableList
argument_list|<
name|U
argument_list|>
name|list
init|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
decl_stmt|;
name|binding
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldValue
parameter_list|,
name|newValue
parameter_list|)
lambda|->
name|list
operator|.
name|setAll
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|/**      * Binds propertA bidirectional to propertyB using the provided map functions to convert between them.      */
DECL|method|bindBidirectional (Property<A> propertyA, Property<B> propertyB, Function<A, B> mapAtoB, Function<B, A> mapBtoA)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|bindBidirectional
parameter_list|(
name|Property
argument_list|<
name|A
argument_list|>
name|propertyA
parameter_list|,
name|Property
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Function
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|mapAtoB
parameter_list|,
name|Function
argument_list|<
name|B
argument_list|,
name|A
argument_list|>
name|mapBtoA
parameter_list|)
block|{
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
init|=
name|newValueB
lambda|->
name|propertyA
operator|.
name|setValue
argument_list|(
name|mapBtoA
operator|.
name|apply
argument_list|(
name|newValueB
argument_list|)
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|A
argument_list|>
name|updateB
init|=
name|newValueA
lambda|->
name|propertyB
operator|.
name|setValue
argument_list|(
name|mapAtoB
operator|.
name|apply
argument_list|(
name|newValueA
argument_list|)
argument_list|)
decl_stmt|;
name|bindBidirectional
argument_list|(
name|propertyA
argument_list|,
name|propertyB
argument_list|,
name|updateA
argument_list|,
name|updateB
argument_list|)
expr_stmt|;
block|}
comment|/**      * Binds propertA bidirectional to propertyB while using updateB to update propertyB when propertyA changed.      */
DECL|method|bindBidirectional (Property<A> propertyA, ObservableValue<A> propertyB, Consumer<A> updateB)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|>
name|void
name|bindBidirectional
parameter_list|(
name|Property
argument_list|<
name|A
argument_list|>
name|propertyA
parameter_list|,
name|ObservableValue
argument_list|<
name|A
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|A
argument_list|>
name|updateB
parameter_list|)
block|{
name|bindBidirectional
argument_list|(
name|propertyA
argument_list|,
name|propertyB
argument_list|,
name|propertyA
operator|::
name|setValue
argument_list|,
name|updateB
argument_list|)
expr_stmt|;
block|}
comment|/**      * Binds propertA bidirectional to propertyB using updateB to update propertyB when propertyA changed and similar      * for updateA.      */
DECL|method|bindBidirectional (ObservableValue<A> propertyA, ObservableValue<B> propertyB, Consumer<B> updateA, Consumer<A> updateB)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|bindBidirectional
parameter_list|(
name|ObservableValue
argument_list|<
name|A
argument_list|>
name|propertyA
parameter_list|,
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|A
argument_list|>
name|updateB
parameter_list|)
block|{
specifier|final
name|BidirectionalBinding
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|binding
init|=
operator|new
name|BidirectionalBinding
argument_list|<>
argument_list|(
name|propertyA
argument_list|,
name|propertyB
argument_list|,
name|updateA
argument_list|,
name|updateB
argument_list|)
decl_stmt|;
comment|// use updateB as initial source
name|updateA
operator|.
name|accept
argument_list|(
name|propertyB
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|propertyA
operator|.
name|addListener
argument_list|(
name|binding
operator|.
name|getChangeListenerA
argument_list|()
argument_list|)
expr_stmt|;
name|propertyB
operator|.
name|addListener
argument_list|(
name|binding
operator|.
name|getChangeListenerB
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|bindContentBidirectional (ObservableList<A> propertyA, ListProperty<B> propertyB, Consumer<ObservableList<B>> updateA, Consumer<List<A>> updateB)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|bindContentBidirectional
parameter_list|(
name|ObservableList
argument_list|<
name|A
argument_list|>
name|propertyA
parameter_list|,
name|ListProperty
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|ObservableList
argument_list|<
name|B
argument_list|>
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|List
argument_list|<
name|A
argument_list|>
argument_list|>
name|updateB
parameter_list|)
block|{
name|bindContentBidirectional
argument_list|(
name|propertyA
argument_list|,
operator|(
name|ObservableValue
argument_list|<
name|ObservableList
argument_list|<
name|B
argument_list|>
argument_list|>
operator|)
name|propertyB
argument_list|,
name|updateA
argument_list|,
name|updateB
argument_list|)
expr_stmt|;
block|}
DECL|method|bindContentBidirectional (ObservableList<A> propertyA, ObservableValue<B> propertyB, Consumer<B> updateA, Consumer<List<A>> updateB)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|bindContentBidirectional
parameter_list|(
name|ObservableList
argument_list|<
name|A
argument_list|>
name|propertyA
parameter_list|,
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|List
argument_list|<
name|A
argument_list|>
argument_list|>
name|updateB
parameter_list|)
block|{
specifier|final
name|BidirectionalListBinding
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
name|binding
init|=
operator|new
name|BidirectionalListBinding
argument_list|<>
argument_list|(
name|propertyA
argument_list|,
name|propertyB
argument_list|,
name|updateA
argument_list|,
name|updateB
argument_list|)
decl_stmt|;
comment|// use property as initial source
name|updateA
operator|.
name|accept
argument_list|(
name|propertyB
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|propertyA
operator|.
name|addListener
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|propertyB
operator|.
name|addListener
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
DECL|method|bindContentBidirectional (ListProperty<A> listProperty, Property<B> property, Function<List<A>, B> mapToB, Function<B, List<A>> mapToList)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
name|void
name|bindContentBidirectional
parameter_list|(
name|ListProperty
argument_list|<
name|A
argument_list|>
name|listProperty
parameter_list|,
name|Property
argument_list|<
name|B
argument_list|>
name|property
parameter_list|,
name|Function
argument_list|<
name|List
argument_list|<
name|A
argument_list|>
argument_list|,
name|B
argument_list|>
name|mapToB
parameter_list|,
name|Function
argument_list|<
name|B
argument_list|,
name|List
argument_list|<
name|A
argument_list|>
argument_list|>
name|mapToList
parameter_list|)
block|{
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateList
init|=
name|newValueB
lambda|->
name|listProperty
operator|.
name|setAll
argument_list|(
name|mapToList
operator|.
name|apply
argument_list|(
name|newValueB
argument_list|)
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|List
argument_list|<
name|A
argument_list|>
argument_list|>
name|updateB
init|=
name|newValueList
lambda|->
name|property
operator|.
name|setValue
argument_list|(
name|mapToB
operator|.
name|apply
argument_list|(
name|newValueList
argument_list|)
argument_list|)
decl_stmt|;
name|bindContentBidirectional
argument_list|(
name|listProperty
argument_list|,
name|property
argument_list|,
name|updateList
argument_list|,
name|updateB
argument_list|)
expr_stmt|;
block|}
DECL|method|bindContentBidirectional (ObservableMap<A, V> propertyA, ObservableValue<B> propertyB, Consumer<B> updateA, Consumer<Map<A, V>> updateB)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|V
parameter_list|,
name|B
parameter_list|>
name|void
name|bindContentBidirectional
parameter_list|(
name|ObservableMap
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
name|propertyA
parameter_list|,
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|Map
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
argument_list|>
name|updateB
parameter_list|)
block|{
specifier|final
name|BidirectionalMapBinding
argument_list|<
name|A
argument_list|,
name|V
argument_list|,
name|B
argument_list|>
name|binding
init|=
operator|new
name|BidirectionalMapBinding
argument_list|<>
argument_list|(
name|propertyA
argument_list|,
name|propertyB
argument_list|,
name|updateA
argument_list|,
name|updateB
argument_list|)
decl_stmt|;
comment|// use list as initial source
name|updateB
operator|.
name|accept
argument_list|(
name|propertyA
argument_list|)
expr_stmt|;
name|propertyA
operator|.
name|addListener
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|propertyB
operator|.
name|addListener
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
DECL|method|bindContentBidirectional (ObservableMap<A, V> propertyA, Property<B> propertyB, Consumer<B> updateA, Function<Map<A, V>, B> mapToB)
specifier|public
specifier|static
parameter_list|<
name|A
parameter_list|,
name|V
parameter_list|,
name|B
parameter_list|>
name|void
name|bindContentBidirectional
parameter_list|(
name|ObservableMap
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
name|propertyA
parameter_list|,
name|Property
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
argument_list|,
name|B
argument_list|>
name|mapToB
parameter_list|)
block|{
name|Consumer
argument_list|<
name|Map
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
argument_list|>
name|updateB
init|=
name|newValueList
lambda|->
name|propertyB
operator|.
name|setValue
argument_list|(
name|mapToB
operator|.
name|apply
argument_list|(
name|newValueList
argument_list|)
argument_list|)
decl_stmt|;
name|bindContentBidirectional
argument_list|(
name|propertyA
argument_list|,
name|propertyB
argument_list|,
name|updateA
argument_list|,
name|updateB
argument_list|)
expr_stmt|;
block|}
DECL|class|BidirectionalBinding
specifier|private
specifier|static
class|class
name|BidirectionalBinding
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
block|{
DECL|field|propertyA
specifier|private
specifier|final
name|ObservableValue
argument_list|<
name|A
argument_list|>
name|propertyA
decl_stmt|;
DECL|field|updateA
specifier|private
specifier|final
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
decl_stmt|;
DECL|field|updateB
specifier|private
specifier|final
name|Consumer
argument_list|<
name|A
argument_list|>
name|updateB
decl_stmt|;
DECL|field|updating
specifier|private
name|boolean
name|updating
init|=
literal|false
decl_stmt|;
DECL|method|BidirectionalBinding (ObservableValue<A> propertyA, ObservableValue<B> propertyB, Consumer<B> updateA, Consumer<A> updateB)
specifier|public
name|BidirectionalBinding
parameter_list|(
name|ObservableValue
argument_list|<
name|A
argument_list|>
name|propertyA
parameter_list|,
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|propertyB
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|A
argument_list|>
name|updateB
parameter_list|)
block|{
name|this
operator|.
name|propertyA
operator|=
name|propertyA
expr_stmt|;
name|this
operator|.
name|updateA
operator|=
name|updateA
expr_stmt|;
name|this
operator|.
name|updateB
operator|=
name|updateB
expr_stmt|;
block|}
DECL|method|getChangeListenerA ()
specifier|public
name|ChangeListener
argument_list|<
name|?
super|super
name|A
argument_list|>
name|getChangeListenerA
parameter_list|()
block|{
return|return
name|this
operator|::
name|changedA
return|;
block|}
DECL|method|getChangeListenerB ()
specifier|public
name|ChangeListener
argument_list|<
name|?
super|super
name|B
argument_list|>
name|getChangeListenerB
parameter_list|()
block|{
return|return
name|this
operator|::
name|changedB
return|;
block|}
DECL|method|changedA (ObservableValue<? extends A> observable, A oldValue, A newValue)
specifier|public
name|void
name|changedA
parameter_list|(
name|ObservableValue
argument_list|<
name|?
extends|extends
name|A
argument_list|>
name|observable
parameter_list|,
name|A
name|oldValue
parameter_list|,
name|A
name|newValue
parameter_list|)
block|{
name|updateLocked
argument_list|(
name|updateB
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|changedB (ObservableValue<? extends B> observable, B oldValue, B newValue)
specifier|public
name|void
name|changedB
parameter_list|(
name|ObservableValue
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|observable
parameter_list|,
name|B
name|oldValue
parameter_list|,
name|B
name|newValue
parameter_list|)
block|{
name|updateLocked
argument_list|(
name|updateA
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
DECL|method|updateLocked (Consumer<T> update, T oldValue, T newValue)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|updateLocked
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|update
parameter_list|,
name|T
name|oldValue
parameter_list|,
name|T
name|newValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|updating
condition|)
block|{
try|try
block|{
name|updating
operator|=
literal|true
expr_stmt|;
name|update
operator|.
name|accept
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updating
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|BidirectionalListBinding
specifier|private
specifier|static
class|class
name|BidirectionalListBinding
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
implements|implements
name|ListChangeListener
argument_list|<
name|A
argument_list|>
implements|,
name|ChangeListener
argument_list|<
name|B
argument_list|>
block|{
DECL|field|listProperty
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|A
argument_list|>
name|listProperty
decl_stmt|;
DECL|field|property
specifier|private
specifier|final
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|property
decl_stmt|;
DECL|field|updateA
specifier|private
specifier|final
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
decl_stmt|;
DECL|field|updateB
specifier|private
specifier|final
name|Consumer
argument_list|<
name|List
argument_list|<
name|A
argument_list|>
argument_list|>
name|updateB
decl_stmt|;
DECL|field|updating
specifier|private
name|boolean
name|updating
init|=
literal|false
decl_stmt|;
DECL|method|BidirectionalListBinding (ObservableList<A> listProperty, ObservableValue<B> property, Consumer<B> updateA, Consumer<List<A>> updateB)
specifier|public
name|BidirectionalListBinding
parameter_list|(
name|ObservableList
argument_list|<
name|A
argument_list|>
name|listProperty
parameter_list|,
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|property
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|List
argument_list|<
name|A
argument_list|>
argument_list|>
name|updateB
parameter_list|)
block|{
name|this
operator|.
name|listProperty
operator|=
name|listProperty
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|updateA
operator|=
name|updateA
expr_stmt|;
name|this
operator|.
name|updateB
operator|=
name|updateB
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|changed (ObservableValue<? extends B> observable, B oldValue, B newValue)
specifier|public
name|void
name|changed
parameter_list|(
name|ObservableValue
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|observable
parameter_list|,
name|B
name|oldValue
parameter_list|,
name|B
name|newValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|updating
condition|)
block|{
try|try
block|{
name|updating
operator|=
literal|true
expr_stmt|;
name|updateA
operator|.
name|accept
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updating
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onChanged (Change<? extends A> c)
specifier|public
name|void
name|onChanged
parameter_list|(
name|Change
argument_list|<
name|?
extends|extends
name|A
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
operator|!
name|updating
condition|)
block|{
try|try
block|{
name|updating
operator|=
literal|true
expr_stmt|;
name|updateB
operator|.
name|accept
argument_list|(
name|listProperty
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updating
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|BidirectionalMapBinding
specifier|private
specifier|static
class|class
name|BidirectionalMapBinding
parameter_list|<
name|A
parameter_list|,
name|V
parameter_list|,
name|B
parameter_list|>
implements|implements
name|MapChangeListener
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
implements|,
name|ChangeListener
argument_list|<
name|B
argument_list|>
block|{
DECL|field|mapProperty
specifier|private
specifier|final
name|ObservableMap
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
name|mapProperty
decl_stmt|;
DECL|field|property
specifier|private
specifier|final
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|property
decl_stmt|;
DECL|field|updateA
specifier|private
specifier|final
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
decl_stmt|;
DECL|field|updateB
specifier|private
specifier|final
name|Consumer
argument_list|<
name|Map
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
argument_list|>
name|updateB
decl_stmt|;
DECL|field|updating
specifier|private
name|boolean
name|updating
init|=
literal|false
decl_stmt|;
DECL|method|BidirectionalMapBinding (ObservableMap<A, V> mapProperty, ObservableValue<B> property, Consumer<B> updateA, Consumer<Map<A, V>> updateB)
specifier|public
name|BidirectionalMapBinding
parameter_list|(
name|ObservableMap
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
name|mapProperty
parameter_list|,
name|ObservableValue
argument_list|<
name|B
argument_list|>
name|property
parameter_list|,
name|Consumer
argument_list|<
name|B
argument_list|>
name|updateA
parameter_list|,
name|Consumer
argument_list|<
name|Map
argument_list|<
name|A
argument_list|,
name|V
argument_list|>
argument_list|>
name|updateB
parameter_list|)
block|{
name|this
operator|.
name|mapProperty
operator|=
name|mapProperty
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
name|this
operator|.
name|updateA
operator|=
name|updateA
expr_stmt|;
name|this
operator|.
name|updateB
operator|=
name|updateB
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|changed (ObservableValue<? extends B> observable, B oldValue, B newValue)
specifier|public
name|void
name|changed
parameter_list|(
name|ObservableValue
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|observable
parameter_list|,
name|B
name|oldValue
parameter_list|,
name|B
name|newValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|updating
condition|)
block|{
try|try
block|{
name|updating
operator|=
literal|true
expr_stmt|;
name|updateA
operator|.
name|accept
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updating
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onChanged (Change<? extends A, ? extends V> c)
specifier|public
name|void
name|onChanged
parameter_list|(
name|Change
argument_list|<
name|?
extends|extends
name|A
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
operator|!
name|updating
condition|)
block|{
try|try
block|{
name|updating
operator|=
literal|true
expr_stmt|;
name|updateB
operator|.
name|accept
argument_list|(
name|mapProperty
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|updating
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

