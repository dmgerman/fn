begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|BooleanExpression
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|ObjectBinding
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|PreboundBinding
import|;
end_import

begin_comment
comment|/**  * Similar to {@link org.fxmisc.easybind.monadic.MonadicObservableValue}  */
end_comment

begin_class
DECL|class|OptionalObjectProperty
specifier|public
class|class
name|OptionalObjectProperty
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SimpleObjectProperty
argument_list|<
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|method|OptionalObjectProperty (Optional<T> initialValue)
specifier|private
name|OptionalObjectProperty
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|initialValue
parameter_list|)
block|{
name|super
argument_list|(
name|initialValue
argument_list|)
expr_stmt|;
block|}
DECL|method|empty ()
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|OptionalObjectProperty
argument_list|<
name|T
argument_list|>
name|empty
parameter_list|()
block|{
return|return
operator|new
name|OptionalObjectProperty
argument_list|<>
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a new ObservableValue that holds the value held by this      * ObservableValue, or {@code other} when this ObservableValue is empty.      */
DECL|method|orElse (T other)
specifier|public
name|ObjectBinding
argument_list|<
name|T
argument_list|>
name|orElse
parameter_list|(
name|T
name|other
parameter_list|)
block|{
return|return
operator|new
name|PreboundBinding
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|T
name|computeValue
parameter_list|()
block|{
return|return
name|OptionalObjectProperty
operator|.
name|this
operator|.
name|getValue
argument_list|()
operator|.
name|orElse
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|isPresent ()
specifier|public
name|BooleanExpression
name|isPresent
parameter_list|()
block|{
return|return
name|BooleanExpression
operator|.
name|booleanExpression
argument_list|(
operator|new
name|PreboundBinding
argument_list|<
name|Boolean
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Boolean
name|computeValue
parameter_list|()
block|{
return|return
name|OptionalObjectProperty
operator|.
name|this
operator|.
name|getValue
argument_list|()
operator|.
name|isPresent
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

