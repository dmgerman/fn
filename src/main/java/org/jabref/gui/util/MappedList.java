begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|transformation
operator|.
name|TransformationList
import|;
end_import

begin_comment
comment|/**  * MappedList implementation based on https://github.com/corda/corda/blob/master/client/jfx/src/main/kotlin/net/corda/client/jfx/utils/MappedList.kt  */
end_comment

begin_class
DECL|class|MappedList
specifier|public
specifier|final
class|class
name|MappedList
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
extends|extends
name|TransformationList
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
block|{
DECL|field|mapper
specifier|private
specifier|final
name|Function
argument_list|<
name|B
argument_list|,
name|A
argument_list|>
name|mapper
decl_stmt|;
DECL|field|backingList
specifier|private
specifier|final
name|List
argument_list|<
name|A
argument_list|>
name|backingList
decl_stmt|;
DECL|method|MappedList (ObservableList<? extends B> sourceList, Function<B, A> mapper)
specifier|public
name|MappedList
parameter_list|(
name|ObservableList
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|sourceList
parameter_list|,
name|Function
argument_list|<
name|B
argument_list|,
name|A
argument_list|>
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|sourceList
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|backingList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sourceList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sourceList
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|mapper
operator|::
name|apply
argument_list|)
operator|.
name|forEach
argument_list|(
name|backingList
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sourceChanged (ListChangeListener.Change<? extends B> change)
specifier|protected
name|void
name|sourceChanged
parameter_list|(
name|ListChangeListener
operator|.
name|Change
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|change
parameter_list|)
block|{
name|beginChange
argument_list|()
expr_stmt|;
while|while
condition|(
name|change
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|change
operator|.
name|wasPermutated
argument_list|()
condition|)
block|{
name|int
name|from
init|=
name|change
operator|.
name|getFrom
argument_list|()
decl_stmt|;
name|int
name|to
init|=
name|change
operator|.
name|getTo
argument_list|()
decl_stmt|;
comment|// get permutation array
name|int
index|[]
name|permutation
init|=
operator|new
name|int
index|[
name|to
operator|-
name|from
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|to
operator|-
name|from
condition|;
name|i
operator|++
control|)
block|{
name|permutation
index|[
name|i
index|]
operator|=
name|change
operator|.
name|getPermutation
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// perform permutation
name|Object
index|[]
name|permutedPart
init|=
operator|new
name|Object
index|[
name|to
operator|-
name|from
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
name|permutedPart
index|[
name|permutation
index|[
name|i
index|]
index|]
operator|=
name|backingList
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// update backingList
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
name|backingList
operator|.
name|set
argument_list|(
name|i
operator|+
name|from
argument_list|,
operator|(
name|A
operator|)
name|permutedPart
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|nextPermutation
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|permutation
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|change
operator|.
name|wasUpdated
argument_list|()
condition|)
block|{
name|backingList
operator|.
name|set
argument_list|(
name|change
operator|.
name|getFrom
argument_list|()
argument_list|,
name|mapper
operator|.
name|apply
argument_list|(
name|getSource
argument_list|()
operator|.
name|get
argument_list|(
name|change
operator|.
name|getFrom
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nextUpdate
argument_list|(
name|change
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|wasRemoved
argument_list|()
condition|)
block|{
name|int
name|removePosition
init|=
name|change
operator|.
name|getFrom
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|A
argument_list|>
name|removed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|change
operator|.
name|getRemovedSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|change
operator|.
name|getRemovedSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|removed
operator|.
name|add
argument_list|(
name|backingList
operator|.
name|remove
argument_list|(
name|removePosition
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nextRemove
argument_list|(
name|change
operator|.
name|getFrom
argument_list|()
argument_list|,
name|removed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|change
operator|.
name|wasAdded
argument_list|()
condition|)
block|{
name|int
name|addStart
init|=
name|change
operator|.
name|getFrom
argument_list|()
decl_stmt|;
name|int
name|addEnd
init|=
name|change
operator|.
name|getTo
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|addStart
init|;
name|i
operator|<
name|addEnd
condition|;
name|i
operator|++
control|)
block|{
name|backingList
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|mapper
operator|.
name|apply
argument_list|(
name|change
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nextAdd
argument_list|(
name|addStart
argument_list|,
name|addEnd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|endChange
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSourceIndex (int index)
specifier|public
name|int
name|getSourceIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|A
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|backingList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|backingList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

