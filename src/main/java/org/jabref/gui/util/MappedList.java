begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|transformation
operator|.
name|TransformationList
import|;
end_import

begin_comment
comment|/**  * MappedList implementation based on https://gist.github.com/TomasMikula/8883719  *  * @author https://github.com/TomasMikula  */
end_comment

begin_class
DECL|class|MappedList
specifier|public
specifier|final
class|class
name|MappedList
parameter_list|<
name|A
parameter_list|,
name|B
parameter_list|>
extends|extends
name|TransformationList
argument_list|<
name|A
argument_list|,
name|B
argument_list|>
block|{
DECL|field|mapper
specifier|private
specifier|final
name|Function
argument_list|<
name|B
argument_list|,
name|A
argument_list|>
name|mapper
decl_stmt|;
DECL|method|MappedList (ObservableList<? extends B> sourceList, Function<B, A> mapper)
specifier|public
name|MappedList
parameter_list|(
name|ObservableList
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|sourceList
parameter_list|,
name|Function
argument_list|<
name|B
argument_list|,
name|A
argument_list|>
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|sourceList
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sourceChanged (ListChangeListener.Change<? extends B> change)
specifier|protected
name|void
name|sourceChanged
parameter_list|(
name|ListChangeListener
operator|.
name|Change
argument_list|<
name|?
extends|extends
name|B
argument_list|>
name|change
parameter_list|)
block|{
name|fireChange
argument_list|(
operator|new
name|ListChangeListener
operator|.
name|Change
argument_list|<
name|A
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|wasAdded
parameter_list|()
block|{
return|return
name|change
operator|.
name|wasAdded
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|wasRemoved
parameter_list|()
block|{
return|return
name|change
operator|.
name|wasRemoved
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|wasReplaced
parameter_list|()
block|{
return|return
name|change
operator|.
name|wasReplaced
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|wasUpdated
parameter_list|()
block|{
return|return
name|change
operator|.
name|wasUpdated
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|wasPermutated
parameter_list|()
block|{
return|return
name|change
operator|.
name|wasPermutated
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPermutation
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|change
operator|.
name|getPermutation
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
index|[]
name|getPermutation
parameter_list|()
block|{
comment|// This method is only called by the superclass methods
comment|// wasPermutated() and getPermutation(int), which are
comment|// both overridden by this class. There is no other way
comment|// this method can be called.
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unreachable code"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|A
argument_list|>
name|getRemoved
parameter_list|()
block|{
name|List
argument_list|<
name|A
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|change
operator|.
name|getRemovedSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|B
name|element
range|:
name|change
operator|.
name|getRemoved
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|apply
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFrom
parameter_list|()
block|{
return|return
name|change
operator|.
name|getFrom
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTo
parameter_list|()
block|{
return|return
name|change
operator|.
name|getTo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|()
block|{
return|return
name|change
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|change
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSourceIndex (int index)
specifier|public
name|int
name|getSourceIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|get (int index)
specifier|public
name|A
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|mapper
operator|.
name|apply
argument_list|(
name|super
operator|.
name|getSource
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|super
operator|.
name|getSource
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

