begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|DoubleProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleDoubleProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_comment
comment|/**  * This class is essentially a wrapper around {@link Task}.  * We cannot use {@link Task} directly since it runs certain update notifications on the JavaFX thread,  * and so makes testing harder.  * We take the opportunity and implement a fluid interface.  *  * @param<V> type of the return value of the task  */
end_comment

begin_class
DECL|class|BackgroundTask
specifier|public
specifier|abstract
class|class
name|BackgroundTask
parameter_list|<
name|V
parameter_list|>
block|{
DECL|field|onRunning
specifier|private
name|Runnable
name|onRunning
decl_stmt|;
DECL|field|onSuccess
specifier|private
name|Consumer
argument_list|<
name|V
argument_list|>
name|onSuccess
decl_stmt|;
DECL|field|onException
specifier|private
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onException
decl_stmt|;
DECL|field|onFinished
specifier|private
name|Runnable
name|onFinished
decl_stmt|;
DECL|field|progress
specifier|private
name|ObjectProperty
argument_list|<
name|BackgroundProgress
argument_list|>
name|progress
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|(
operator|new
name|BackgroundProgress
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|workDonePercentage
specifier|private
name|DoubleProperty
name|workDonePercentage
init|=
operator|new
name|SimpleDoubleProperty
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|BackgroundTask ()
specifier|public
name|BackgroundTask
parameter_list|()
block|{
name|workDonePercentage
operator|.
name|bind
argument_list|(
name|EasyBind
operator|.
name|map
argument_list|(
name|progress
argument_list|,
name|BackgroundTask
operator|.
name|BackgroundProgress
operator|::
name|getWorkDonePercentage
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|wrap (Callable<V> callable)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|wrap
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|BackgroundTask
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|V
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|getWorkDonePercentage ()
specifier|public
name|double
name|getWorkDonePercentage
parameter_list|()
block|{
return|return
name|workDonePercentage
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|workDonePercentageProperty ()
specifier|public
name|DoubleProperty
name|workDonePercentageProperty
parameter_list|()
block|{
return|return
name|workDonePercentage
return|;
block|}
DECL|method|getProgress ()
specifier|public
name|BackgroundProgress
name|getProgress
parameter_list|()
block|{
return|return
name|progress
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|progressProperty ()
specifier|public
name|ObjectProperty
argument_list|<
name|BackgroundProgress
argument_list|>
name|progressProperty
parameter_list|()
block|{
return|return
name|progress
return|;
block|}
DECL|method|chain (Runnable first, Consumer<T> second)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Consumer
argument_list|<
name|T
argument_list|>
name|chain
parameter_list|(
name|Runnable
name|first
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|second
operator|!=
literal|null
condition|)
block|{
return|return
name|result
lambda|->
block|{
name|first
operator|.
name|run
argument_list|()
expr_stmt|;
name|second
operator|.
name|accept
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|;
block|}
else|else
block|{
return|return
name|result
lambda|->
name|first
operator|.
name|run
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|second
return|;
block|}
block|}
comment|/**      * Sets the {@link Runnable} that is invoked after the task is started.      */
DECL|method|onRunning (Runnable onRunning)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onRunning
parameter_list|(
name|Runnable
name|onRunning
parameter_list|)
block|{
name|this
operator|.
name|onRunning
operator|=
name|onRunning
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link Consumer} that is invoked after the task is successfully finished.      */
DECL|method|onSuccess (Consumer<V> onSuccess)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onSuccess
parameter_list|(
name|Consumer
argument_list|<
name|V
argument_list|>
name|onSuccess
parameter_list|)
block|{
name|this
operator|.
name|onSuccess
operator|=
name|onSuccess
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|call ()
specifier|protected
specifier|abstract
name|V
name|call
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|getOnRunning ()
name|Runnable
name|getOnRunning
parameter_list|()
block|{
return|return
name|onRunning
return|;
block|}
DECL|method|getOnSuccess ()
name|Consumer
argument_list|<
name|V
argument_list|>
name|getOnSuccess
parameter_list|()
block|{
return|return
name|chain
argument_list|(
name|onFinished
argument_list|,
name|onSuccess
argument_list|)
return|;
block|}
DECL|method|getOnException ()
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|getOnException
parameter_list|()
block|{
return|return
name|chain
argument_list|(
name|onFinished
argument_list|,
name|onException
argument_list|)
return|;
block|}
DECL|method|onFailure (Consumer<Exception> onException)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onFailure
parameter_list|(
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onException
parameter_list|)
block|{
name|this
operator|.
name|onException
operator|=
name|onException
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|executeWith (TaskExecutor taskExecutor)
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|executeWith
parameter_list|(
name|TaskExecutor
name|taskExecutor
parameter_list|)
block|{
return|return
name|taskExecutor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Sets the {@link Runnable} that is invoked after the task is finished, irrespectively if it was successful or      * failed with an error.      */
DECL|method|onFinished (Runnable onFinished)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onFinished
parameter_list|(
name|Runnable
name|onFinished
parameter_list|)
block|{
name|this
operator|.
name|onFinished
operator|=
name|onFinished
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|updateProgress (double workDone, double max)
specifier|protected
name|void
name|updateProgress
parameter_list|(
name|double
name|workDone
parameter_list|,
name|double
name|max
parameter_list|)
block|{
name|progress
operator|.
name|setValue
argument_list|(
operator|new
name|BackgroundProgress
argument_list|(
name|workDone
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|BackgroundProgress
specifier|public
class|class
name|BackgroundProgress
block|{
DECL|field|workDone
specifier|private
specifier|final
name|double
name|workDone
decl_stmt|;
DECL|field|max
specifier|private
specifier|final
name|double
name|max
decl_stmt|;
DECL|method|BackgroundProgress (double workDone, double max)
specifier|public
name|BackgroundProgress
parameter_list|(
name|double
name|workDone
parameter_list|,
name|double
name|max
parameter_list|)
block|{
name|this
operator|.
name|workDone
operator|=
name|workDone
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|getWorkDone ()
specifier|public
name|double
name|getWorkDone
parameter_list|()
block|{
return|return
name|workDone
return|;
block|}
DECL|method|getMax ()
specifier|public
name|double
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
DECL|method|getWorkDonePercentage ()
specifier|public
name|double
name|getWorkDonePercentage
parameter_list|()
block|{
if|if
condition|(
name|max
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|workDone
operator|/
name|max
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

