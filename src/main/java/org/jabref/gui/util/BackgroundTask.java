begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_comment
comment|/**  * This class is essentially a wrapper around {@link Task}.  * We cannot use {@link Task} directly since it runs certain update notifications on the JavaFX thread,  * and so makes testing harder.  * We take the opportunity and implement a fluid interface.  *  * @param<V> type of the return value of the task  */
end_comment

begin_class
DECL|class|BackgroundTask
specifier|public
class|class
name|BackgroundTask
parameter_list|<
name|V
parameter_list|>
block|{
DECL|field|callable
specifier|private
specifier|final
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
decl_stmt|;
DECL|field|onRunning
specifier|private
name|Runnable
name|onRunning
decl_stmt|;
DECL|field|onSuccess
specifier|private
name|Consumer
argument_list|<
name|V
argument_list|>
name|onSuccess
decl_stmt|;
DECL|field|onException
specifier|private
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onException
decl_stmt|;
DECL|method|BackgroundTask (Callable<V> callable)
specifier|private
name|BackgroundTask
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|this
operator|.
name|callable
operator|=
name|callable
expr_stmt|;
block|}
DECL|method|wrap (Callable<V> callable)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|wrap
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
return|return
operator|new
name|BackgroundTask
argument_list|<>
argument_list|(
name|callable
argument_list|)
return|;
block|}
DECL|method|onRunning (Runnable onRunning)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onRunning
parameter_list|(
name|Runnable
name|onRunning
parameter_list|)
block|{
name|this
operator|.
name|onRunning
operator|=
name|onRunning
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|onSuccess (Consumer<V> onSuccess)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onSuccess
parameter_list|(
name|Consumer
argument_list|<
name|V
argument_list|>
name|onSuccess
parameter_list|)
block|{
name|this
operator|.
name|onSuccess
operator|=
name|onSuccess
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|call ()
specifier|public
name|V
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|callable
operator|.
name|call
argument_list|()
return|;
block|}
DECL|method|getOnRunning ()
specifier|public
name|Runnable
name|getOnRunning
parameter_list|()
block|{
return|return
name|onRunning
return|;
block|}
DECL|method|getOnSuccess ()
specifier|public
name|Consumer
argument_list|<
name|V
argument_list|>
name|getOnSuccess
parameter_list|()
block|{
return|return
name|onSuccess
return|;
block|}
DECL|method|getOnException ()
specifier|public
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|getOnException
parameter_list|()
block|{
return|return
name|onException
return|;
block|}
DECL|method|onFailure (Consumer<Exception> onException)
specifier|public
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|onFailure
parameter_list|(
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onException
parameter_list|)
block|{
name|this
operator|.
name|onException
operator|=
name|onException
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|executeWith (TaskExecutor taskExecutor)
specifier|public
name|void
name|executeWith
parameter_list|(
name|TaskExecutor
name|taskExecutor
parameter_list|)
block|{
name|taskExecutor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

