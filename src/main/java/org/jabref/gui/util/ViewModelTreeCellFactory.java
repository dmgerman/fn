begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|value
operator|.
name|ObservableValue
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBoxTreeItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeItem
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|CheckBoxTreeCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|JabRefIcon
import|;
end_import

begin_comment
comment|/**  * Constructs a {@link TreeTableCell} based on the view model of the row and a bunch of specified converter methods.  *  * @param<S> view model  * @param<T> cell value  */
end_comment

begin_class
DECL|class|ViewModelTreeCellFactory
specifier|public
class|class
name|ViewModelTreeCellFactory
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callback
argument_list|<
name|TreeView
argument_list|<
name|T
argument_list|>
argument_list|,
name|TreeCell
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|toText
specifier|private
name|Callback
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|toText
decl_stmt|;
DECL|field|toGraphic
specifier|private
name|Callback
argument_list|<
name|T
argument_list|,
name|Node
argument_list|>
name|toGraphic
decl_stmt|;
DECL|field|toOnMouseClickedEvent
specifier|private
name|Callback
argument_list|<
name|T
argument_list|,
name|EventHandler
argument_list|<
name|?
super|super
name|MouseEvent
argument_list|>
argument_list|>
name|toOnMouseClickedEvent
decl_stmt|;
DECL|field|toTooltip
specifier|private
name|Callback
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|toTooltip
decl_stmt|;
DECL|method|withText (Callback<T, String> toText)
specifier|public
name|ViewModelTreeCellFactory
argument_list|<
name|T
argument_list|>
name|withText
parameter_list|(
name|Callback
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|toText
parameter_list|)
block|{
name|this
operator|.
name|toText
operator|=
name|toText
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withGraphic (Callback<T, Node> toGraphic)
specifier|public
name|ViewModelTreeCellFactory
argument_list|<
name|T
argument_list|>
name|withGraphic
parameter_list|(
name|Callback
argument_list|<
name|T
argument_list|,
name|Node
argument_list|>
name|toGraphic
parameter_list|)
block|{
name|this
operator|.
name|toGraphic
operator|=
name|toGraphic
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withIcon (Callback<T, JabRefIcon> toIcon)
specifier|public
name|ViewModelTreeCellFactory
argument_list|<
name|T
argument_list|>
name|withIcon
parameter_list|(
name|Callback
argument_list|<
name|T
argument_list|,
name|JabRefIcon
argument_list|>
name|toIcon
parameter_list|)
block|{
name|this
operator|.
name|toGraphic
operator|=
name|viewModel
lambda|->
name|toIcon
operator|.
name|call
argument_list|(
name|viewModel
argument_list|)
operator|.
name|getGraphicNode
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withTooltip (Callback<T, String> toTooltip)
specifier|public
name|ViewModelTreeCellFactory
argument_list|<
name|T
argument_list|>
name|withTooltip
parameter_list|(
name|Callback
argument_list|<
name|T
argument_list|,
name|String
argument_list|>
name|toTooltip
parameter_list|)
block|{
name|this
operator|.
name|toTooltip
operator|=
name|toTooltip
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withOnMouseClickedEvent (Callback<T, EventHandler<? super MouseEvent>> toOnMouseClickedEvent)
specifier|public
name|ViewModelTreeCellFactory
argument_list|<
name|T
argument_list|>
name|withOnMouseClickedEvent
parameter_list|(
name|Callback
argument_list|<
name|T
argument_list|,
name|EventHandler
argument_list|<
name|?
super|super
name|MouseEvent
argument_list|>
argument_list|>
name|toOnMouseClickedEvent
parameter_list|)
block|{
name|this
operator|.
name|toOnMouseClickedEvent
operator|=
name|toOnMouseClickedEvent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|install (TreeView<T> treeView)
specifier|public
name|void
name|install
parameter_list|(
name|TreeView
argument_list|<
name|T
argument_list|>
name|treeView
parameter_list|)
block|{
name|treeView
operator|.
name|setCellFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call (TreeView<T> tree)
specifier|public
name|TreeCell
argument_list|<
name|T
argument_list|>
name|call
parameter_list|(
name|TreeView
argument_list|<
name|T
argument_list|>
name|tree
parameter_list|)
block|{
name|Callback
argument_list|<
name|TreeItem
argument_list|<
name|T
argument_list|>
argument_list|,
name|ObservableValue
argument_list|<
name|Boolean
argument_list|>
argument_list|>
name|getSelectedProperty
init|=
name|item
lambda|->
block|{
if|if
condition|(
name|item
operator|instanceof
name|CheckBoxTreeItem
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
operator|(
name|CheckBoxTreeItem
argument_list|<
name|?
argument_list|>
operator|)
name|item
operator|)
operator|.
name|selectedProperty
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
name|StringConverter
argument_list|<
name|TreeItem
argument_list|<
name|T
argument_list|>
argument_list|>
name|converter
init|=
operator|new
name|StringConverter
argument_list|<
name|TreeItem
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|TreeItem
argument_list|<
name|T
argument_list|>
name|treeItem
parameter_list|)
block|{
return|return
operator|(
name|treeItem
operator|==
literal|null
operator|||
name|treeItem
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|toText
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|toText
operator|.
name|call
argument_list|(
name|treeItem
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TreeItem
argument_list|<
name|T
argument_list|>
name|fromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|CheckBoxTreeCell
argument_list|<>
argument_list|(
name|getSelectedProperty
argument_list|,
name|converter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

