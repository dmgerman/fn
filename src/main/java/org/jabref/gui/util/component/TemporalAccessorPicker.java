begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util.component
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|DateTimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Year
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|YearMonth
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalAccessor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalQueries
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|DatePicker
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BindingsHelper
import|;
end_import

begin_comment
comment|/**  * A date picker with configurable datetime format where both date and time can be changed via the text field and the  * date can additionally be changed via the JavaFX default date picker. Also supports incomplete dates.  *  * First recall how the date picker normally works: - The user selects a date in the popup, which sets {@link  * #valueProperty()} to the selected date. - The converter ({@link #converterProperty()}) is used to transform the date  * to a string representation and display it in the text field.  *  * The idea is now to intercept the process and add an additional step: - The user selects a date in the popup, which  * sets {@link #valueProperty()} to the selected date. - The date is converted to a {@link TemporalAccessor} (i.e,  * enriched by a time component) using {@link #addCurrentTime(LocalDate)} - The string converter ({@link  * #stringConverterProperty()}) is used to transform the temporal accessor to a string representation and display it in  * the text field.  *  * Inspiration taken from https://github.com/edvin/tornadofx-controls/blob/master/src/main/java/tornadofx/control/DateTimePicker.java  */
end_comment

begin_class
DECL|class|TemporalAccessorPicker
specifier|public
class|class
name|TemporalAccessorPicker
extends|extends
name|DatePicker
block|{
DECL|field|temporalAccessorValue
specifier|private
name|ObjectProperty
argument_list|<
name|TemporalAccessor
argument_list|>
name|temporalAccessorValue
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|(
name|LocalDateTime
operator|.
name|now
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|defaultFormatter
specifier|private
name|DateTimeFormatter
name|defaultFormatter
init|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|field|converter
specifier|private
name|ObjectProperty
argument_list|<
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
argument_list|>
name|converter
init|=
operator|new
name|SimpleObjectProperty
argument_list|<
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|TemporalAccessorPicker ()
specifier|public
name|TemporalAccessorPicker
parameter_list|()
block|{
name|setConverter
argument_list|(
operator|new
name|InternalConverter
argument_list|()
argument_list|)
expr_stmt|;
comment|// Synchronize changes of the underlying date value with the temporalAccessorValue
name|BindingsHelper
operator|.
name|bindBidirectional
argument_list|(
name|valueProperty
argument_list|()
argument_list|,
name|temporalAccessorValue
argument_list|,
name|TemporalAccessorPicker
operator|::
name|addCurrentTime
argument_list|,
name|TemporalAccessorPicker
operator|::
name|getDate
argument_list|)
expr_stmt|;
block|}
DECL|method|addCurrentTime (LocalDate date)
specifier|private
specifier|static
name|TemporalAccessor
name|addCurrentTime
parameter_list|(
name|LocalDate
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|LocalDateTime
operator|.
name|of
argument_list|(
name|date
argument_list|,
name|LocalTime
operator|.
name|now
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDate (TemporalAccessor temporalAccessor)
specifier|private
specifier|static
name|LocalDate
name|getDate
parameter_list|(
name|TemporalAccessor
name|temporalAccessor
parameter_list|)
block|{
if|if
condition|(
name|temporalAccessor
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getLocalDate
argument_list|(
name|temporalAccessor
argument_list|)
return|;
block|}
DECL|method|getLocalDate (TemporalAccessor dateTime)
specifier|private
specifier|static
name|LocalDate
name|getLocalDate
parameter_list|(
name|TemporalAccessor
name|dateTime
parameter_list|)
block|{
comment|// Try to get as much information from the temporal accessor
name|LocalDate
name|date
init|=
name|dateTime
operator|.
name|query
argument_list|(
name|TemporalQueries
operator|.
name|localDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
return|return
name|date
return|;
block|}
try|try
block|{
return|return
name|YearMonth
operator|.
name|from
argument_list|(
name|dateTime
argument_list|)
operator|.
name|atDay
argument_list|(
literal|1
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeException
name|exception
parameter_list|)
block|{
return|return
name|Year
operator|.
name|from
argument_list|(
name|dateTime
argument_list|)
operator|.
name|atDay
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
DECL|method|stringConverterProperty ()
specifier|public
specifier|final
name|ObjectProperty
argument_list|<
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
argument_list|>
name|stringConverterProperty
parameter_list|()
block|{
return|return
name|converter
return|;
block|}
DECL|method|getStringConverter ()
specifier|public
specifier|final
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
name|getStringConverter
parameter_list|()
block|{
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
name|converter
init|=
name|stringConverterProperty
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|converter
operator|!=
literal|null
condition|)
block|{
return|return
name|converter
return|;
block|}
else|else
block|{
return|return
operator|new
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|TemporalAccessor
name|value
parameter_list|)
block|{
return|return
name|defaultFormatter
operator|.
name|format
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TemporalAccessor
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|defaultFormatter
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|setStringConverter (StringConverter<TemporalAccessor> value)
specifier|public
specifier|final
name|void
name|setStringConverter
parameter_list|(
name|StringConverter
argument_list|<
name|TemporalAccessor
argument_list|>
name|value
parameter_list|)
block|{
name|stringConverterProperty
argument_list|()
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getTemporalAccessorValue ()
specifier|public
name|TemporalAccessor
name|getTemporalAccessorValue
parameter_list|()
block|{
return|return
name|temporalAccessorValue
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setTemporalAccessorValue (TemporalAccessor temporalAccessorValue)
specifier|public
name|void
name|setTemporalAccessorValue
parameter_list|(
name|TemporalAccessor
name|temporalAccessorValue
parameter_list|)
block|{
name|this
operator|.
name|temporalAccessorValue
operator|.
name|set
argument_list|(
name|temporalAccessorValue
argument_list|)
expr_stmt|;
block|}
DECL|method|temporalAccessorValueProperty ()
specifier|public
name|ObjectProperty
argument_list|<
name|TemporalAccessor
argument_list|>
name|temporalAccessorValueProperty
parameter_list|()
block|{
return|return
name|temporalAccessorValue
return|;
block|}
DECL|class|InternalConverter
specifier|private
class|class
name|InternalConverter
extends|extends
name|StringConverter
argument_list|<
name|LocalDate
argument_list|>
block|{
DECL|method|toString (LocalDate object)
specifier|public
name|String
name|toString
parameter_list|(
name|LocalDate
name|object
parameter_list|)
block|{
name|TemporalAccessor
name|value
init|=
name|getTemporalAccessorValue
argument_list|()
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|getStringConverter
argument_list|()
operator|.
name|toString
argument_list|(
name|value
argument_list|)
else|:
literal|""
return|;
block|}
DECL|method|fromString (String value)
specifier|public
name|LocalDate
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|temporalAccessorValue
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|TemporalAccessor
name|dateTime
init|=
name|getStringConverter
argument_list|()
operator|.
name|fromString
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|temporalAccessorValue
operator|.
name|set
argument_list|(
name|dateTime
argument_list|)
expr_stmt|;
return|return
name|getLocalDate
argument_list|(
name|dateTime
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

