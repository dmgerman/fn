begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|IEEEField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|InternalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|SpecialField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|UnknownField
import|;
end_import

begin_class
DECL|class|FieldsUtil
specifier|public
class|class
name|FieldsUtil
block|{
DECL|field|fieldStringConverter
specifier|public
specifier|static
name|StringConverter
argument_list|<
name|Field
argument_list|>
name|fieldStringConverter
init|=
operator|new
name|StringConverter
argument_list|<>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|Field
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
return|return
name|object
operator|.
name|getDisplayName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Field
name|fromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|FieldFactory
operator|.
name|parseField
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|method|getNameWithType (Field field)
specifier|public
specifier|static
name|String
name|getNameWithType
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|instanceof
name|SpecialField
condition|)
block|{
return|return
name|field
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" ("
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Special"
argument_list|)
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|IEEEField
condition|)
block|{
return|return
name|field
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" ("
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"IEEE"
argument_list|)
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|InternalField
condition|)
block|{
return|return
name|field
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" ("
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Internal"
argument_list|)
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|UnknownField
condition|)
block|{
return|return
name|field
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" ("
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"Custom"
argument_list|)
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|ExtraFilePseudoField
condition|)
block|{
return|return
name|field
operator|.
name|getDisplayName
argument_list|()
operator|+
literal|" ("
operator|+
name|Localization
operator|.
name|lang
argument_list|(
literal|"File type"
argument_list|)
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
name|field
operator|.
name|getDisplayName
argument_list|()
return|;
block|}
block|}
DECL|class|ExtraFilePseudoField
specifier|public
specifier|static
class|class
name|ExtraFilePseudoField
implements|implements
name|Field
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|method|ExtraFilePseudoField (String name)
specifier|public
name|ExtraFilePseudoField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProperties ()
specifier|public
name|Set
argument_list|<
name|FieldProperty
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|isStandardField ()
specifier|public
name|boolean
name|isStandardField
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

