begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ContextMenu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableRow
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_comment
comment|/**  * Constructs a {@link TreeTableCell} based on the view model of the row and a bunch of specified converter methods.  *  * @param<S> view model  */
end_comment

begin_class
DECL|class|ViewModelTableRowFactory
specifier|public
class|class
name|ViewModelTableRowFactory
parameter_list|<
name|S
parameter_list|>
implements|implements
name|Callback
argument_list|<
name|TableView
argument_list|<
name|S
argument_list|>
argument_list|,
name|TableRow
argument_list|<
name|S
argument_list|>
argument_list|>
block|{
DECL|field|onMouseClickedEvent
specifier|private
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|onMouseClickedEvent
decl_stmt|;
DECL|field|contextMenuFactory
specifier|private
name|Function
argument_list|<
name|S
argument_list|,
name|ContextMenu
argument_list|>
name|contextMenuFactory
decl_stmt|;
DECL|method|withOnMouseClickedEvent (BiConsumer<S, ? super MouseEvent> onMouseClickedEvent)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|withOnMouseClickedEvent
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|onMouseClickedEvent
parameter_list|)
block|{
name|this
operator|.
name|onMouseClickedEvent
operator|=
name|onMouseClickedEvent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withContextMenu (Function<S, ContextMenu> contextMenuFactory)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|withContextMenu
parameter_list|(
name|Function
argument_list|<
name|S
argument_list|,
name|ContextMenu
argument_list|>
name|contextMenuFactory
parameter_list|)
block|{
name|this
operator|.
name|contextMenuFactory
operator|=
name|contextMenuFactory
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|call (TableView<S> tableView)
specifier|public
name|TableRow
argument_list|<
name|S
argument_list|>
name|call
parameter_list|(
name|TableView
argument_list|<
name|S
argument_list|>
name|tableView
parameter_list|)
block|{
name|TableRow
argument_list|<
name|S
argument_list|>
name|row
init|=
operator|new
name|TableRow
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|onMouseClickedEvent
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnMouseClicked
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onMouseClickedEvent
operator|.
name|accept
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextMenuFactory
operator|!=
literal|null
condition|)
block|{
comment|// We only create the context menu when really necessary
name|row
operator|.
name|setOnContextMenuRequested
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|.
name|setContextMenu
argument_list|(
name|contextMenuFactory
operator|.
name|apply
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|getContextMenu
argument_list|()
operator|.
name|show
argument_list|(
name|row
argument_list|,
name|event
operator|.
name|getScreenX
argument_list|()
argument_list|,
name|event
operator|.
name|getScreenY
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
block|}
end_class

end_unit

