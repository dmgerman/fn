begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Bounds
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Point2D
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ContextMenu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableRow
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TreeTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|DragEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyCode
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|MouseDragEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|MouseEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reactfx
operator|.
name|util
operator|.
name|TriConsumer
import|;
end_import

begin_comment
comment|/**  * Constructs a {@link TreeTableCell} based on the view model of the row and a bunch of specified converter methods.  *  * @param<S> view model  */
end_comment

begin_class
DECL|class|ViewModelTableRowFactory
specifier|public
class|class
name|ViewModelTableRowFactory
parameter_list|<
name|S
parameter_list|>
implements|implements
name|Callback
argument_list|<
name|TableView
argument_list|<
name|S
argument_list|>
argument_list|,
name|TableRow
argument_list|<
name|S
argument_list|>
argument_list|>
block|{
DECL|field|onMouseClickedEvent
specifier|private
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|onMouseClickedEvent
decl_stmt|;
DECL|field|contextMenuFactory
specifier|private
name|Function
argument_list|<
name|S
argument_list|,
name|ContextMenu
argument_list|>
name|contextMenuFactory
decl_stmt|;
DECL|field|toOnDragDetected
specifier|private
name|TriConsumer
argument_list|<
name|TableRow
argument_list|<
name|S
argument_list|>
argument_list|,
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|toOnDragDetected
decl_stmt|;
DECL|field|toOnDragDropped
specifier|private
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragDropped
decl_stmt|;
DECL|field|toOnDragEntered
specifier|private
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragEntered
decl_stmt|;
DECL|field|toOnDragExited
specifier|private
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragExited
decl_stmt|;
DECL|field|toOnDragOver
specifier|private
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragOver
decl_stmt|;
DECL|field|toOnMouseDragEntered
specifier|private
name|TriConsumer
argument_list|<
name|TableRow
argument_list|<
name|S
argument_list|>
argument_list|,
name|S
argument_list|,
name|?
super|super
name|MouseDragEvent
argument_list|>
name|toOnMouseDragEntered
decl_stmt|;
DECL|field|toTooltip
specifier|private
name|Callback
argument_list|<
name|S
argument_list|,
name|String
argument_list|>
name|toTooltip
decl_stmt|;
DECL|method|withOnMouseClickedEvent (BiConsumer<S, ? super MouseEvent> onMouseClickedEvent)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|withOnMouseClickedEvent
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|onMouseClickedEvent
parameter_list|)
block|{
name|this
operator|.
name|onMouseClickedEvent
operator|=
name|onMouseClickedEvent
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withContextMenu (Function<S, ContextMenu> contextMenuFactory)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|withContextMenu
parameter_list|(
name|Function
argument_list|<
name|S
argument_list|,
name|ContextMenu
argument_list|>
name|contextMenuFactory
parameter_list|)
block|{
name|this
operator|.
name|contextMenuFactory
operator|=
name|contextMenuFactory
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnDragDetected (TriConsumer<TableRow<S>, S, ? super MouseEvent> toOnDragDetected)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnDragDetected
parameter_list|(
name|TriConsumer
argument_list|<
name|TableRow
argument_list|<
name|S
argument_list|>
argument_list|,
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|toOnDragDetected
parameter_list|)
block|{
name|this
operator|.
name|toOnDragDetected
operator|=
name|toOnDragDetected
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnDragDetected (BiConsumer<S, ? super MouseEvent> toOnDragDetected)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnDragDetected
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|MouseEvent
argument_list|>
name|toOnDragDetected
parameter_list|)
block|{
name|this
operator|.
name|toOnDragDetected
operator|=
parameter_list|(
name|row
parameter_list|,
name|viewModel
parameter_list|,
name|event
parameter_list|)
lambda|->
name|toOnDragDetected
operator|.
name|accept
argument_list|(
name|viewModel
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnDragDropped (BiConsumer<S, ? super DragEvent> toOnDragDropped)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnDragDropped
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragDropped
parameter_list|)
block|{
name|this
operator|.
name|toOnDragDropped
operator|=
name|toOnDragDropped
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnDragEntered (BiConsumer<S, ? super DragEvent> toOnDragEntered)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnDragEntered
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragEntered
parameter_list|)
block|{
name|this
operator|.
name|toOnDragEntered
operator|=
name|toOnDragEntered
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnMouseDragEntered (BiConsumer<S, ? super MouseDragEvent> toOnDragEntered)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnMouseDragEntered
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|MouseDragEvent
argument_list|>
name|toOnDragEntered
parameter_list|)
block|{
name|this
operator|.
name|toOnMouseDragEntered
operator|=
parameter_list|(
name|row
parameter_list|,
name|viewModel
parameter_list|,
name|event
parameter_list|)
lambda|->
name|toOnDragEntered
operator|.
name|accept
argument_list|(
name|viewModel
argument_list|,
name|event
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnMouseDragEntered (TriConsumer<TableRow<S>, S, ? super MouseDragEvent> toOnDragEntered)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnMouseDragEntered
parameter_list|(
name|TriConsumer
argument_list|<
name|TableRow
argument_list|<
name|S
argument_list|>
argument_list|,
name|S
argument_list|,
name|?
super|super
name|MouseDragEvent
argument_list|>
name|toOnDragEntered
parameter_list|)
block|{
name|this
operator|.
name|toOnMouseDragEntered
operator|=
name|toOnDragEntered
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnDragExited (BiConsumer<S, ? super DragEvent> toOnDragExited)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnDragExited
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragExited
parameter_list|)
block|{
name|this
operator|.
name|toOnDragExited
operator|=
name|toOnDragExited
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setOnDragOver (BiConsumer<S, ? super DragEvent> toOnDragOver)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|setOnDragOver
parameter_list|(
name|BiConsumer
argument_list|<
name|S
argument_list|,
name|?
super|super
name|DragEvent
argument_list|>
name|toOnDragOver
parameter_list|)
block|{
name|this
operator|.
name|toOnDragOver
operator|=
name|toOnDragOver
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withTooltip (Callback<S, String> toTooltip)
specifier|public
name|ViewModelTableRowFactory
argument_list|<
name|S
argument_list|>
name|withTooltip
parameter_list|(
name|Callback
argument_list|<
name|S
argument_list|,
name|String
argument_list|>
name|toTooltip
parameter_list|)
block|{
name|this
operator|.
name|toTooltip
operator|=
name|toTooltip
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|call (TableView<S> tableView)
specifier|public
name|TableRow
argument_list|<
name|S
argument_list|>
name|call
parameter_list|(
name|TableView
argument_list|<
name|S
argument_list|>
name|tableView
parameter_list|)
block|{
name|TableRow
argument_list|<
name|S
argument_list|>
name|row
init|=
operator|new
name|TableRow
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|toTooltip
operator|!=
literal|null
condition|)
block|{
name|String
name|tooltipText
init|=
name|toTooltip
operator|.
name|call
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isNotBlank
argument_list|(
name|tooltipText
argument_list|)
condition|)
block|{
name|row
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|tooltipText
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|onMouseClickedEvent
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnMouseClicked
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onMouseClickedEvent
operator|.
name|accept
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextMenuFactory
operator|!=
literal|null
condition|)
block|{
comment|// We only create the context menu when really necessary
name|row
operator|.
name|setOnContextMenuRequested
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|.
name|setContextMenu
argument_list|(
name|contextMenuFactory
operator|.
name|apply
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|getContextMenu
argument_list|()
operator|.
name|show
argument_list|(
name|row
argument_list|,
name|event
operator|.
name|getScreenX
argument_list|()
argument_list|,
name|event
operator|.
name|getScreenY
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Activate context menu if user presses the "context menu" key
name|tableView
operator|.
name|addEventHandler
argument_list|(
name|KeyEvent
operator|.
name|KEY_RELEASED
argument_list|,
name|event
lambda|->
block|{
name|boolean
name|rowFocused
init|=
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tableView
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
operator|==
name|row
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getCode
argument_list|()
operator|==
name|KeyCode
operator|.
name|CONTEXT_MENU
operator|&&
name|rowFocused
condition|)
block|{
comment|// Get center of focused cell
name|Bounds
name|anchorBounds
init|=
name|row
operator|.
name|getBoundsInParent
argument_list|()
decl_stmt|;
name|double
name|x
init|=
name|anchorBounds
operator|.
name|getMinX
argument_list|()
operator|+
name|anchorBounds
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
decl_stmt|;
name|double
name|y
init|=
name|anchorBounds
operator|.
name|getMinY
argument_list|()
operator|+
name|anchorBounds
operator|.
name|getHeight
argument_list|()
operator|/
literal|2
decl_stmt|;
name|Point2D
name|screenPosition
init|=
name|row
operator|.
name|getParent
argument_list|()
operator|.
name|localToScreen
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|.
name|getContextMenu
argument_list|()
operator|==
literal|null
condition|)
block|{
name|row
operator|.
name|setContextMenu
argument_list|(
name|contextMenuFactory
operator|.
name|apply
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|getContextMenu
argument_list|()
operator|.
name|show
argument_list|(
name|row
argument_list|,
name|screenPosition
operator|.
name|getX
argument_list|()
argument_list|,
name|screenPosition
operator|.
name|getY
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOnDragDetected
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnDragDetected
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toOnDragDetected
operator|.
name|accept
argument_list|(
name|row
argument_list|,
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOnDragDropped
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnDragDropped
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toOnDragDropped
operator|.
name|accept
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOnDragEntered
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnDragEntered
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toOnDragEntered
operator|.
name|accept
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOnDragExited
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnDragExited
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toOnDragExited
operator|.
name|accept
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOnDragOver
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnDragOver
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toOnDragOver
operator|.
name|accept
argument_list|(
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toOnMouseDragEntered
operator|!=
literal|null
condition|)
block|{
name|row
operator|.
name|setOnMouseDragEntered
argument_list|(
name|event
lambda|->
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toOnMouseDragEntered
operator|.
name|accept
argument_list|(
name|row
argument_list|,
name|row
operator|.
name|getItem
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
DECL|method|install (TableView<S> table)
specifier|public
name|void
name|install
parameter_list|(
name|TableView
argument_list|<
name|S
argument_list|>
name|table
parameter_list|)
block|{
name|table
operator|.
name|setRowFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

