begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DragAndDropDataFormats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|GUIGlobals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|PreviewLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_comment
comment|/**  * Placeholder class for a custom generic type safe dragboard to be used in drag and drop, does not depend on serialization  * Don't use this class directly. Use the instance provided in {@link GUIGlobals#localDragboard}  */
end_comment

begin_class
DECL|class|CustomLocalDragboard
specifier|public
class|class
name|CustomLocalDragboard
block|{
DECL|field|BIB_ENTRIES
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|List
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
name|BIB_ENTRIES
init|=
call|(
name|Class
argument_list|<
name|List
argument_list|<
name|BibEntry
argument_list|>
argument_list|>
call|)
argument_list|(
name|Class
argument_list|<
name|?
argument_list|>
argument_list|)
name|List
operator|.
name|class
decl_stmt|;
DECL|field|contents
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|contents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Puts the value of the concrete class in a map. All previous content stored in the map is removed      * @param type The Type of the class      * @param value The value to store      */
DECL|method|putValue (Class<T> type, T value)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|putValue
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|clearAll
argument_list|()
expr_stmt|;
name|contents
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getValue (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getValue
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|contents
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
DECL|method|hasType (Class<?> type)
specifier|public
name|boolean
name|hasType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|contents
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|clear (Class<?> type)
specifier|public
name|void
name|clear
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|contents
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|clearAll ()
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
name|contents
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Puts A List of {@link BibEntry} in the map      * All previous content is cleared      * @param entries The list to put      */
DECL|method|putBibEntries (List<BibEntry> entries)
specifier|public
name|void
name|putBibEntries
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|putValue
argument_list|(
name|BIB_ENTRIES
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a List of {@link BibEntry} from the dragboard      * @return List of BibEntry or empty list if no entries are avaiable      */
DECL|method|getBibEntries ()
specifier|public
name|List
argument_list|<
name|BibEntry
argument_list|>
name|getBibEntries
parameter_list|()
block|{
if|if
condition|(
name|hasBibEntries
argument_list|()
condition|)
block|{
return|return
name|getValue
argument_list|(
name|BIB_ENTRIES
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|method|hasBibEntries ()
specifier|public
name|boolean
name|hasBibEntries
parameter_list|()
block|{
return|return
name|hasType
argument_list|(
name|BIB_ENTRIES
argument_list|)
return|;
block|}
comment|/**      * Puts A List of {@link PreviewLayout} in the map All previous content is cleared      *      * @param previewLayouts The list to put      */
DECL|method|putPreviewLayouts (List<PreviewLayout> previewLayouts)
specifier|public
name|void
name|putPreviewLayouts
parameter_list|(
name|List
argument_list|<
name|PreviewLayout
argument_list|>
name|previewLayouts
parameter_list|)
block|{
name|putValue
argument_list|(
name|DragAndDropDataFormats
operator|.
name|PREVIEWLAYOUT_LIST_CLASS
argument_list|,
name|previewLayouts
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get a List of {@link PreviewLayout} from the dragboard      *      * @return List of PreviewLayout or empty list if no entries are avaiable      */
DECL|method|getPreviewLayouts ()
specifier|public
name|List
argument_list|<
name|PreviewLayout
argument_list|>
name|getPreviewLayouts
parameter_list|()
block|{
if|if
condition|(
name|hasType
argument_list|(
name|DragAndDropDataFormats
operator|.
name|PREVIEWLAYOUT_LIST_CLASS
argument_list|)
condition|)
block|{
return|return
name|getValue
argument_list|(
name|DragAndDropDataFormats
operator|.
name|PREVIEWLAYOUT_LIST_CLASS
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

