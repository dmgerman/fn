begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|css
operator|.
name|PseudoClass
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Parent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|DialogPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextFormatter
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|DragEvent
import|;
end_import

begin_class
DECL|class|ControlHelper
specifier|public
class|class
name|ControlHelper
block|{
comment|// Pseudo-classes for drag and drop
DECL|field|dragOverBottom
specifier|private
specifier|static
name|PseudoClass
name|dragOverBottom
init|=
name|PseudoClass
operator|.
name|getPseudoClass
argument_list|(
literal|"dragOver-bottom"
argument_list|)
decl_stmt|;
DECL|field|dragOverCenter
specifier|private
specifier|static
name|PseudoClass
name|dragOverCenter
init|=
name|PseudoClass
operator|.
name|getPseudoClass
argument_list|(
literal|"dragOver-center"
argument_list|)
decl_stmt|;
DECL|field|dragOverTop
specifier|private
specifier|static
name|PseudoClass
name|dragOverTop
init|=
name|PseudoClass
operator|.
name|getPseudoClass
argument_list|(
literal|"dragOver-top"
argument_list|)
decl_stmt|;
DECL|method|setAction (ButtonType buttonType, DialogPane dialogPane, Consumer<Event> consumer)
specifier|public
specifier|static
name|void
name|setAction
parameter_list|(
name|ButtonType
name|buttonType
parameter_list|,
name|DialogPane
name|dialogPane
parameter_list|,
name|Consumer
argument_list|<
name|Event
argument_list|>
name|consumer
parameter_list|)
block|{
name|Button
name|button
init|=
operator|(
name|Button
operator|)
name|dialogPane
operator|.
name|lookupButton
argument_list|(
name|buttonType
argument_list|)
decl_stmt|;
name|button
operator|.
name|addEventFilter
argument_list|(
name|ActionEvent
operator|.
name|ACTION
argument_list|,
operator|(
name|event
lambda|->
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|consume
argument_list|()
expr_stmt|;
block|}
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|childIsFocused (Parent node)
specifier|public
specifier|static
name|boolean
name|childIsFocused
parameter_list|(
name|Parent
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|isFocused
argument_list|()
operator|||
name|node
operator|.
name|getChildrenUnmodifiable
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|child
lambda|->
block|{
if|if
condition|(
name|child
operator|instanceof
name|Parent
condition|)
block|{
return|return
name|childIsFocused
argument_list|(
operator|(
name|Parent
operator|)
name|child
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|child
operator|.
name|isFocused
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Returns a text formatter that restricts input to integers      */
DECL|method|getIntegerTextFormatter ()
specifier|public
specifier|static
name|TextFormatter
argument_list|<
name|String
argument_list|>
name|getIntegerTextFormatter
parameter_list|()
block|{
name|UnaryOperator
argument_list|<
name|TextFormatter
operator|.
name|Change
argument_list|>
name|filter
init|=
name|change
lambda|->
block|{
name|String
name|text
init|=
name|change
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|matches
argument_list|(
literal|"[0-9]*"
argument_list|)
condition|)
block|{
return|return
name|change
return|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
return|return
operator|new
name|TextFormatter
argument_list|<>
argument_list|(
name|filter
argument_list|)
return|;
block|}
DECL|method|removePseudoClasses (Cell<?> cell, PseudoClass... pseudoClasses)
specifier|public
specifier|static
name|void
name|removePseudoClasses
parameter_list|(
name|Cell
argument_list|<
name|?
argument_list|>
name|cell
parameter_list|,
name|PseudoClass
modifier|...
name|pseudoClasses
parameter_list|)
block|{
for|for
control|(
name|PseudoClass
name|pseudoClass
range|:
name|pseudoClasses
control|)
block|{
name|cell
operator|.
name|pseudoClassStateChanged
argument_list|(
name|pseudoClass
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Determines where the mouse is in the given cell.      */
DECL|method|getDroppingMouseLocation (Cell<?> cell, DragEvent event)
specifier|public
specifier|static
name|DroppingMouseLocation
name|getDroppingMouseLocation
parameter_list|(
name|Cell
argument_list|<
name|?
argument_list|>
name|cell
parameter_list|,
name|DragEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|(
name|cell
operator|.
name|getHeight
argument_list|()
operator|*
literal|0.25
operator|)
operator|>
name|event
operator|.
name|getY
argument_list|()
condition|)
block|{
return|return
name|DroppingMouseLocation
operator|.
name|TOP
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|cell
operator|.
name|getHeight
argument_list|()
operator|*
literal|0.75
operator|)
operator|<
name|event
operator|.
name|getY
argument_list|()
condition|)
block|{
return|return
name|DroppingMouseLocation
operator|.
name|BOTTOM
return|;
block|}
else|else
block|{
return|return
name|DroppingMouseLocation
operator|.
name|CENTER
return|;
block|}
block|}
DECL|method|setDroppingPseudoClasses (Cell<?> cell, DragEvent event)
specifier|public
specifier|static
name|void
name|setDroppingPseudoClasses
parameter_list|(
name|Cell
argument_list|<
name|?
argument_list|>
name|cell
parameter_list|,
name|DragEvent
name|event
parameter_list|)
block|{
name|removeDroppingPseudoClasses
argument_list|(
name|cell
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|getDroppingMouseLocation
argument_list|(
name|cell
argument_list|,
name|event
argument_list|)
condition|)
block|{
case|case
name|BOTTOM
case|:
name|cell
operator|.
name|pseudoClassStateChanged
argument_list|(
name|dragOverBottom
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|CENTER
case|:
name|cell
operator|.
name|pseudoClassStateChanged
argument_list|(
name|dragOverCenter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|TOP
case|:
name|cell
operator|.
name|pseudoClassStateChanged
argument_list|(
name|dragOverTop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|setDroppingPseudoClasses (Cell<?> cell)
specifier|public
specifier|static
name|void
name|setDroppingPseudoClasses
parameter_list|(
name|Cell
argument_list|<
name|?
argument_list|>
name|cell
parameter_list|)
block|{
name|removeDroppingPseudoClasses
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|cell
operator|.
name|pseudoClassStateChanged
argument_list|(
name|dragOverCenter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|removeDroppingPseudoClasses (Cell<?> cell)
specifier|public
specifier|static
name|void
name|removeDroppingPseudoClasses
parameter_list|(
name|Cell
argument_list|<
name|?
argument_list|>
name|cell
parameter_list|)
block|{
name|removePseudoClasses
argument_list|(
name|cell
argument_list|,
name|dragOverBottom
argument_list|,
name|dragOverCenter
argument_list|,
name|dragOverTop
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

