begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|TextFieldTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|StringConverter
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|ValidationStatus
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|visualization
operator|.
name|ControlsFxVisualizer
import|;
end_import

begin_class
DECL|class|ViewModelTextFieldTableCellVisualizationFactory
specifier|public
class|class
name|ViewModelTextFieldTableCellVisualizationFactory
parameter_list|<
name|S
parameter_list|,
name|T
parameter_list|>
implements|implements
name|Callback
argument_list|<
name|TableColumn
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
argument_list|,
name|TableCell
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
argument_list|>
block|{
DECL|field|visualizer
specifier|private
name|ControlsFxVisualizer
name|visualizer
decl_stmt|;
DECL|field|validationStatusProperty
specifier|private
name|Function
argument_list|<
name|S
argument_list|,
name|ValidationStatus
argument_list|>
name|validationStatusProperty
decl_stmt|;
DECL|field|stringConverter
specifier|private
name|StringConverter
argument_list|<
name|T
argument_list|>
name|stringConverter
decl_stmt|;
DECL|method|withValidation (Function<S, ValidationStatus> validationStatusProperty, ControlsFxVisualizer visualizer)
specifier|public
name|ViewModelTextFieldTableCellVisualizationFactory
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|withValidation
parameter_list|(
name|Function
argument_list|<
name|S
argument_list|,
name|ValidationStatus
argument_list|>
name|validationStatusProperty
parameter_list|,
name|ControlsFxVisualizer
name|visualizer
parameter_list|)
block|{
name|this
operator|.
name|validationStatusProperty
operator|=
name|validationStatusProperty
expr_stmt|;
name|this
operator|.
name|visualizer
operator|=
name|visualizer
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|install (TableColumn<S, T> column, StringConverter<T> stringConverter)
specifier|public
name|void
name|install
parameter_list|(
name|TableColumn
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|column
parameter_list|,
name|StringConverter
argument_list|<
name|T
argument_list|>
name|stringConverter
parameter_list|)
block|{
name|column
operator|.
name|setCellFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|stringConverter
operator|=
name|stringConverter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call (TableColumn<S, T> param)
specifier|public
name|TextFieldTableCell
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|call
parameter_list|(
name|TableColumn
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|param
parameter_list|)
block|{
return|return
operator|new
name|TextFieldTableCell
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
argument_list|(
name|stringConverter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateItem
parameter_list|(
name|T
name|item
parameter_list|,
name|boolean
name|empty
parameter_list|)
block|{
name|super
operator|.
name|updateItem
argument_list|(
name|item
argument_list|,
name|empty
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|empty
operator|&&
operator|(
name|getTableRow
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|Object
name|rowItem
init|=
name|getTableRow
argument_list|()
operator|.
name|getItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|rowItem
operator|!=
literal|null
condition|)
block|{
name|S
name|vm
init|=
operator|(
name|S
operator|)
name|rowItem
decl_stmt|;
if|if
condition|(
operator|(
name|visualizer
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|validationStatusProperty
operator|!=
literal|null
operator|)
condition|)
block|{
name|visualizer
operator|.
name|initVisualization
argument_list|(
name|validationStatusProperty
operator|.
name|apply
argument_list|(
name|vm
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

