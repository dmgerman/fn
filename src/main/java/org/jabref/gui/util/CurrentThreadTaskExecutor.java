begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link TaskExecutor} that runs every task on the current thread, i.e. in a sequential order. This  * class is not designed to be used in production but should make code involving asynchronous operations deterministic  * and testable.  */
end_comment

begin_class
DECL|class|CurrentThreadTaskExecutor
specifier|public
class|class
name|CurrentThreadTaskExecutor
implements|implements
name|TaskExecutor
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CurrentThreadTaskExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Executes the task on the current thread. The code is essentially taken from {@link      * javafx.concurrent.Task.TaskCallable#call()}, but adapted to run sequentially.      */
annotation|@
name|Override
DECL|method|execute (BackgroundTask<V> task)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|Future
argument_list|<
name|V
argument_list|>
name|execute
parameter_list|(
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
name|Runnable
name|onRunning
init|=
name|task
operator|.
name|getOnRunning
argument_list|()
decl_stmt|;
if|if
condition|(
name|onRunning
operator|!=
literal|null
condition|)
block|{
name|onRunning
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|V
name|result
init|=
name|task
operator|.
name|call
argument_list|()
decl_stmt|;
name|Consumer
argument_list|<
name|V
argument_list|>
name|onSuccess
init|=
name|task
operator|.
name|getOnSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|onSuccess
operator|!=
literal|null
condition|)
block|{
name|onSuccess
operator|.
name|accept
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|CompletableFuture
operator|.
name|completedFuture
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onException
init|=
name|task
operator|.
name|getOnException
argument_list|()
decl_stmt|;
if|if
condition|(
name|onException
operator|!=
literal|null
condition|)
block|{
name|onException
operator|.
name|accept
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unhandled exception"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FailedFuture
argument_list|<>
argument_list|(
name|exception
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|execute (Task<V> task)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|Future
argument_list|<
name|V
argument_list|>
name|execute
parameter_list|(
name|Task
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
return|return
name|task
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// Nothing to do here
block|}
DECL|class|FailedFuture
specifier|private
class|class
name|FailedFuture
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Future
argument_list|<
name|T
argument_list|>
block|{
DECL|field|exception
specifier|private
specifier|final
name|Throwable
name|exception
decl_stmt|;
DECL|method|FailedFuture (Throwable exception)
name|FailedFuture
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|ExecutionException
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|T
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|ExecutionException
block|{
return|return
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cancel (boolean mayInterruptIfRunning)
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isCancelled ()
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isDone ()
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

