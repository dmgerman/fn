begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|text
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Utility class with static methods for javafx {@link Text} objects  */
end_comment

begin_class
DECL|class|TooltipTextUtil
specifier|public
class|class
name|TooltipTextUtil
block|{
DECL|enum|TextType
specifier|public
enum|enum
name|TextType
block|{
DECL|enumConstant|NORMAL
DECL|enumConstant|BOLD
DECL|enumConstant|ITALIC
DECL|enumConstant|MONOSPACED
name|NORMAL
block|,
name|BOLD
block|,
name|ITALIC
block|,
name|MONOSPACED
block|}
DECL|method|createText (String textString, TextType textType)
specifier|public
specifier|static
name|Text
name|createText
parameter_list|(
name|String
name|textString
parameter_list|,
name|TextType
name|textType
parameter_list|)
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|textString
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|textType
condition|)
block|{
case|case
name|BOLD
case|:
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|setAll
argument_list|(
literal|"tooltip-text-bold"
argument_list|)
expr_stmt|;
break|break;
case|case
name|ITALIC
case|:
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|setAll
argument_list|(
literal|"tooltip-text-italic"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MONOSPACED
case|:
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|setAll
argument_list|(
literal|"tooltip-text-monospaced"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|text
return|;
block|}
DECL|method|createText (String textString)
specifier|public
specifier|static
name|Text
name|createText
parameter_list|(
name|String
name|textString
parameter_list|)
block|{
return|return
name|createText
argument_list|(
name|textString
argument_list|,
name|TextType
operator|.
name|NORMAL
argument_list|)
return|;
block|}
DECL|method|textToHTMLString (Text text)
specifier|public
specifier|static
name|String
name|textToHTMLString
parameter_list|(
name|Text
name|text
parameter_list|)
block|{
name|String
name|textString
init|=
name|text
operator|.
name|getText
argument_list|()
decl_stmt|;
name|textString
operator|=
name|textString
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"tooltip-text-monospaced"
argument_list|)
condition|)
block|{
name|textString
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"<kbd>%s</kbd>"
argument_list|,
name|textString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"tooltip-text-bold"
argument_list|)
condition|)
block|{
name|textString
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"<b>%s</b>"
argument_list|,
name|textString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|.
name|getStyleClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"tooltip-text-italic"
argument_list|)
condition|)
block|{
name|textString
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"<i>%s</i>"
argument_list|,
name|textString
argument_list|)
expr_stmt|;
block|}
return|return
name|textString
return|;
block|}
comment|/**      * Formats a String to multiple Texts by replacing some parts and adding font characteristics.      */
DECL|method|formatToTexts (String original, TextReplacement... replacements)
specifier|public
specifier|static
name|List
argument_list|<
name|Text
argument_list|>
name|formatToTexts
parameter_list|(
name|String
name|original
parameter_list|,
name|TextReplacement
modifier|...
name|replacements
parameter_list|)
block|{
name|List
argument_list|<
name|Text
argument_list|>
name|textList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|textList
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
name|original
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TextReplacement
name|replacement
range|:
name|replacements
control|)
block|{
name|splitReplace
argument_list|(
name|textList
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
return|return
name|textList
return|;
block|}
DECL|method|splitReplace (List<Text> textList, TextReplacement replacement)
specifier|private
specifier|static
name|void
name|splitReplace
parameter_list|(
name|List
argument_list|<
name|Text
argument_list|>
name|textList
parameter_list|,
name|TextReplacement
name|replacement
parameter_list|)
block|{
name|Optional
argument_list|<
name|Text
argument_list|>
name|textContainingReplacement
init|=
name|textList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|it
lambda|->
name|it
operator|.
name|getText
argument_list|()
operator|.
name|contains
argument_list|(
name|replacement
operator|.
name|toReplace
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|textContainingReplacement
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|textList
operator|.
name|indexOf
argument_list|(
name|textContainingReplacement
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|original
init|=
name|textContainingReplacement
operator|.
name|get
argument_list|()
operator|.
name|getText
argument_list|()
decl_stmt|;
name|textList
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|String
index|[]
name|textParts
init|=
name|original
operator|.
name|split
argument_list|(
name|replacement
operator|.
name|toReplace
argument_list|)
decl_stmt|;
if|if
condition|(
name|textParts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|textParts
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|textList
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|replacement
operator|.
name|replacement
argument_list|,
name|replacement
operator|.
name|textType
argument_list|)
argument_list|)
expr_stmt|;
name|textList
operator|.
name|add
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|textParts
index|[
literal|1
index|]
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textList
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|textParts
index|[
literal|0
index|]
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|textList
operator|.
name|add
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|replacement
operator|.
name|replacement
argument_list|,
name|replacement
operator|.
name|textType
argument_list|)
argument_list|)
expr_stmt|;
name|textList
operator|.
name|add
argument_list|(
name|index
operator|+
literal|2
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|textParts
index|[
literal|1
index|]
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|textParts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|textList
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|textParts
index|[
literal|0
index|]
argument_list|,
name|TooltipTextUtil
operator|.
name|TextType
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|textList
operator|.
name|add
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|TooltipTextUtil
operator|.
name|createText
argument_list|(
name|replacement
operator|.
name|replacement
argument_list|,
name|replacement
operator|.
name|textType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"It is not allowed that the toReplace string: '"
operator|+
name|replacement
operator|.
name|toReplace
operator|+
literal|"' exists multiple times in the original string"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"It is not allowed that the toReplace string: '"
operator|+
name|replacement
operator|.
name|toReplace
operator|+
literal|"' does not exist in the original string"
argument_list|)
throw|;
block|}
block|}
DECL|class|TextReplacement
specifier|public
specifier|static
class|class
name|TextReplacement
block|{
DECL|field|toReplace
specifier|private
specifier|final
name|String
name|toReplace
decl_stmt|;
DECL|field|replacement
specifier|private
specifier|final
name|String
name|replacement
decl_stmt|;
DECL|field|textType
specifier|private
specifier|final
name|TooltipTextUtil
operator|.
name|TextType
name|textType
decl_stmt|;
DECL|method|TextReplacement (String toReplace, String replacement, TooltipTextUtil.TextType textType)
specifier|public
name|TextReplacement
parameter_list|(
name|String
name|toReplace
parameter_list|,
name|String
name|replacement
parameter_list|,
name|TooltipTextUtil
operator|.
name|TextType
name|textType
parameter_list|)
block|{
name|this
operator|.
name|toReplace
operator|=
name|toReplace
expr_stmt|;
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
name|this
operator|.
name|textType
operator|=
name|textType
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

