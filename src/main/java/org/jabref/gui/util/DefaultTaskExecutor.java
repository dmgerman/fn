begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|concurrent
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiles
operator|.
name|FileDownloadTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A very simple implementation of the {@link TaskExecutor} interface.  * Every submitted task is invoked in a separate thread.  */
end_comment

begin_class
DECL|class|DefaultTaskExecutor
specifier|public
class|class
name|DefaultTaskExecutor
implements|implements
name|TaskExecutor
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultTaskExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|method|runInJavaFXThread (Callable<V> callable)
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|runInJavaFXThread
parameter_list|(
name|Callable
argument_list|<
name|V
argument_list|>
name|callable
parameter_list|)
block|{
name|FutureTask
argument_list|<
name|V
argument_list|>
name|task
init|=
operator|new
name|FutureTask
argument_list|<>
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|Platform
operator|.
name|runLater
argument_list|(
name|task
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|task
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|runInJavaFXThread (Runnable runnable)
specifier|public
specifier|static
name|void
name|runInJavaFXThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Platform
operator|.
name|runLater
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (BackgroundTask<V> task)
specifier|public
parameter_list|<
name|V
parameter_list|>
name|void
name|execute
parameter_list|(
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|getJavaFXTask
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute (FileDownloadTask downloadTask)
specifier|public
name|void
name|execute
parameter_list|(
name|FileDownloadTask
name|downloadTask
parameter_list|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|downloadTask
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
DECL|method|getJavaFXTask (BackgroundTask<V> task)
specifier|private
parameter_list|<
name|V
parameter_list|>
name|Task
argument_list|<
name|V
argument_list|>
name|getJavaFXTask
parameter_list|(
name|BackgroundTask
argument_list|<
name|V
argument_list|>
name|task
parameter_list|)
block|{
name|Task
argument_list|<
name|V
argument_list|>
name|javaTask
init|=
operator|new
name|Task
argument_list|<
name|V
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|V
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|task
operator|.
name|call
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Runnable
name|onRunning
init|=
name|task
operator|.
name|getOnRunning
argument_list|()
decl_stmt|;
if|if
condition|(
name|onRunning
operator|!=
literal|null
condition|)
block|{
name|javaTask
operator|.
name|setOnRunning
argument_list|(
name|event
lambda|->
name|onRunning
operator|.
name|run
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Consumer
argument_list|<
name|V
argument_list|>
name|onSuccess
init|=
name|task
operator|.
name|getOnSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|onSuccess
operator|!=
literal|null
condition|)
block|{
name|javaTask
operator|.
name|setOnSucceeded
argument_list|(
name|event
lambda|->
name|onSuccess
operator|.
name|accept
argument_list|(
name|javaTask
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Consumer
argument_list|<
name|Exception
argument_list|>
name|onException
init|=
name|task
operator|.
name|getOnException
argument_list|()
decl_stmt|;
if|if
condition|(
name|onException
operator|!=
literal|null
condition|)
block|{
name|javaTask
operator|.
name|setOnFailed
argument_list|(
name|event
lambda|->
name|onException
operator|.
name|accept
argument_list|(
name|convertToException
argument_list|(
name|javaTask
operator|.
name|getException
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|javaTask
return|;
block|}
DECL|method|convertToException (Throwable throwable)
specifier|private
name|Exception
name|convertToException
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|throwable
operator|instanceof
name|Exception
condition|)
block|{
return|return
operator|(
name|Exception
operator|)
name|throwable
return|;
block|}
else|else
block|{
return|return
operator|new
name|Exception
argument_list|(
name|throwable
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

