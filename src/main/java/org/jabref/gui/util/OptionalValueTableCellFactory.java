begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.util
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableCell
import|;
end_import

begin_comment
comment|/**  * Constructs a {@link TableCell} based on an optional value of the cell and a bunch of specified converter methods.  *  * @param<S> view model of table row  * @param<T> cell value  */
end_comment

begin_class
DECL|class|OptionalValueTableCellFactory
specifier|public
class|class
name|OptionalValueTableCellFactory
parameter_list|<
name|S
parameter_list|,
name|T
parameter_list|>
extends|extends
name|ValueTableCellFactory
argument_list|<
name|S
argument_list|,
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
block|{
DECL|field|toGraphicIfPresent
specifier|private
name|BiFunction
argument_list|<
name|S
argument_list|,
name|T
argument_list|,
name|Node
argument_list|>
name|toGraphicIfPresent
decl_stmt|;
DECL|field|defaultGraphic
specifier|private
name|Node
name|defaultGraphic
decl_stmt|;
DECL|method|withGraphicIfPresent (BiFunction<S, T, Node> toGraphicIfPresent)
specifier|public
name|OptionalValueTableCellFactory
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|withGraphicIfPresent
parameter_list|(
name|BiFunction
argument_list|<
name|S
argument_list|,
name|T
argument_list|,
name|Node
argument_list|>
name|toGraphicIfPresent
parameter_list|)
block|{
name|this
operator|.
name|toGraphicIfPresent
operator|=
name|toGraphicIfPresent
expr_stmt|;
name|setToGraphic
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withDefaultGraphic (Node defaultGraphic)
specifier|public
name|OptionalValueTableCellFactory
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|withDefaultGraphic
parameter_list|(
name|Node
name|defaultGraphic
parameter_list|)
block|{
name|this
operator|.
name|defaultGraphic
operator|=
name|defaultGraphic
expr_stmt|;
name|setToGraphic
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setToGraphic ()
specifier|private
name|void
name|setToGraphic
parameter_list|()
block|{
name|withGraphic
argument_list|(
parameter_list|(
name|rowItem
parameter_list|,
name|item
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|item
operator|.
name|isPresent
argument_list|()
operator|&&
name|toGraphicIfPresent
operator|!=
literal|null
condition|)
block|{
return|return
name|toGraphicIfPresent
operator|.
name|apply
argument_list|(
name|rowItem
argument_list|,
name|item
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|defaultGraphic
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

