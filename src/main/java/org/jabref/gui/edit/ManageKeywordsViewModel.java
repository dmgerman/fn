begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.edit
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|edit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|specialfields
operator|.
name|SpecialFieldsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|FieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|Keyword
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|KeywordList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|PreferencesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|easybind
operator|.
name|EasyBind
import|;
end_import

begin_class
DECL|class|ManageKeywordsViewModel
specifier|public
class|class
name|ManageKeywordsViewModel
block|{
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|sortedKeywordsOfAllEntriesBeforeUpdateByUser
specifier|private
specifier|final
name|KeywordList
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
init|=
operator|new
name|KeywordList
argument_list|()
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|PreferencesService
name|preferences
decl_stmt|;
DECL|field|displayType
specifier|private
specifier|final
name|ObjectProperty
argument_list|<
name|ManageKeywordsDisplayType
argument_list|>
name|displayType
init|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|(
name|ManageKeywordsDisplayType
operator|.
name|CONTAINED_IN_ALL_ENTRIES
argument_list|)
decl_stmt|;
DECL|field|keywords
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|String
argument_list|>
name|keywords
decl_stmt|;
DECL|method|ManageKeywordsViewModel (PreferencesService preferences, List<BibEntry> entries)
specifier|public
name|ManageKeywordsViewModel
parameter_list|(
name|PreferencesService
name|preferences
parameter_list|,
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|keywords
operator|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
expr_stmt|;
name|EasyBind
operator|.
name|subscribe
argument_list|(
name|displayType
argument_list|,
name|this
operator|::
name|fillKeywordsList
argument_list|)
expr_stmt|;
block|}
DECL|method|getDisplayType ()
specifier|public
name|ManageKeywordsDisplayType
name|getDisplayType
parameter_list|()
block|{
return|return
name|displayType
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|displayTypeProperty ()
specifier|public
name|ObjectProperty
argument_list|<
name|ManageKeywordsDisplayType
argument_list|>
name|displayTypeProperty
parameter_list|()
block|{
return|return
name|displayType
return|;
block|}
DECL|method|fillKeywordsList (ManageKeywordsDisplayType type)
specifier|private
name|void
name|fillKeywordsList
parameter_list|(
name|ManageKeywordsDisplayType
name|type
parameter_list|)
block|{
name|keywords
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|ManageKeywordsDisplayType
operator|.
name|CONTAINED_IN_ALL_ENTRIES
condition|)
block|{
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|KeywordList
name|separatedKeywords
init|=
name|entry
operator|.
name|getKeywords
argument_list|(
name|preferences
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
decl_stmt|;
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
operator|.
name|addAll
argument_list|(
name|separatedKeywords
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ManageKeywordsDisplayType
operator|.
name|CONTAINED_IN_ANY_ENTRY
condition|)
block|{
comment|// all keywords from first entry have to be added
name|BibEntry
name|firstEntry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|KeywordList
name|separatedKeywords
init|=
name|firstEntry
operator|.
name|getKeywords
argument_list|(
name|preferences
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
decl_stmt|;
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
operator|.
name|addAll
argument_list|(
name|separatedKeywords
argument_list|)
expr_stmt|;
comment|// for the remaining entries, intersection has to be used
comment|// this approach ensures that one empty keyword list leads to an empty set of common keywords
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|separatedKeywords
operator|=
name|entry
operator|.
name|getKeywords
argument_list|(
name|preferences
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
operator|.
name|retainAll
argument_list|(
name|separatedKeywords
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"DisplayType "
operator|+
name|type
operator|+
literal|" not handled"
argument_list|)
throw|;
block|}
for|for
control|(
name|Keyword
name|keyword
range|:
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
control|)
block|{
name|keywords
operator|.
name|add
argument_list|(
name|keyword
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getKeywords ()
specifier|public
name|ObservableList
argument_list|<
name|String
argument_list|>
name|getKeywords
parameter_list|()
block|{
return|return
name|keywords
return|;
block|}
DECL|method|removeKeyword (String keyword)
specifier|public
name|void
name|removeKeyword
parameter_list|(
name|String
name|keyword
parameter_list|)
block|{
name|keywords
operator|.
name|remove
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
block|}
DECL|method|saveChanges ()
specifier|public
name|void
name|saveChanges
parameter_list|()
block|{
name|KeywordList
name|keywordsToAdd
init|=
operator|new
name|KeywordList
argument_list|()
decl_stmt|;
name|KeywordList
name|userSelectedKeywords
init|=
operator|new
name|KeywordList
argument_list|()
decl_stmt|;
comment|// build keywordsToAdd and userSelectedKeywords in parallel
for|for
control|(
name|String
name|keyword
range|:
name|keywords
control|)
block|{
name|userSelectedKeywords
operator|.
name|add
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
operator|.
name|contains
argument_list|(
name|keyword
argument_list|)
condition|)
block|{
name|keywordsToAdd
operator|.
name|add
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
block|}
block|}
name|KeywordList
name|keywordsToRemove
init|=
operator|new
name|KeywordList
argument_list|()
decl_stmt|;
for|for
control|(
name|Keyword
name|kword
range|:
name|sortedKeywordsOfAllEntriesBeforeUpdateByUser
control|)
block|{
if|if
condition|(
operator|!
name|userSelectedKeywords
operator|.
name|contains
argument_list|(
name|kword
argument_list|)
condition|)
block|{
name|keywordsToRemove
operator|.
name|add
argument_list|(
name|kword
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keywordsToAdd
operator|.
name|isEmpty
argument_list|()
operator|&&
name|keywordsToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing to be done if nothing is new and nothing is obsolete
return|return;
block|}
if|if
condition|(
name|preferences
operator|.
name|isKeywordSyncEnabled
argument_list|()
operator|&&
operator|!
name|keywordsToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SpecialFieldsUtils
operator|.
name|synchronizeSpecialFields
argument_list|(
name|keywordsToAdd
argument_list|,
name|keywordsToRemove
argument_list|)
expr_stmt|;
block|}
name|NamedCompound
name|ce
init|=
name|updateKeywords
argument_list|(
name|entries
argument_list|,
name|keywordsToAdd
argument_list|,
name|keywordsToRemove
argument_list|)
decl_stmt|;
comment|//TODO: bp.getUndoManager().addEdit(ce);
block|}
DECL|method|updateKeywords (List<BibEntry> entries, KeywordList keywordsToAdd, KeywordList keywordsToRemove)
specifier|private
name|NamedCompound
name|updateKeywords
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|KeywordList
name|keywordsToAdd
parameter_list|,
name|KeywordList
name|keywordsToRemove
parameter_list|)
block|{
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Update keywords"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|KeywordList
name|keywords
init|=
name|entry
operator|.
name|getKeywords
argument_list|(
name|preferences
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
decl_stmt|;
comment|// update keywords
name|keywords
operator|.
name|removeAll
argument_list|(
name|keywordsToRemove
argument_list|)
expr_stmt|;
name|keywords
operator|.
name|addAll
argument_list|(
name|keywordsToAdd
argument_list|)
expr_stmt|;
comment|// put keywords back
name|Optional
argument_list|<
name|FieldChange
argument_list|>
name|change
init|=
name|entry
operator|.
name|putKeywords
argument_list|(
name|keywords
argument_list|,
name|preferences
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|change
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preferences
operator|.
name|isKeywordSyncEnabled
argument_list|()
condition|)
block|{
name|SpecialFieldsUtils
operator|.
name|syncSpecialFieldsFromKeywords
argument_list|(
name|entry
argument_list|,
name|preferences
operator|.
name|getKeywordDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ce
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|ce
return|;
block|}
block|}
end_class

end_unit

