begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.edit
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|edit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|undo
operator|.
name|UndoableEdit
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|application
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Insets
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ButtonType
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ComboBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToggleGroup
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Tooltip
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BaseDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|IconValidationDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|FunctionBasedValidator
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|Severity
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|ValidationMessage
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|visualization
operator|.
name|ControlsFxVisualizer
import|;
end_import

begin_class
DECL|class|MassSetFieldsDialog
specifier|public
class|class
name|MassSetFieldsDialog
extends|extends
name|BaseDialog
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|entries
specifier|private
specifier|final
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|bp
specifier|private
specifier|final
name|BasePanel
name|bp
decl_stmt|;
DECL|field|dialogService
specifier|private
specifier|final
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|clearRadioButton
specifier|private
name|RadioButton
name|clearRadioButton
decl_stmt|;
DECL|field|setRadioButton
specifier|private
name|RadioButton
name|setRadioButton
decl_stmt|;
DECL|field|appendRadioButton
specifier|private
name|RadioButton
name|appendRadioButton
decl_stmt|;
DECL|field|renameRadioButton
specifier|private
name|RadioButton
name|renameRadioButton
decl_stmt|;
DECL|field|fieldComboBox
specifier|private
name|ComboBox
argument_list|<
name|String
argument_list|>
name|fieldComboBox
decl_stmt|;
DECL|field|setTextField
specifier|private
name|TextField
name|setTextField
decl_stmt|;
DECL|field|appendTextField
specifier|private
name|TextField
name|appendTextField
decl_stmt|;
DECL|field|renameTextField
specifier|private
name|TextField
name|renameTextField
decl_stmt|;
DECL|field|overwriteCheckBox
specifier|private
name|CheckBox
name|overwriteCheckBox
decl_stmt|;
DECL|method|MassSetFieldsDialog (List<BibEntry> entries, BasePanel bp)
name|MassSetFieldsDialog
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|BasePanel
name|bp
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|bp
operator|=
name|bp
expr_stmt|;
name|this
operator|.
name|dialogService
operator|=
name|bp
operator|.
name|frame
argument_list|()
operator|.
name|getDialogService
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|setTitle
argument_list|(
literal|"Set/clear/append/rename fields"
argument_list|)
expr_stmt|;
name|this
operator|.
name|getDialogPane
argument_list|()
operator|.
name|getButtonTypes
argument_list|()
operator|.
name|addAll
argument_list|(
name|ButtonType
operator|.
name|OK
argument_list|,
name|ButtonType
operator|.
name|CANCEL
argument_list|)
expr_stmt|;
name|this
operator|.
name|setResultConverter
argument_list|(
name|button
lambda|->
block|{
if|if
condition|(
name|button
operator|==
name|ButtonType
operator|.
name|OK
condition|)
block|{
name|performEdits
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a given value to a given field for all entries in a Collection. This method DOES NOT update any UndoManager,      * but returns a relevant CompoundEdit that should be registered by the caller.      *      * @param entries      The entries to process the operation for.      * @param field        The name of the field to append to.      * @param textToAppend The value to set. A null in this case will simply preserve the current field state.      * @return A CompoundEdit for the entire operation.      */
DECL|method|massAppendField (Collection<BibEntry> entries, String field, String textToAppend)
specifier|private
specifier|static
name|UndoableEdit
name|massAppendField
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|textToAppend
parameter_list|)
block|{
name|String
name|newValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|textToAppend
operator|!=
literal|null
condition|)
block|{
name|newValue
operator|=
name|textToAppend
expr_stmt|;
block|}
name|NamedCompound
name|compoundEdit
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append field"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|oldValue
operator|.
name|orElse
argument_list|(
literal|""
argument_list|)
operator|+
name|newValue
argument_list|)
expr_stmt|;
name|compoundEdit
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|oldValue
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|compoundEdit
return|;
block|}
comment|/**      * Move contents from one field to another for a Collection of entries.      *      * @param entries         The entries to do this operation for.      * @param field           The field to move contents from.      * @param newField        The field to move contents into.      * @param overwriteValues If true, overwrites any existing values in the new field. If false, makes no change for      *                        entries with existing value in the new field.      * @return A CompoundEdit for the entire operation.      */
DECL|method|massRenameField (Collection<BibEntry> entries, String field, String newField, boolean overwriteValues)
specifier|private
specifier|static
name|UndoableEdit
name|massRenameField
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|newField
parameter_list|,
name|boolean
name|overwriteValues
parameter_list|)
block|{
name|NamedCompound
name|compoundEdit
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rename field"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|valToMove
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// If there is no value, do nothing:
if|if
condition|(
operator|(
operator|!
name|valToMove
operator|.
name|isPresent
argument_list|()
operator|)
operator|||
name|valToMove
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// If we are not allowed to overwrite values, check if there is a
comment|// non-empty value already for this entry for the new field:
name|Optional
argument_list|<
name|String
argument_list|>
name|valInNewField
init|=
name|entry
operator|.
name|getField
argument_list|(
name|newField
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overwriteValues
operator|&&
operator|(
name|valInNewField
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|valInNewField
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|entry
operator|.
name|setField
argument_list|(
name|newField
argument_list|,
name|valToMove
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|compoundEdit
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|newField
argument_list|,
name|valInNewField
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|valToMove
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|compoundEdit
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|valToMove
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|compoundEdit
return|;
block|}
comment|/**      * Set a given field to a given value for all entries in a Collection. This method DOES NOT update any UndoManager,      * but returns a relevant CompoundEdit that should be registered by the caller.      *      * @param entries         The entries to set the field for.      * @param field           The name of the field to set.      * @param textToSet       The value to set. This value can be null, indicating that the field should be cleared.      * @param overwriteValues Indicate whether the value should be set even if an entry already has the field set.      * @return A CompoundEdit for the entire operation.      */
DECL|method|massSetField (Collection<BibEntry> entries, String field, String textToSet, boolean overwriteValues)
specifier|private
specifier|static
name|UndoableEdit
name|massSetField
parameter_list|(
name|Collection
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|textToSet
parameter_list|,
name|boolean
name|overwriteValues
parameter_list|)
block|{
name|NamedCompound
name|compoundEdit
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Set field"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|BibEntry
name|entry
range|:
name|entries
control|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|oldValue
init|=
name|entry
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
comment|// If we are not allowed to overwrite values, check if there is a
comment|// nonempty
comment|// value already for this entry:
if|if
condition|(
operator|!
name|overwriteValues
operator|&&
operator|(
name|oldValue
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|oldValue
operator|.
name|get
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|textToSet
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|clearField
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|textToSet
argument_list|)
expr_stmt|;
block|}
name|compoundEdit
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|entry
argument_list|,
name|field
argument_list|,
name|oldValue
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|textToSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|compoundEdit
return|;
block|}
DECL|method|init ()
specifier|private
name|void
name|init
parameter_list|()
block|{
name|fieldComboBox
operator|=
operator|new
name|ComboBox
argument_list|<>
argument_list|()
expr_stmt|;
name|fieldComboBox
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldComboBox
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|bp
operator|.
name|getDatabase
argument_list|()
operator|.
name|getAllVisibleFields
argument_list|()
argument_list|)
expr_stmt|;
name|ToggleGroup
name|toggleGroup
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|clearRadioButton
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Clear fields"
argument_list|)
argument_list|)
expr_stmt|;
name|clearRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|toggleGroup
argument_list|)
expr_stmt|;
name|renameRadioButton
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Rename field to"
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|renameRadioButton
operator|.
name|setTooltip
argument_list|(
operator|new
name|Tooltip
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Move contents of a field into a field with a different name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|renameRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|toggleGroup
argument_list|)
expr_stmt|;
name|setRadioButton
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Set fields"
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|setRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|toggleGroup
argument_list|)
expr_stmt|;
name|appendRadioButton
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Append to fields"
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|appendRadioButton
operator|.
name|setToggleGroup
argument_list|(
name|toggleGroup
argument_list|)
expr_stmt|;
name|setTextField
operator|=
operator|new
name|TextField
argument_list|()
expr_stmt|;
name|setTextField
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|setRadioButton
operator|.
name|selectedProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
name|appendTextField
operator|=
operator|new
name|TextField
argument_list|()
expr_stmt|;
name|appendTextField
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|appendRadioButton
operator|.
name|selectedProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
name|renameTextField
operator|=
operator|new
name|TextField
argument_list|()
expr_stmt|;
name|renameTextField
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|renameRadioButton
operator|.
name|selectedProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
name|overwriteCheckBox
operator|=
operator|new
name|CheckBox
argument_list|(
literal|"Overwrite existing field values"
argument_list|)
expr_stmt|;
name|GridPane
name|main
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
name|main
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field name"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|fieldComboBox
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|setRadioButton
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|setTextField
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|appendRadioButton
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|appendTextField
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|renameRadioButton
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|renameTextField
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|clearRadioButton
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|main
operator|.
name|add
argument_list|(
name|overwriteCheckBox
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|main
operator|.
name|setPadding
argument_list|(
operator|new
name|Insets
argument_list|(
literal|15
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|,
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|main
operator|.
name|setGridLinesVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|main
operator|.
name|setVgap
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|main
operator|.
name|setHgap
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|getDialogPane
argument_list|()
operator|.
name|setContent
argument_list|(
name|main
argument_list|)
expr_stmt|;
name|Validator
name|fieldNameValidator
init|=
operator|new
name|FunctionBasedValidator
argument_list|<>
argument_list|(
name|fieldComboBox
operator|.
name|valueProperty
argument_list|()
argument_list|,
name|StringUtil
operator|::
name|isNotBlank
argument_list|,
operator|new
name|ValidationMessage
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must enter at least one field name"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Platform
operator|.
name|runLater
argument_list|(
parameter_list|()
lambda|->
block|{
comment|// Need to run this async, otherwise the dialog does not work
name|ControlsFxVisualizer
name|visualizer
init|=
operator|new
name|ControlsFxVisualizer
argument_list|()
decl_stmt|;
name|visualizer
operator|.
name|setDecoration
argument_list|(
operator|new
name|IconValidationDecorator
argument_list|()
argument_list|)
expr_stmt|;
name|visualizer
operator|.
name|initVisualization
argument_list|(
name|fieldNameValidator
operator|.
name|getValidationStatus
argument_list|()
argument_list|,
name|fieldComboBox
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|performEdits ()
specifier|private
name|void
name|performEdits
parameter_list|()
block|{
name|String
name|toSet
init|=
name|setTextField
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|toSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toSet
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|fieldName
init|=
name|fieldComboBox
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NamedCompound
name|compoundEdit
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Set field"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|renameRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|massRenameField
argument_list|(
name|entries
argument_list|,
name|fieldName
argument_list|,
name|renameTextField
operator|.
name|getText
argument_list|()
argument_list|,
name|overwriteCheckBox
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|appendRadioButton
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|massAppendField
argument_list|(
name|entries
argument_list|,
name|fieldName
argument_list|,
name|appendTextField
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compoundEdit
operator|.
name|addEdit
argument_list|(
name|massSetField
argument_list|(
name|entries
argument_list|,
name|fieldName
argument_list|,
name|setRadioButton
operator|.
name|isSelected
argument_list|()
condition|?
name|toSet
else|:
literal|null
argument_list|,
name|overwriteCheckBox
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|compoundEdit
operator|.
name|end
argument_list|()
expr_stmt|;
name|bp
operator|.
name|getUndoManager
argument_list|()
operator|.
name|addEdit
argument_list|(
name|compoundEdit
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

