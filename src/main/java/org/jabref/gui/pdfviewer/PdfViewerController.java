begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2003-2016 JabRef contributors.  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *  * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.  */
end_comment

begin_package
DECL|package|org.jabref.gui.pdfviewer
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|pdfviewer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics2D
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|animation
operator|.
name|FadeTransition
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleObjectProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|embed
operator|.
name|swing
operator|.
name|SwingFXUtils
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|geometry
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ChoiceBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|image
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|image
operator|.
name|ImageView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|StackPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|util
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AbstractController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|AbstractViewModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|StateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BackgroundTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|TypedBibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|io
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabaseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|ParsedFileField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|flowless
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|flowless
operator|.
name|VirtualFlow
import|;
end_import

begin_class
DECL|class|PdfViewerController
specifier|public
class|class
name|PdfViewerController
extends|extends
name|AbstractController
argument_list|<
name|PdfViewerController
operator|.
name|PdfDocumentViewModel
argument_list|>
block|{
DECL|field|fileChoice
annotation|@
name|FXML
specifier|private
name|ChoiceBox
argument_list|<
name|String
argument_list|>
name|fileChoice
decl_stmt|;
DECL|field|mainPane
annotation|@
name|FXML
specifier|private
name|BorderPane
name|mainPane
decl_stmt|;
comment|//@FXML private Pagination pagination;
DECL|field|stateManager
annotation|@
name|Inject
specifier|private
name|StateManager
name|stateManager
decl_stmt|;
DECL|field|taskExecutor
annotation|@
name|Inject
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|field|currentDocument
specifier|private
name|ObjectProperty
argument_list|<
name|PdfDocumentViewModel
argument_list|>
name|currentDocument
decl_stmt|;
DECL|method|renderPage (PDPage page)
specifier|private
specifier|static
name|Image
name|renderPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
try|try
block|{
name|int
name|resolution
init|=
literal|96
decl_stmt|;
name|BufferedImage
name|image
init|=
name|page
operator|.
name|convertToImage
argument_list|(
name|BufferedImage
operator|.
name|TYPE_INT_RGB
argument_list|,
literal|2
operator|*
name|resolution
argument_list|)
decl_stmt|;
return|return
name|SwingFXUtils
operator|.
name|toFXImage
argument_list|(
name|resize
argument_list|(
name|image
argument_list|,
literal|600
argument_list|,
literal|800
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO: LOG
return|return
literal|null
return|;
block|}
block|}
comment|// Taken from http://stackoverflow.com/a/9417836/873661
DECL|method|resize (BufferedImage img, int newW, int newH)
specifier|private
specifier|static
name|BufferedImage
name|resize
parameter_list|(
name|BufferedImage
name|img
parameter_list|,
name|int
name|newW
parameter_list|,
name|int
name|newH
parameter_list|)
block|{
name|java
operator|.
name|awt
operator|.
name|Image
name|tmp
init|=
name|img
operator|.
name|getScaledInstance
argument_list|(
name|newW
argument_list|,
name|newH
argument_list|,
name|java
operator|.
name|awt
operator|.
name|Image
operator|.
name|SCALE_SMOOTH
argument_list|)
decl_stmt|;
name|BufferedImage
name|dimg
init|=
operator|new
name|BufferedImage
argument_list|(
name|newW
argument_list|,
name|newH
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
decl_stmt|;
name|Graphics2D
name|g2d
init|=
name|dimg
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|g2d
operator|.
name|drawImage
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|g2d
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|dimg
return|;
block|}
annotation|@
name|FXML
DECL|method|initialize ()
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|currentDocument
operator|=
operator|new
name|SimpleObjectProperty
argument_list|<>
argument_list|()
expr_stmt|;
name|currentDocument
operator|.
name|addListener
argument_list|(
parameter_list|(
name|observable
parameter_list|,
name|oldDocument
parameter_list|,
name|newDocument
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|newDocument
operator|!=
literal|null
condition|)
block|{
name|ObservableList
argument_list|<
name|PDPage
argument_list|>
name|pages
init|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|newDocument
operator|.
name|getPages
argument_list|()
argument_list|)
decl_stmt|;
name|VirtualFlow
argument_list|<
name|PDPage
argument_list|,
name|Cell
argument_list|<
name|PDPage
argument_list|,
name|StackPane
argument_list|>
argument_list|>
name|flow
init|=
name|VirtualFlow
operator|.
name|createVertical
argument_list|(
name|pages
argument_list|,
name|this
operator|::
name|createPageCell
argument_list|)
decl_stmt|;
comment|//flow.visibleProperty().bind(isNotEmpty(pages));
comment|//flow.managedProperty().bind(isNotEmpty(pages));
name|mainPane
operator|.
name|setCenter
argument_list|(
name|flow
argument_list|)
expr_stmt|;
name|StackPane
operator|.
name|setAlignment
argument_list|(
name|flow
argument_list|,
name|Pos
operator|.
name|BOTTOM_RIGHT
argument_list|)
expr_stmt|;
comment|//flow.resize(1000, 1000);
comment|//flow.layout();
comment|//flow.setMinWidth(1000);
comment|//flow.setPrefWidth(1000);
comment|//pagination.setCurrentPageIndex(0);
block|}
block|}
argument_list|)
expr_stmt|;
comment|/*pagination.pageCountProperty().bind(new IntegerBinding() {             {                 super.bind(currentDocument);             }             @Override             protected int computeValue() {                 return currentDocument.get() == null ? 0 : currentDocument.get().getNumberOfPages();             }         });         pagination.disableProperty().bind(Bindings.isNull(currentDocument));          pagination.setPageFactory(pageNumber -> currentDocument.get() == null ? null : new ImageView(currentDocument.get().getImage(pageNumber))); */
name|stateManager
operator|.
name|getSelectedEntries
argument_list|()
operator|.
name|addListener
argument_list|(
operator|(
name|ListChangeListener
argument_list|<
name|?
super|super
name|BibEntry
argument_list|>
operator|)
name|c
lambda|->
name|setCurrentEntries
argument_list|(
name|stateManager
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setCurrentEntries
argument_list|(
name|stateManager
operator|.
name|getSelectedEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createPageCell (PDPage pageNew)
specifier|private
name|Cell
argument_list|<
name|PDPage
argument_list|,
name|StackPane
argument_list|>
name|createPageCell
parameter_list|(
name|PDPage
name|pageNew
parameter_list|)
block|{
return|return
operator|new
name|Cell
argument_list|<
name|PDPage
argument_list|,
name|StackPane
argument_list|>
argument_list|()
block|{
name|ImageView
name|imageView
init|=
operator|new
name|ImageView
argument_list|(
name|renderPage
argument_list|(
name|pageNew
argument_list|)
argument_list|)
decl_stmt|;
name|StackPane
name|imageHolder
init|=
operator|new
name|StackPane
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|StackPane
name|getNode
parameter_list|()
block|{
name|imageHolder
operator|.
name|getStyleClass
argument_list|()
operator|.
name|setAll
argument_list|(
literal|"image-holder"
argument_list|)
expr_stmt|;
name|imageHolder
operator|.
name|getChildren
argument_list|()
operator|.
name|setAll
argument_list|(
name|imageView
argument_list|)
expr_stmt|;
comment|//imageHolder.setPadding(new Insets(100));
return|return
name|imageHolder
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReusable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateItem
parameter_list|(
name|PDPage
name|page
parameter_list|)
block|{
comment|// First hide old page
name|imageView
operator|.
name|setOpacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BackgroundTask
argument_list|<
name|Image
argument_list|>
name|generateImage
init|=
name|BackgroundTask
operator|.
name|run
argument_list|(
parameter_list|()
lambda|->
name|renderPage
argument_list|(
name|page
argument_list|)
argument_list|)
operator|.
name|onSuccess
argument_list|(
name|image
lambda|->
block|{
name|imageView
operator|.
name|setImage
argument_list|(
name|image
argument_list|)
argument_list|;
comment|// Fade new page in for smoother transition
name|FadeTransition
name|fadeIn
operator|=
operator|new
name|FadeTransition
argument_list|(
name|Duration
operator|.
name|millis
argument_list|(
literal|100
argument_list|)
argument_list|,
name|imageView
argument_list|)
argument_list|;
name|fadeIn
operator|.
name|setFromValue
argument_list|(
literal|0
argument_list|)
argument_list|;
name|fadeIn
operator|.
name|setToValue
argument_list|(
literal|1
argument_list|)
argument_list|;
name|fadeIn
operator|.
name|play
argument_list|()
argument_list|;
block|}
block|)
empty_stmt|;
name|taskExecutor
operator|.
name|execute
argument_list|(
name|generateImage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
DECL|method|setCurrentEntries (List<BibEntry> entries)
name|void
name|setCurrentEntries
parameter_list|(
name|List
argument_list|<
name|BibEntry
argument_list|>
name|entries
parameter_list|)
block|{
if|if
condition|(
operator|!
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BibEntry
name|firstSelectedEntry
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|setCurrentEntry
argument_list|(
name|firstSelectedEntry
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|setCurrentEntry (BibEntry rawEntry)
specifier|private
name|void
name|setCurrentEntry
parameter_list|(
name|BibEntry
name|rawEntry
parameter_list|)
block|{
name|BibDatabaseContext
name|databaseContext
init|=
name|stateManager
operator|.
name|activeDatabaseProperty
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|TypedBibEntry
name|entry
init|=
operator|new
name|TypedBibEntry
argument_list|(
name|rawEntry
argument_list|,
name|databaseContext
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParsedFileField
argument_list|>
name|linkedFiles
init|=
name|entry
operator|.
name|getFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|ParsedFileField
name|linkedFile
range|:
name|linkedFiles
control|)
block|{
comment|// TODO: Find a better way to get the open database
comment|// TODO: It should be possible to simply write linkedFile.getFile()
name|Optional
argument_list|<
name|File
argument_list|>
name|file
init|=
name|FileUtil
operator|.
name|expandFilename
argument_list|(
name|databaseContext
argument_list|,
name|linkedFile
operator|.
name|getLink
argument_list|()
argument_list|,
name|Globals
operator|.
name|prefs
operator|.
name|getFileDirectoryPreferences
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|setCurrentDocument
argument_list|(
name|file
operator|.
name|get
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileChoice
operator|.
name|setItems
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|linkedFiles
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ParsedFileField
operator|::
name|getLink
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fileChoice
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|selectFirst
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
DECL|method|setCurrentDocument (Path path)
specifier|private
name|void
name|setCurrentDocument
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|currentDocument
operator|.
name|set
argument_list|(
operator|new
name|PdfDocumentViewModel
argument_list|(
name|PDDocument
operator|.
name|load
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_class
DECL|class|PdfDocumentViewModel
specifier|public
class|class
name|PdfDocumentViewModel
extends|extends
name|AbstractViewModel
block|{
DECL|field|document
specifier|private
specifier|final
name|PDDocument
name|document
decl_stmt|;
DECL|method|PdfDocumentViewModel (PDDocument document)
specifier|public
name|PdfDocumentViewModel
parameter_list|(
name|PDDocument
name|document
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumberOfPages ()
specifier|public
name|int
name|getNumberOfPages
parameter_list|()
block|{
return|return
name|document
operator|.
name|getNumberOfPages
argument_list|()
return|;
block|}
DECL|method|getPages ()
specifier|public
name|List
argument_list|<
name|PDPage
argument_list|>
name|getPages
parameter_list|()
block|{
return|return
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
return|;
block|}
DECL|method|getImage (int pageNumber)
specifier|public
name|Image
name|getImage
parameter_list|(
name|int
name|pageNumber
parameter_list|)
block|{
if|if
condition|(
name|pageNumber
operator|<=
literal|0
operator|||
name|pageNumber
operator|>
name|document
operator|.
name|getNumberOfPages
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PDPage
name|page
init|=
operator|(
name|PDPage
operator|)
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAllPages
argument_list|()
operator|.
name|get
argument_list|(
name|pageNumber
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|BufferedImage
name|image
init|=
name|page
operator|.
name|convertToImage
argument_list|()
decl_stmt|;
return|return
name|SwingFXUtils
operator|.
name|toFXImage
argument_list|(
name|resize
argument_list|(
name|image
argument_list|,
literal|600
argument_list|,
literal|800
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

unit|}
end_unit

