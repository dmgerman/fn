begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|DialogPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToggleGroup
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|stage
operator|.
name|Stage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|NamedCompound
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|undo
operator|.
name|UndoableFieldChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BaseDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|IconValidationDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|database
operator|.
name|BibDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibEntry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|airhacks
operator|.
name|afterburner
operator|.
name|views
operator|.
name|ViewLoader
import|;
end_import

begin_import
import|import
name|de
operator|.
name|saxsys
operator|.
name|mvvmfx
operator|.
name|utils
operator|.
name|validation
operator|.
name|visualization
operator|.
name|ControlsFxVisualizer
import|;
end_import

begin_class
DECL|class|ReplaceStringView
specifier|public
class|class
name|ReplaceStringView
extends|extends
name|BaseDialog
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|RadioGroup
annotation|@
name|FXML
specifier|public
name|ToggleGroup
name|RadioGroup
decl_stmt|;
DECL|field|CancelButton
annotation|@
name|FXML
specifier|public
name|Button
name|CancelButton
decl_stmt|;
DECL|field|ReplaceButton
annotation|@
name|FXML
specifier|public
name|Button
name|ReplaceButton
decl_stmt|;
DECL|field|LimitFieldInput
annotation|@
name|FXML
specifier|private
name|TextField
name|LimitFieldInput
decl_stmt|;
DECL|field|FindField
annotation|@
name|FXML
specifier|private
name|TextField
name|FindField
decl_stmt|;
DECL|field|ReplaceField
annotation|@
name|FXML
specifier|private
name|TextField
name|ReplaceField
decl_stmt|;
DECL|field|checkLimit
annotation|@
name|FXML
specifier|private
name|CheckBox
name|checkLimit
decl_stmt|;
DECL|field|pane
annotation|@
name|FXML
specifier|private
name|DialogPane
name|pane
decl_stmt|;
DECL|field|AllFieldReplace
specifier|private
name|boolean
name|AllFieldReplace
decl_stmt|;
DECL|field|selOnly
specifier|private
name|boolean
name|selOnly
decl_stmt|;
DECL|field|findString
specifier|private
name|String
name|findString
decl_stmt|;
DECL|field|replaceString
specifier|private
name|String
name|replaceString
decl_stmt|;
DECL|field|fieldStrings
specifier|private
name|String
index|[]
name|fieldStrings
decl_stmt|;
DECL|field|database
specifier|private
name|BibDatabase
name|database
decl_stmt|;
DECL|field|exitSignal
specifier|private
name|boolean
name|exitSignal
decl_stmt|;
DECL|field|panel
specifier|private
name|BasePanel
name|panel
decl_stmt|;
DECL|field|st
specifier|private
name|Stage
name|st
decl_stmt|;
DECL|field|visualizer
specifier|private
specifier|final
name|ControlsFxVisualizer
name|visualizer
init|=
operator|new
name|ControlsFxVisualizer
argument_list|()
decl_stmt|;
DECL|method|ReplaceStringView (BibDatabase bibDatabase, BasePanel basePanel)
specifier|public
name|ReplaceStringView
parameter_list|(
name|BibDatabase
name|bibDatabase
parameter_list|,
name|BasePanel
name|basePanel
parameter_list|)
block|{
name|this
operator|.
name|setTitle
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replace String"
argument_list|)
argument_list|)
expr_stmt|;
name|database
operator|=
name|bibDatabase
expr_stmt|;
name|AllFieldReplace
operator|=
literal|true
expr_stmt|;
name|exitSignal
operator|=
literal|false
expr_stmt|;
name|selOnly
operator|=
literal|false
expr_stmt|;
name|panel
operator|=
name|basePanel
expr_stmt|;
name|ViewLoader
operator|.
name|view
argument_list|(
name|this
argument_list|)
operator|.
name|load
argument_list|()
operator|.
name|setAsDialogPane
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|st
operator|=
operator|(
name|Stage
operator|)
name|this
operator|.
name|pane
operator|.
name|getScene
argument_list|()
operator|.
name|getWindow
argument_list|()
expr_stmt|;
name|st
operator|.
name|setOnCloseRequest
argument_list|(
name|event
lambda|->
name|st
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|visualizer
operator|.
name|setDecoration
argument_list|(
operator|new
name|IconValidationDecorator
argument_list|()
argument_list|)
expr_stmt|;
name|LimitFieldInput
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FindField
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ReplaceField
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkLimit
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * FXML Message handler     */
annotation|@
name|FXML
DECL|method|buttonReplace ()
specifier|public
name|void
name|buttonReplace
parameter_list|()
block|{
name|findString
operator|=
name|FindField
operator|.
name|getText
argument_list|()
expr_stmt|;
name|replaceString
operator|=
name|ReplaceField
operator|.
name|getText
argument_list|()
expr_stmt|;
name|fieldStrings
operator|=
name|LimitFieldInput
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|findString
argument_list|)
condition|)
block|{
name|exitSignal
operator|=
literal|true
expr_stmt|;
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|replace
argument_list|()
expr_stmt|;
name|exitSignal
operator|=
literal|true
expr_stmt|;
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|buttonCancel ()
specifier|public
name|void
name|buttonCancel
parameter_list|()
block|{
name|exitSignal
operator|=
literal|true
expr_stmt|;
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|radioAll ()
specifier|public
name|void
name|radioAll
parameter_list|()
block|{
name|AllFieldReplace
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|radioLimit ()
specifier|public
name|void
name|radioLimit
parameter_list|()
block|{
name|AllFieldReplace
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|FXML
DECL|method|selectOnly ()
specifier|public
name|void
name|selectOnly
parameter_list|()
block|{
name|selOnly
operator|=
operator|!
name|selOnly
expr_stmt|;
block|}
DECL|method|isExit ()
specifier|public
name|boolean
name|isExit
parameter_list|()
block|{
return|return
name|this
operator|.
name|exitSignal
return|;
block|}
comment|/**      *  General replacement, same as Action:Replace_All in BasePanel.java      *  Rep check: BasePanel == null      *  @return : replace count      */
DECL|method|replace ()
specifier|public
name|int
name|replace
parameter_list|()
block|{
specifier|final
name|NamedCompound
name|ce
init|=
operator|new
name|NamedCompound
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replace string"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|panel
operator|==
literal|null
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|this
operator|.
name|selOnly
condition|)
block|{
for|for
control|(
name|BibEntry
name|bibEntry
range|:
name|this
operator|.
name|panel
operator|.
name|getSelectedEntries
argument_list|()
control|)
block|{
name|counter
operator|+=
name|replaceItem
argument_list|(
name|bibEntry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|BibEntry
name|bibEntry
range|:
name|this
operator|.
name|database
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|counter
operator|+=
name|replaceItem
argument_list|(
name|bibEntry
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counter
return|;
block|}
comment|/**      * Does the actual operation on a Bibtex entry based on the      * settings specified in this same dialog. Returns the number of      * occurences replaced.      * Copied and Adapted from org.jabref.gui.ReplaceStringDialog.java      */
DECL|method|replaceItem (BibEntry be, NamedCompound ce)
specifier|public
name|int
name|replaceItem
parameter_list|(
name|BibEntry
name|be
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|AllFieldReplace
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|be
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|counter
operator|+=
name|replaceField
argument_list|(
name|be
argument_list|,
name|s
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|fld
range|:
name|fieldStrings
control|)
block|{
name|counter
operator|+=
name|replaceField
argument_list|(
name|be
argument_list|,
name|fld
argument_list|,
name|ce
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counter
return|;
block|}
DECL|method|replaceField (BibEntry be, String fieldname, NamedCompound ce)
specifier|private
name|int
name|replaceField
parameter_list|(
name|BibEntry
name|be
parameter_list|,
name|String
name|fieldname
parameter_list|,
name|NamedCompound
name|ce
parameter_list|)
block|{
if|if
condition|(
operator|!
name|be
operator|.
name|hasField
argument_list|(
name|fieldname
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|String
name|txt
init|=
name|be
operator|.
name|getField
argument_list|(
name|fieldname
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ind
decl_stmt|;
name|int
name|piv
init|=
literal|0
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|int
name|len1
init|=
name|this
operator|.
name|findString
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ind
operator|=
name|txt
operator|.
name|indexOf
argument_list|(
name|this
operator|.
name|findString
argument_list|,
name|piv
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|counter
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|txt
argument_list|,
name|piv
argument_list|,
name|ind
argument_list|)
expr_stmt|;
comment|// Text leading up to s1
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|replaceString
argument_list|)
expr_stmt|;
comment|// Insert s2
name|piv
operator|=
name|ind
operator|+
name|len1
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|txt
operator|.
name|substring
argument_list|(
name|piv
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|newStr
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|be
operator|.
name|setField
argument_list|(
name|fieldname
argument_list|,
name|newStr
argument_list|)
expr_stmt|;
name|ce
operator|.
name|addEdit
argument_list|(
operator|new
name|UndoableFieldChange
argument_list|(
name|be
argument_list|,
name|fieldname
argument_list|,
name|txt
argument_list|,
name|newStr
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|counter
return|;
block|}
block|}
end_class

end_unit

