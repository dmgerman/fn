begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleDoubleProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ListView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ToggleGroup
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|PropertyValueFactory
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|TextFieldTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Pane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|JabRefFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
operator|.
name|ExternalFileTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|DefaultTaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|BibtexSingleField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TableColumnsTab
class|class
name|TableColumnsTab
extends|extends
name|Pane
implements|implements
name|PrefsTab
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TableColumnsTab
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|tableChanged
specifier|private
name|boolean
name|tableChanged
decl_stmt|;
DECL|field|colSetup
specifier|private
specifier|final
name|TableView
name|colSetup
decl_stmt|;
DECL|field|tableRows
specifier|private
specifier|final
name|List
argument_list|<
name|TableRow
argument_list|>
name|tableRows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|frame
specifier|private
specifier|final
name|JabRefFrame
name|frame
decl_stmt|;
DECL|field|urlColumn
specifier|private
specifier|final
name|CheckBox
name|urlColumn
decl_stmt|;
DECL|field|fileColumn
specifier|private
specifier|final
name|CheckBox
name|fileColumn
decl_stmt|;
DECL|field|arxivColumn
specifier|private
specifier|final
name|CheckBox
name|arxivColumn
decl_stmt|;
DECL|field|extraFileColumns
specifier|private
specifier|final
name|CheckBox
name|extraFileColumns
decl_stmt|;
DECL|field|listOfFileColumns
specifier|private
specifier|final
name|ListView
name|listOfFileColumns
decl_stmt|;
DECL|field|preferUrl
specifier|private
specifier|final
name|RadioButton
name|preferUrl
decl_stmt|;
DECL|field|preferDoi
specifier|private
specifier|final
name|RadioButton
name|preferDoi
decl_stmt|;
comment|/*** begin: special fields ***/
DECL|field|specialFieldsEnabled
specifier|private
specifier|final
name|CheckBox
name|specialFieldsEnabled
decl_stmt|;
DECL|field|rankingColumn
specifier|private
specifier|final
name|CheckBox
name|rankingColumn
decl_stmt|;
DECL|field|qualityColumn
specifier|private
specifier|final
name|CheckBox
name|qualityColumn
decl_stmt|;
DECL|field|priorityColumn
specifier|private
specifier|final
name|CheckBox
name|priorityColumn
decl_stmt|;
DECL|field|relevanceColumn
specifier|private
specifier|final
name|CheckBox
name|relevanceColumn
decl_stmt|;
DECL|field|printedColumn
specifier|private
specifier|final
name|CheckBox
name|printedColumn
decl_stmt|;
DECL|field|readStatusColumn
specifier|private
specifier|final
name|CheckBox
name|readStatusColumn
decl_stmt|;
DECL|field|syncKeywords
specifier|private
specifier|final
name|RadioButton
name|syncKeywords
decl_stmt|;
DECL|field|writeSpecialFields
specifier|private
specifier|final
name|RadioButton
name|writeSpecialFields
decl_stmt|;
DECL|field|oldSpecialFieldsEnabled
specifier|private
name|boolean
name|oldSpecialFieldsEnabled
decl_stmt|;
DECL|field|oldRankingColumn
specifier|private
name|boolean
name|oldRankingColumn
decl_stmt|;
DECL|field|oldQualityColumn
specifier|private
name|boolean
name|oldQualityColumn
decl_stmt|;
DECL|field|oldPriorityColumn
specifier|private
name|boolean
name|oldPriorityColumn
decl_stmt|;
DECL|field|oldRelevanceColumn
specifier|private
name|boolean
name|oldRelevanceColumn
decl_stmt|;
DECL|field|oldPrintedColumn
specifier|private
name|boolean
name|oldPrintedColumn
decl_stmt|;
DECL|field|oldReadStatusColumn
specifier|private
name|boolean
name|oldReadStatusColumn
decl_stmt|;
DECL|field|oldSyncKeyWords
specifier|private
name|boolean
name|oldSyncKeyWords
decl_stmt|;
DECL|field|oldWriteSpecialFields
specifier|private
name|boolean
name|oldWriteSpecialFields
decl_stmt|;
DECL|field|listOfFileColumnsVBox
specifier|private
specifier|final
name|VBox
name|listOfFileColumnsVBox
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|TableRow
argument_list|>
name|data
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|GridPane
name|builder
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
comment|/**      * Customization of external program paths.      *      * @param prefs a<code>JabRefPreferences</code> value      */
DECL|method|TableColumnsTab (JabRefPreferences prefs, JabRefFrame frame)
specifier|public
name|TableColumnsTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|,
name|JabRefFrame
name|frame
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|this
operator|.
name|frame
operator|=
name|frame
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
operator|new
name|TableRow
argument_list|(
literal|"entrytype"
argument_list|,
literal|75
argument_list|)
argument_list|,
operator|new
name|TableRow
argument_list|(
literal|"author/editor"
argument_list|,
literal|300
argument_list|)
argument_list|,
operator|new
name|TableRow
argument_list|(
literal|"title"
argument_list|,
literal|470
argument_list|)
argument_list|,
operator|new
name|TableRow
argument_list|(
literal|"year"
argument_list|,
literal|60
argument_list|)
argument_list|,
operator|new
name|TableRow
argument_list|(
literal|"journal"
argument_list|,
literal|130
argument_list|)
argument_list|,
operator|new
name|TableRow
argument_list|(
literal|"bibtexkey"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|colSetup
operator|=
operator|new
name|TableView
argument_list|<>
argument_list|()
expr_stmt|;
name|TableColumn
argument_list|<
name|TableRow
argument_list|,
name|String
argument_list|>
name|field
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Field name"
argument_list|)
argument_list|)
decl_stmt|;
name|TableColumn
argument_list|<
name|TableRow
argument_list|,
name|Double
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Column width"
argument_list|)
argument_list|)
decl_stmt|;
name|field
operator|.
name|setPrefWidth
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|column
operator|.
name|setPrefWidth
argument_list|(
literal|240
argument_list|)
expr_stmt|;
name|field
operator|.
name|setCellValueFactory
argument_list|(
operator|new
name|PropertyValueFactory
argument_list|<>
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|setCellFactory
argument_list|(
name|TextFieldTableCell
operator|.
name|forTableColumn
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setOnEditCommit
argument_list|(
parameter_list|(
name|TableColumn
operator|.
name|CellEditEvent
argument_list|<
name|TableRow
argument_list|,
name|String
argument_list|>
name|t
parameter_list|)
lambda|->
block|{
name|t
operator|.
name|getTableView
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
name|t
operator|.
name|getTablePosition
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|t
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|column
operator|.
name|setCellValueFactory
argument_list|(
operator|new
name|PropertyValueFactory
argument_list|<>
argument_list|(
literal|"length"
argument_list|)
argument_list|)
expr_stmt|;
name|column
operator|.
name|setOnEditCommit
argument_list|(
parameter_list|(
name|TableColumn
operator|.
name|CellEditEvent
argument_list|<
name|TableRow
argument_list|,
name|Double
argument_list|>
name|t
parameter_list|)
lambda|->
block|{
name|t
operator|.
name|getTableView
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
name|t
operator|.
name|getTablePosition
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|t
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|getColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|field
argument_list|,
name|column
argument_list|)
expr_stmt|;
specifier|final
name|TextField
name|addName
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
name|addName
operator|.
name|setPromptText
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|addName
operator|.
name|setMaxWidth
argument_list|(
name|field
operator|.
name|getPrefWidth
argument_list|()
argument_list|)
expr_stmt|;
name|addName
operator|.
name|setPrefHeight
argument_list|(
literal|30
argument_list|)
expr_stmt|;
specifier|final
name|TextField
name|addLast
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
name|addLast
operator|.
name|setMaxWidth
argument_list|(
name|column
operator|.
name|getPrefWidth
argument_list|()
argument_list|)
expr_stmt|;
name|addLast
operator|.
name|setPromptText
argument_list|(
literal|"width"
argument_list|)
expr_stmt|;
name|addLast
operator|.
name|setPrefHeight
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|BorderPane
name|tabPanel
init|=
operator|new
name|BorderPane
argument_list|()
decl_stmt|;
name|ScrollPane
name|sp
init|=
operator|new
name|ScrollPane
argument_list|()
decl_stmt|;
name|sp
operator|.
name|setContent
argument_list|(
name|colSetup
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|setCenter
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|HBox
name|toolBar
init|=
operator|new
name|HBox
argument_list|()
decl_stmt|;
name|Button
name|addRow
init|=
operator|new
name|Button
argument_list|(
literal|"Add"
argument_list|)
decl_stmt|;
name|addRow
operator|.
name|setPrefSize
argument_list|(
literal|80
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|addRow
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
name|addLast
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TableRow
name|tableRow
init|=
name|addLast
operator|.
name|getText
argument_list|()
operator|.
name|matches
argument_list|(
literal|"[1-9][0-9]"
argument_list|)
condition|?
operator|new
name|TableRow
argument_list|(
name|addName
operator|.
name|getText
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|addLast
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
else|:
operator|new
name|TableRow
argument_list|(
name|addName
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|addName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addLast
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableRows
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
name|colSetup
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Button
name|deleteRow
init|=
operator|new
name|Button
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|deleteRow
operator|.
name|setPrefSize
argument_list|(
literal|80
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|deleteRow
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|!=
literal|null
operator|&&
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|tableChanged
operator|=
literal|true
expr_stmt|;
name|int
name|row
init|=
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
decl_stmt|;
name|TableRow
name|tableRow
init|=
name|data
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|data
operator|.
name|remove
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableRows
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Button
name|up
init|=
operator|new
name|Button
argument_list|(
literal|"Up"
argument_list|)
decl_stmt|;
name|up
operator|.
name|setPrefSize
argument_list|(
literal|80
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|up
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|row
init|=
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|>
name|data
operator|.
name|size
argument_list|()
operator|||
name|row
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|TableRow
name|tableRow1
init|=
name|data
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|TableRow
name|tableRow2
init|=
name|data
operator|.
name|get
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
name|data
operator|.
name|set
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|tableRow1
argument_list|)
expr_stmt|;
name|data
operator|.
name|set
argument_list|(
name|row
argument_list|,
name|tableRow2
argument_list|)
expr_stmt|;
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableRows
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
argument_list|)
expr_stmt|;
name|Button
name|down
init|=
operator|new
name|Button
argument_list|(
literal|"Down"
argument_list|)
decl_stmt|;
name|down
operator|.
name|setPrefSize
argument_list|(
literal|80
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|down
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|row
init|=
name|colSetup
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|+
literal|1
operator|>
name|data
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
name|TableRow
name|tableRow1
init|=
name|data
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|TableRow
name|tableRow2
init|=
name|data
operator|.
name|get
argument_list|(
name|row
operator|+
literal|1
argument_list|)
decl_stmt|;
name|data
operator|.
name|set
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|tableRow1
argument_list|)
expr_stmt|;
name|data
operator|.
name|set
argument_list|(
name|row
argument_list|,
name|tableRow2
argument_list|)
expr_stmt|;
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableRows
operator|.
name|addAll
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
argument_list|)
expr_stmt|;
name|toolBar
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|addName
argument_list|,
name|addLast
argument_list|,
name|addRow
argument_list|,
name|deleteRow
argument_list|,
name|up
argument_list|,
name|down
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|setBottom
argument_list|(
name|toolBar
argument_list|)
expr_stmt|;
name|fileColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show file column"
argument_list|)
argument_list|)
expr_stmt|;
name|urlColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show URL/DOI column"
argument_list|)
argument_list|)
expr_stmt|;
name|preferUrl
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show URL first"
argument_list|)
argument_list|)
expr_stmt|;
name|preferDoi
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show DOI first"
argument_list|)
argument_list|)
expr_stmt|;
name|urlColumn
operator|.
name|setOnAction
argument_list|(
name|arg0
lambda|->
block|{
name|preferUrl
operator|.
name|setDisable
argument_list|(
operator|!
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|preferDoi
operator|.
name|setDisable
argument_list|(
operator|!
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|arxivColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show ArXiv column"
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ExternalFileType
argument_list|>
name|fileTypes
init|=
name|ExternalFileTypes
operator|.
name|getInstance
argument_list|()
operator|.
name|getExternalFileTypeSelection
argument_list|()
decl_stmt|;
name|String
index|[]
name|fileTypeNames
init|=
operator|new
name|String
index|[
name|fileTypes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ExternalFileType
name|fileType
range|:
name|fileTypes
control|)
block|{
name|fileTypeNames
index|[
name|i
operator|++
index|]
operator|=
name|fileType
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|listOfFileColumns
operator|=
operator|new
name|ListView
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|fileTypeNames
argument_list|)
argument_list|)
expr_stmt|;
name|listOfFileColumnsVBox
operator|=
operator|new
name|VBox
argument_list|()
expr_stmt|;
name|listOfFileColumnsVBox
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|listOfFileColumns
argument_list|)
expr_stmt|;
name|ScrollPane
name|listOfFileColumnsScrollPane
init|=
operator|new
name|ScrollPane
argument_list|()
decl_stmt|;
name|listOfFileColumnsScrollPane
operator|.
name|setMaxHeight
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|listOfFileColumnsScrollPane
operator|.
name|setContent
argument_list|(
name|listOfFileColumnsVBox
argument_list|)
expr_stmt|;
name|extraFileColumns
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show extra columns"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|listOfFileColumnsVBox
operator|.
name|setDisable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|extraFileColumns
operator|.
name|setOnAction
argument_list|(
name|arg0
lambda|->
name|listOfFileColumnsVBox
operator|.
name|setDisable
argument_list|(
operator|!
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/** begin: special table columns and special fields ***/
name|Button
name|helpButton
init|=
operator|new
name|Button
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
name|helpButton
operator|.
name|setPrefSize
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|helpButton
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help on special fields"
argument_list|)
argument_list|,
name|HelpFile
operator|.
name|SPECIAL_FIELDS
argument_list|)
operator|.
name|getHelpButton
argument_list|()
operator|.
name|doClick
argument_list|()
argument_list|)
expr_stmt|;
name|rankingColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show rank"
argument_list|)
argument_list|)
expr_stmt|;
name|qualityColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show quality"
argument_list|)
argument_list|)
expr_stmt|;
name|priorityColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show priority"
argument_list|)
argument_list|)
expr_stmt|;
name|relevanceColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show relevance"
argument_list|)
argument_list|)
expr_stmt|;
name|printedColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show printed status"
argument_list|)
argument_list|)
expr_stmt|;
name|readStatusColumn
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Show read status"
argument_list|)
argument_list|)
expr_stmt|;
comment|// "sync keywords" and "write special" fields may be configured mutually exclusive only
comment|// The implementation supports all combinations (TRUE+TRUE and FALSE+FALSE, even if the latter does not make sense)
comment|// To avoid confusion, we opted to make the setting mutually exclusive
name|syncKeywords
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Synchronize with keywords"
argument_list|)
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Write values of special fields as separate fields to BibTeX"
argument_list|)
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Enable special fields"
argument_list|)
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|.
name|setOnAction
argument_list|(
name|event
lambda|->
block|{
name|boolean
name|isEnabled
init|=
name|specialFieldsEnabled
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|rankingColumn
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|qualityColumn
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|priorityColumn
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|relevanceColumn
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|printedColumn
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|readStatusColumn
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|syncKeywords
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|.
name|setDisable
argument_list|(
operator|!
name|isEnabled
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Label
name|specialTableColumns
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Special table columns"
argument_list|)
argument_list|)
decl_stmt|;
name|specialTableColumns
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"sectionHeader"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|specialTableColumns
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|GridPane
name|specialTableColumnsBuilder
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|specialFieldsEnabled
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|rankingColumn
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|relevanceColumn
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|qualityColumn
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|priorityColumn
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|printedColumn
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|readStatusColumn
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
specifier|final
name|ToggleGroup
name|syncGroup
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|syncKeywords
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|writeSpecialFields
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|syncKeywords
operator|.
name|setToggleGroup
argument_list|(
name|syncGroup
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|.
name|setToggleGroup
argument_list|(
name|syncGroup
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|helpButton
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|fileColumn
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|urlColumn
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|ToggleGroup
name|preferUrlOrDoi
init|=
operator|new
name|ToggleGroup
argument_list|()
decl_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|preferUrl
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|preferDoi
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|preferUrl
operator|.
name|setToggleGroup
argument_list|(
name|preferUrlOrDoi
argument_list|)
expr_stmt|;
name|preferDoi
operator|.
name|setToggleGroup
argument_list|(
name|preferUrlOrDoi
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|arxivColumn
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|extraFileColumns
argument_list|,
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|specialTableColumnsBuilder
operator|.
name|add
argument_list|(
name|listOfFileColumnsScrollPane
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|specialTableColumnsBuilder
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/*** end: special table columns and special fields ***/
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Label
name|entryTableColumns
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry table columns"
argument_list|)
argument_list|)
decl_stmt|;
name|entryTableColumns
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"sectionHeader"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|entryTableColumns
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|tabPanel
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Button
name|buttonWidth
init|=
operator|new
name|Button
argument_list|(
literal|"Update to current column widths"
argument_list|)
decl_stmt|;
name|buttonWidth
operator|.
name|setPrefSize
argument_list|(
literal|300
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|buttonWidth
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
operator|new
name|UpdateWidthsAction
argument_list|()
argument_list|)
expr_stmt|;
name|Button
name|buttonOrder
init|=
operator|new
name|Button
argument_list|(
literal|"Update to current column order"
argument_list|)
decl_stmt|;
name|buttonOrder
operator|.
name|setPrefSize
argument_list|(
literal|300
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|buttonOrder
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
operator|new
name|UpdateOrderAction
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|buttonWidth
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|buttonOrder
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
DECL|method|getBuilder ()
specifier|public
name|Node
name|getBuilder
parameter_list|()
block|{
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|setValues ()
specifier|public
name|void
name|setValues
parameter_list|()
block|{
name|fileColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|urlColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|URL_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|preferUrl
operator|.
name|setSelected
argument_list|(
operator|!
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|preferDoi
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|)
argument_list|)
expr_stmt|;
name|fileColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|arxivColumn
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ARXIV_COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|extraFileColumns
operator|.
name|setSelected
argument_list|(
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXTRA_FILE_COLUMNS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|desiredColumns
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|)
decl_stmt|;
name|int
name|listSize
init|=
name|listOfFileColumns
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|int
index|[]
name|indicesToSelect
init|=
operator|new
name|int
index|[
name|listSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|indicesToSelect
index|[
name|i
index|]
operator|=
name|listSize
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|String
name|desiredColumn
range|:
name|desiredColumns
control|)
block|{
if|if
condition|(
name|listOfFileColumns
operator|.
name|getAccessibleText
argument_list|()
operator|.
name|equals
argument_list|(
name|desiredColumn
argument_list|)
condition|)
block|{
name|indicesToSelect
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
name|i
operator|++
control|)
block|{
name|listOfFileColumns
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|indicesToSelect
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|listOfFileColumns
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
comment|/*** begin: special fields ***/
name|oldRankingColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_RANKING
argument_list|)
expr_stmt|;
name|rankingColumn
operator|.
name|setSelected
argument_list|(
name|oldRankingColumn
argument_list|)
expr_stmt|;
name|oldQualityColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_QUALITY
argument_list|)
expr_stmt|;
name|qualityColumn
operator|.
name|setSelected
argument_list|(
name|oldQualityColumn
argument_list|)
expr_stmt|;
name|oldPriorityColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_PRIORITY
argument_list|)
expr_stmt|;
name|priorityColumn
operator|.
name|setSelected
argument_list|(
name|oldPriorityColumn
argument_list|)
expr_stmt|;
name|oldRelevanceColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_RELEVANCE
argument_list|)
expr_stmt|;
name|relevanceColumn
operator|.
name|setSelected
argument_list|(
name|oldRelevanceColumn
argument_list|)
expr_stmt|;
name|oldPrintedColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_PRINTED
argument_list|)
expr_stmt|;
name|printedColumn
operator|.
name|setSelected
argument_list|(
name|oldPrintedColumn
argument_list|)
expr_stmt|;
name|oldReadStatusColumn
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_READ
argument_list|)
expr_stmt|;
name|readStatusColumn
operator|.
name|setSelected
argument_list|(
name|oldReadStatusColumn
argument_list|)
expr_stmt|;
name|oldSyncKeyWords
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|)
expr_stmt|;
name|syncKeywords
operator|.
name|setSelected
argument_list|(
name|oldSyncKeyWords
argument_list|)
expr_stmt|;
name|oldWriteSpecialFields
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SERIALIZESPECIALFIELDS
argument_list|)
expr_stmt|;
name|writeSpecialFields
operator|.
name|setSelected
argument_list|(
name|oldWriteSpecialFields
argument_list|)
expr_stmt|;
comment|// has to be called as last to correctly enable/disable the other settings
name|oldSpecialFieldsEnabled
operator|=
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SPECIALFIELDSENABLED
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|.
name|setSelected
argument_list|(
operator|!
name|oldSpecialFieldsEnabled
argument_list|)
expr_stmt|;
name|specialFieldsEnabled
operator|.
name|setSelected
argument_list|(
name|oldSpecialFieldsEnabled
argument_list|)
expr_stmt|;
comment|// Call twice to make sure the ChangeListener is triggered
comment|/*** end: special fields ***/
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lengths
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|lengths
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|TableRow
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|lengths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|TableRow
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*** end: special fields ***/
DECL|class|TableRow
specifier|public
specifier|static
class|class
name|TableRow
block|{
DECL|field|name
specifier|private
name|SimpleStringProperty
name|name
decl_stmt|;
DECL|field|length
specifier|private
name|SimpleDoubleProperty
name|length
decl_stmt|;
DECL|method|TableRow ()
specifier|public
name|TableRow
parameter_list|()
block|{
name|name
operator|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|length
operator|=
operator|new
name|SimpleDoubleProperty
argument_list|(
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
DECL|method|TableRow (String name)
specifier|public
name|TableRow
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
operator|new
name|SimpleStringProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|length
operator|=
operator|new
name|SimpleDoubleProperty
argument_list|(
name|BibtexSingleField
operator|.
name|DEFAULT_FIELD_LENGTH
argument_list|)
expr_stmt|;
block|}
DECL|method|TableRow (String name, double length)
specifier|public
name|TableRow
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|length
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
operator|new
name|SimpleStringProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
operator|new
name|SimpleDoubleProperty
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|.
name|set
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|double
name|getLength
parameter_list|()
block|{
return|return
name|length
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setLength (double length)
specifier|public
name|void
name|setLength
parameter_list|(
name|double
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|.
name|set
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|UpdateOrderAction
class|class
name|UpdateOrderAction
extends|extends
name|AbstractAction
block|{
DECL|method|UpdateOrderAction ()
specifier|public
name|UpdateOrderAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Update to current column order"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// idea: sort elements according to value stored in hash, keep
comment|// everything not inside hash/mainTable as it was
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// first element (#) not inside tableRows
comment|/*             for (TableColumn<BibEntry, ?> column : panel.getMainTable().getColumns()) {                 String name = column.getText();                 if ((name != null)&& !name.isEmpty()) {                     map.put(name.toLowerCase(Locale.ROOT), i);                 }             }             */
name|Collections
operator|.
name|sort
argument_list|(
name|tableRows
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
name|Integer
name|n1
init|=
name|map
operator|.
name|get
argument_list|(
name|o1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n2
init|=
name|map
operator|.
name|get
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|n1
operator|==
literal|null
operator|)
operator|||
operator|(
name|n2
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|n1
operator|.
name|compareTo
argument_list|(
name|n2
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|.
name|addAll
argument_list|(
name|tableRows
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|colSetup
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|class|UpdateWidthsAction
class|class
name|UpdateWidthsAction
extends|extends
name|AbstractAction
block|{
DECL|method|UpdateWidthsAction ()
specifier|public
name|UpdateWidthsAction
parameter_list|()
block|{
name|super
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Update to current column widths"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|BasePanel
name|panel
init|=
name|frame
operator|.
name|getCurrentBasePanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|/*             TableColumnModel colMod = panel.getMainTable().getColumnModel();             colSetup.setValueAt(String.valueOf(colMod.getColumn(0).getWidth()), 0, 1);             for (int i = 1; i< colMod.getColumnCount(); i++) {                 try {                     String name = panel.getMainTable().getColumnName(i).toLowerCase(Locale.ROOT);                     int width = colMod.getColumn(i).getWidth();                     if ((i<= tableRows.size())&& ((String) colSetup.getValueAt(i, 0)).equalsIgnoreCase(name)) {                         colSetup.setValueAt(String.valueOf(width), i, 1);                     } else { // Doesn't match; search for a matching col in our table                         for (int j = 0; j< colSetup.getRowCount(); j++) {                             if ((j< tableRows.size())&& ((String) colSetup.getValueAt(j, 0)).equalsIgnoreCase(name)) {                                 colSetup.setValueAt(String.valueOf(width), j, 1);                                 break;                             }                         }                     }                 } catch (Throwable ex) {                     LOGGER.warn("Problem with table columns", ex);                 }                 colSetup.revalidate();                 colSetup.repaint();             }             */
block|}
block|}
comment|/**      * Store changes to table preferences. This method is called when      * the user clicks Ok.      *      */
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|FILE_COLUMN
argument_list|,
name|fileColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|URL_COLUMN
argument_list|,
name|urlColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|PREFER_URL_DOI
argument_list|,
name|preferDoi
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|ARXIV_COLUMN
argument_list|,
name|arxivColumn
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EXTRA_FILE_COLUMNS
argument_list|,
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extraFileColumns
operator|.
name|isSelected
argument_list|()
operator|&&
operator|!
name|listOfFileColumns
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ObservableList
name|selections
init|=
name|listOfFileColumns
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItems
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|,
name|selections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|LIST_OF_FILE_COLUMNS
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*** begin: special fields ***/
name|boolean
name|newSpecialFieldsEnabled
init|=
name|specialFieldsEnabled
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newRankingColumn
init|=
name|rankingColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newQualityColumn
init|=
name|qualityColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newPriorityColumn
init|=
name|priorityColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newRelevanceColumn
init|=
name|relevanceColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newPrintedColumn
init|=
name|printedColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newReadStatusColumn
init|=
name|readStatusColumn
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newSyncKeyWords
init|=
name|syncKeywords
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|newWriteSpecialFields
init|=
name|writeSpecialFields
operator|.
name|isSelected
argument_list|()
decl_stmt|;
name|boolean
name|restartRequired
decl_stmt|;
name|restartRequired
operator|=
operator|(
name|oldSpecialFieldsEnabled
operator|!=
name|newSpecialFieldsEnabled
operator|)
operator|||
operator|(
name|oldRankingColumn
operator|!=
name|newRankingColumn
operator|)
operator|||
operator|(
name|oldQualityColumn
operator|!=
name|newQualityColumn
operator|)
operator|||
operator|(
name|oldPriorityColumn
operator|!=
name|newPriorityColumn
operator|)
operator|||
operator|(
name|oldRelevanceColumn
operator|!=
name|newRelevanceColumn
operator|)
operator|||
operator|(
name|oldPrintedColumn
operator|!=
name|newPrintedColumn
operator|)
operator|||
operator|(
name|oldReadStatusColumn
operator|!=
name|newReadStatusColumn
operator|)
operator|||
operator|(
name|oldSyncKeyWords
operator|!=
name|newSyncKeyWords
operator|)
operator|||
operator|(
name|oldWriteSpecialFields
operator|!=
name|newWriteSpecialFields
operator|)
expr_stmt|;
if|if
condition|(
name|restartRequired
condition|)
block|{
name|DefaultTaskExecutor
operator|.
name|runInJavaFXThread
argument_list|(
parameter_list|()
lambda|->
name|frame
operator|.
name|getDialogService
argument_list|()
operator|.
name|showWarningDialogAndWait
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Changed special field settings"
argument_list|)
argument_list|,
name|Localization
operator|.
name|lang
argument_list|(
literal|"You have changed settings for special fields."
argument_list|)
operator|.
name|concat
argument_list|(
literal|" "
argument_list|)
operator|.
name|concat
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"You must restart JabRef for this to come into effect."
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restart required implies that the settings have been changed
comment|// the seetings need to be stored
if|if
condition|(
name|restartRequired
condition|)
block|{
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SPECIALFIELDSENABLED
argument_list|,
name|newSpecialFieldsEnabled
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_RANKING
argument_list|,
name|newRankingColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_PRIORITY
argument_list|,
name|newPriorityColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_QUALITY
argument_list|,
name|newQualityColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_RELEVANCE
argument_list|,
name|newRelevanceColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_PRINTED
argument_list|,
name|newPrintedColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SHOWCOLUMN_READ
argument_list|,
name|newReadStatusColumn
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AUTOSYNCSPECIALFIELDSTOKEYWORDS
argument_list|,
name|newSyncKeyWords
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|SERIALIZESPECIALFIELDS
argument_list|,
name|newWriteSpecialFields
argument_list|)
expr_stmt|;
block|}
comment|/*** end: special fields ***/
comment|//        if (colSetup.isEditing()) {
comment|//            int col = colSetup.getEditingColumn();
comment|//            int row = colSetup.getEditingRow();
comment|//            colSetup.getCellEditor(row, col).stopCellEditing();
comment|//        }
comment|// Now we need to make sense of the contents the user has made to the
comment|// table setup table.
if|if
condition|(
name|tableChanged
condition|)
block|{
comment|// First we remove all rows with empty names.
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|tableRows
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// Then we make arrays
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|widths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TableRow
name|tr
range|:
name|tableRows
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|tr
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|widths
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|tr
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally, we store the new preferences.
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_NAMES
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|COLUMN_WIDTHS
argument_list|,
name|widths
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateSettings ()
specifier|public
name|boolean
name|validateSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getTabName ()
specifier|public
name|String
name|getTabName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry table columns"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

