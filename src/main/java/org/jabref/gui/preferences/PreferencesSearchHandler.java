begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|css
operator|.
name|PseudoClass
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Parent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Labeled
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_class
DECL|class|PreferencesSearchHandler
class|class
name|PreferencesSearchHandler
block|{
DECL|field|labelHighlight
specifier|private
specifier|static
name|PseudoClass
name|labelHighlight
init|=
name|PseudoClass
operator|.
name|getPseudoClass
argument_list|(
literal|"search-highlight"
argument_list|)
decl_stmt|;
DECL|field|preferenceTabs
specifier|private
specifier|final
name|List
argument_list|<
name|PrefsTab
argument_list|>
name|preferenceTabs
decl_stmt|;
DECL|field|filteredPreferenceTabs
specifier|private
specifier|final
name|ListProperty
argument_list|<
name|PrefsTab
argument_list|>
name|filteredPreferenceTabs
decl_stmt|;
DECL|field|preferenceTabsLabelNames
specifier|private
specifier|final
name|ArrayListMultimap
argument_list|<
name|PrefsTab
argument_list|,
name|Labeled
argument_list|>
name|preferenceTabsLabelNames
decl_stmt|;
DECL|field|highlightedLabels
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Labeled
argument_list|>
name|highlightedLabels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|PreferencesSearchHandler (List<PrefsTab> preferenceTabs)
name|PreferencesSearchHandler
parameter_list|(
name|List
argument_list|<
name|PrefsTab
argument_list|>
name|preferenceTabs
parameter_list|)
block|{
name|this
operator|.
name|preferenceTabs
operator|=
name|preferenceTabs
expr_stmt|;
name|this
operator|.
name|preferenceTabsLabelNames
operator|=
name|getPrefsTabLabelMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|filteredPreferenceTabs
operator|=
operator|new
name|SimpleListProperty
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|preferenceTabs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|filterTabs (String text)
specifier|public
name|void
name|filterTabs
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|clearHighlights
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearSearch
argument_list|()
expr_stmt|;
return|return;
block|}
name|filteredPreferenceTabs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|PrefsTab
name|tab
range|:
name|preferenceTabsLabelNames
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|tabContainsLabel
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Labeled
name|labeled
range|:
name|preferenceTabsLabelNames
operator|.
name|get
argument_list|(
name|tab
argument_list|)
control|)
block|{
if|if
condition|(
name|labelContainsText
argument_list|(
name|labeled
argument_list|,
name|text
argument_list|)
condition|)
block|{
name|tabContainsLabel
operator|=
literal|true
expr_stmt|;
name|highlightLabel
argument_list|(
name|labeled
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|tabNameIsMatchedByQuery
init|=
name|tab
operator|.
name|getTabName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabContainsLabel
operator|||
name|tabNameIsMatchedByQuery
condition|)
block|{
name|filteredPreferenceTabs
operator|.
name|add
argument_list|(
name|tab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|labelContainsText (Labeled labeled, String text)
specifier|private
name|boolean
name|labelContainsText
parameter_list|(
name|Labeled
name|labeled
parameter_list|,
name|String
name|text
parameter_list|)
block|{
return|return
name|labeled
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
name|text
argument_list|)
return|;
block|}
DECL|method|highlightLabel (Labeled labeled)
specifier|private
name|void
name|highlightLabel
parameter_list|(
name|Labeled
name|labeled
parameter_list|)
block|{
name|labeled
operator|.
name|pseudoClassStateChanged
argument_list|(
name|labelHighlight
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|highlightedLabels
operator|.
name|add
argument_list|(
name|labeled
argument_list|)
expr_stmt|;
block|}
DECL|method|clearHighlights ()
specifier|private
name|void
name|clearHighlights
parameter_list|()
block|{
name|highlightedLabels
operator|.
name|forEach
argument_list|(
name|labeled
lambda|->
name|labeled
operator|.
name|pseudoClassStateChanged
argument_list|(
name|labelHighlight
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|clearSearch ()
specifier|private
name|void
name|clearSearch
parameter_list|()
block|{
name|filteredPreferenceTabs
operator|.
name|setAll
argument_list|(
name|preferenceTabs
argument_list|)
expr_stmt|;
block|}
comment|/*      * Traverse all nodes of a PrefsTab and return a      * mapping from PrefsTab to all its Labeled type nodes.      */
DECL|method|getPrefsTabLabelMap ()
specifier|private
name|ArrayListMultimap
argument_list|<
name|PrefsTab
argument_list|,
name|Labeled
argument_list|>
name|getPrefsTabLabelMap
parameter_list|()
block|{
name|ArrayListMultimap
argument_list|<
name|PrefsTab
argument_list|,
name|Labeled
argument_list|>
name|prefsTabLabelMap
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|PrefsTab
name|prefsTab
range|:
name|preferenceTabs
control|)
block|{
name|Node
name|builder
init|=
name|prefsTab
operator|.
name|getBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|instanceof
name|Parent
condition|)
block|{
name|Parent
name|parentBuilder
init|=
operator|(
name|Parent
operator|)
name|builder
decl_stmt|;
for|for
control|(
name|Node
name|child
range|:
name|parentBuilder
operator|.
name|getChildrenUnmodifiable
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|Labeled
condition|)
block|{
name|Labeled
name|labeled
init|=
operator|(
name|Labeled
operator|)
name|child
decl_stmt|;
if|if
condition|(
operator|!
name|labeled
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|prefsTabLabelMap
operator|.
name|put
argument_list|(
name|prefsTab
argument_list|,
name|labeled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|prefsTabLabelMap
return|;
block|}
DECL|method|filteredPreferenceTabsProperty ()
specifier|protected
name|ListProperty
argument_list|<
name|PrefsTab
argument_list|>
name|filteredPreferenceTabsProperty
parameter_list|()
block|{
return|return
name|filteredPreferenceTabs
return|;
block|}
block|}
end_class

end_unit

