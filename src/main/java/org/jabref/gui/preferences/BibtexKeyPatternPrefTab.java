begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|BasePanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|bibtexkeypattern
operator|.
name|BibtexKeyPatternPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|bibtexkeypattern
operator|.
name|GlobalBibtexKeyPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_comment
comment|/**  * The Preferences panel for key generation.  */
end_comment

begin_class
DECL|class|BibtexKeyPatternPrefTab
class|class
name|BibtexKeyPatternPrefTab
extends|extends
name|BibtexKeyPatternPanel
implements|implements
name|PrefsTab
block|{
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|GridPane
name|builder
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
DECL|field|dontOverwrite
specifier|private
specifier|final
name|CheckBox
name|dontOverwrite
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Do not overwrite existing keys"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|warnBeforeOverwriting
specifier|private
specifier|final
name|CheckBox
name|warnBeforeOverwriting
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Warn before overwriting existing keys"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|generateOnSave
specifier|private
specifier|final
name|CheckBox
name|generateOnSave
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate keys before saving (for entries without a key)"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|autoGenerateOnImport
specifier|private
specifier|final
name|CheckBox
name|autoGenerateOnImport
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Generate keys for imported entries"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|letterStartA
specifier|private
specifier|final
name|RadioButton
name|letterStartA
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ensure unique keys using letters (a, b, ...)"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|letterStartB
specifier|private
specifier|final
name|RadioButton
name|letterStartB
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Ensure unique keys using letters (b, c, ...)"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|alwaysAddLetter
specifier|private
specifier|final
name|RadioButton
name|alwaysAddLetter
init|=
operator|new
name|RadioButton
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Always add letter (a, b, ...) to generated keys"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|keyPatternRegex
specifier|private
specifier|final
name|TextField
name|keyPatternRegex
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|field|keyPatternReplacement
specifier|private
specifier|final
name|TextField
name|keyPatternReplacement
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
DECL|method|BibtexKeyPatternPrefTab (JabRefPreferences prefs, BasePanel panel)
specifier|public
name|BibtexKeyPatternPrefTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|,
name|BasePanel
name|panel
parameter_list|)
block|{
name|super
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|super
operator|.
name|getPanel
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|appendKeyGeneratorSettings
argument_list|()
expr_stmt|;
block|}
comment|/**      * Store changes to table preferences. This method is called when the user clicks Ok.      *      */
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
comment|// Set the default value:
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|,
name|defaultPat
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|,
name|warnBeforeOverwriting
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AVOID_OVERWRITING_KEY
argument_list|,
name|dontOverwrite
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_PATTERN_REGEX
argument_list|,
name|keyPatternRegex
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|put
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_PATTERN_REPLACEMENT
argument_list|,
name|keyPatternReplacement
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_AFTER_INSPECTION
argument_list|,
name|autoGenerateOnImport
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|,
name|generateOnSave
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|alwaysAddLetter
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|letterStartA
operator|.
name|isSelected
argument_list|()
condition|)
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_FIRST_LETTER_A
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_FIRST_LETTER_A
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Globals
operator|.
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// fetch entries from GUI
name|GlobalBibtexKeyPattern
name|keypatterns
init|=
name|getKeyPatternAsGlobalBibtexKeyPattern
argument_list|()
decl_stmt|;
comment|// store new patterns globally
name|prefs
operator|.
name|putKeyPattern
argument_list|(
name|keypatterns
argument_list|)
expr_stmt|;
block|}
DECL|method|appendKeyGeneratorSettings ()
specifier|private
name|void
name|appendKeyGeneratorSettings
parameter_list|()
block|{
comment|// Build a panel for checkbox settings:
name|autoGenerateOnImport
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|letterStartA
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|warnBeforeOverwriting
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|letterStartB
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|dontOverwrite
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|alwaysAddLetter
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|generateOnSave
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|smallFont
argument_list|)
expr_stmt|;
name|Label
name|keyGeneratorSettings
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Key generator settings"
argument_list|)
operator|+
literal|"  --------------------------"
argument_list|)
decl_stmt|;
name|keyGeneratorSettings
operator|.
name|setFont
argument_list|(
name|FontSize
operator|.
name|bigFont
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|keyGeneratorSettings
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|autoGenerateOnImport
argument_list|,
literal|1
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|letterStartA
argument_list|,
literal|2
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|warnBeforeOverwriting
argument_list|,
literal|1
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|letterStartB
argument_list|,
literal|2
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|dontOverwrite
argument_list|,
literal|1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|alwaysAddLetter
argument_list|,
literal|2
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|generateOnSave
argument_list|,
literal|1
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Replace (regular expression)"
argument_list|)
operator|+
literal|':'
argument_list|)
operator|)
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"by"
argument_list|)
operator|+
literal|':'
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|keyPatternRegex
argument_list|,
literal|1
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|keyPatternReplacement
argument_list|,
literal|2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|dontOverwrite
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
comment|// Warning before overwriting is only relevant if overwriting can happen:
name|warnBeforeOverwriting
operator|.
name|setDisable
argument_list|(
name|dontOverwrite
operator|.
name|isSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getBuilder ()
specifier|public
name|Node
name|getBuilder
parameter_list|()
block|{
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|validateSettings ()
specifier|public
name|boolean
name|validateSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setValues ()
specifier|public
name|void
name|setValues
parameter_list|()
block|{
name|super
operator|.
name|setValues
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getKeyPattern
argument_list|()
argument_list|)
expr_stmt|;
name|defaultPat
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|DEFAULT_BIBTEX_KEY_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
name|dontOverwrite
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|AVOID_OVERWRITING_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|generateOnSave
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_BEFORE_SAVING
argument_list|)
argument_list|)
expr_stmt|;
name|autoGenerateOnImport
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|GENERATE_KEYS_AFTER_INSPECTION
argument_list|)
argument_list|)
expr_stmt|;
name|warnBeforeOverwriting
operator|.
name|setSelected
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|WARN_BEFORE_OVERWRITING_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|prefAlwaysAddLetter
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_ALWAYS_ADD_LETTER
argument_list|)
decl_stmt|;
name|boolean
name|firstLetterA
init|=
name|Globals
operator|.
name|prefs
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_GEN_FIRST_LETTER_A
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefAlwaysAddLetter
condition|)
block|{
name|this
operator|.
name|alwaysAddLetter
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstLetterA
condition|)
block|{
name|this
operator|.
name|letterStartA
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|letterStartB
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Warning before overwriting is only relevant if overwriting can happen:
name|warnBeforeOverwriting
operator|.
name|setDisable
argument_list|(
name|dontOverwrite
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|keyPatternRegex
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_PATTERN_REGEX
argument_list|)
argument_list|)
expr_stmt|;
name|keyPatternReplacement
operator|.
name|setText
argument_list|(
name|Globals
operator|.
name|prefs
operator|.
name|get
argument_list|(
name|JabRefPreferences
operator|.
name|KEY_PATTERN_REPLACEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTabName ()
specifier|public
name|String
name|getTabName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"BibTeX key generator"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

