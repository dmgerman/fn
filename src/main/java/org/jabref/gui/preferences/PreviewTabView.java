begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|binding
operator|.
name|BooleanBinding
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ReadOnlyListWrapper
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ListChangeListener
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|fxml
operator|.
name|FXML
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ContextMenu
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ListView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|input
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|VBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|Globals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|DialogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|StandardActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preview
operator|.
name|PreviewViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|BindingsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ViewModelListCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|PreviewLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|citationstyle
operator|.
name|TextBasedPreviewLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|airhacks
operator|.
name|afterburner
operator|.
name|views
operator|.
name|ViewLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|richtext
operator|.
name|CodeArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|richtext
operator|.
name|LineNumberFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|richtext
operator|.
name|model
operator|.
name|StyleSpans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fxmisc
operator|.
name|richtext
operator|.
name|model
operator|.
name|StyleSpansBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PreviewTabView
specifier|public
class|class
name|PreviewTabView
extends|extends
name|VBox
implements|implements
name|PrefsTab
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PreviewTabView
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|availableListView
annotation|@
name|FXML
specifier|private
name|ListView
argument_list|<
name|PreviewLayout
argument_list|>
name|availableListView
decl_stmt|;
DECL|field|chosenListView
annotation|@
name|FXML
specifier|private
name|ListView
argument_list|<
name|PreviewLayout
argument_list|>
name|chosenListView
decl_stmt|;
DECL|field|toRightButton
annotation|@
name|FXML
specifier|private
name|Button
name|toRightButton
decl_stmt|;
DECL|field|toLeftButton
annotation|@
name|FXML
specifier|private
name|Button
name|toLeftButton
decl_stmt|;
DECL|field|sortUpButton
annotation|@
name|FXML
specifier|private
name|Button
name|sortUpButton
decl_stmt|;
DECL|field|sortDownButton
annotation|@
name|FXML
specifier|private
name|Button
name|sortDownButton
decl_stmt|;
DECL|field|resetDefaultButton
annotation|@
name|FXML
specifier|private
name|Button
name|resetDefaultButton
decl_stmt|;
DECL|field|previewPane
annotation|@
name|FXML
specifier|private
name|ScrollPane
name|previewPane
decl_stmt|;
DECL|field|editArea
annotation|@
name|FXML
specifier|private
name|CodeArea
name|editArea
decl_stmt|;
DECL|field|taskExecutor
annotation|@
name|Inject
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|field|dialogService
annotation|@
name|Inject
specifier|private
name|DialogService
name|dialogService
decl_stmt|;
DECL|field|preferences
specifier|private
specifier|final
name|JabRefPreferences
name|preferences
decl_stmt|;
DECL|field|viewModel
specifier|private
name|PreviewTabViewModel
name|viewModel
decl_stmt|;
DECL|class|EditAction
specifier|private
class|class
name|EditAction
extends|extends
name|SimpleCommand
block|{
DECL|field|command
specifier|private
specifier|final
name|StandardActions
name|command
decl_stmt|;
DECL|method|EditAction (StandardActions command)
specifier|public
name|EditAction
parameter_list|(
name|StandardActions
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|editArea
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|command
condition|)
block|{
case|case
name|COPY
case|:
name|editArea
operator|.
name|copy
argument_list|()
expr_stmt|;
break|break;
case|case
name|CUT
case|:
name|editArea
operator|.
name|cut
argument_list|()
expr_stmt|;
break|break;
case|case
name|PASTE
case|:
name|editArea
operator|.
name|paste
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT_ALL
case|:
name|editArea
operator|.
name|selectAll
argument_list|()
expr_stmt|;
break|break;
block|}
name|editArea
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|PreviewTabView (JabRefPreferences preferences)
specifier|public
name|PreviewTabView
parameter_list|(
name|JabRefPreferences
name|preferences
parameter_list|)
block|{
name|this
operator|.
name|preferences
operator|=
name|preferences
expr_stmt|;
name|ViewLoader
operator|.
name|view
argument_list|(
name|this
argument_list|)
operator|.
name|root
argument_list|(
name|this
argument_list|)
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|viewModel
operator|=
operator|new
name|PreviewTabViewModel
argument_list|(
name|dialogService
argument_list|,
name|preferences
argument_list|,
name|taskExecutor
argument_list|)
expr_stmt|;
name|availableListView
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|viewModel
operator|.
name|availableListProperty
argument_list|()
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|selectedAvailableItemsProperty
argument_list|()
operator|.
name|bind
argument_list|(
operator|new
name|ReadOnlyListWrapper
argument_list|(
name|availableListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItems
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ViewModelListCellFactory
argument_list|<
name|PreviewLayout
argument_list|>
argument_list|()
operator|.
name|withText
argument_list|(
name|PreviewLayout
operator|::
name|getName
argument_list|)
operator|.
name|install
argument_list|(
name|availableListView
argument_list|)
expr_stmt|;
name|availableListView
operator|.
name|setOnKeyTyped
argument_list|(
name|event
lambda|->
name|jumpToSearchKey
argument_list|(
name|availableListView
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|chosenListView
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|viewModel
operator|.
name|chosenListProperty
argument_list|()
argument_list|)
expr_stmt|;
name|viewModel
operator|.
name|selectedChosenItemsProperty
argument_list|()
operator|.
name|bind
argument_list|(
operator|new
name|ReadOnlyListWrapper
argument_list|(
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItems
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|ViewModelListCellFactory
argument_list|<
name|PreviewLayout
argument_list|>
argument_list|()
operator|.
name|withText
argument_list|(
name|PreviewLayout
operator|::
name|getName
argument_list|)
operator|.
name|install
argument_list|(
name|chosenListView
argument_list|)
expr_stmt|;
name|chosenListView
operator|.
name|setOnKeyTyped
argument_list|(
name|event
lambda|->
name|jumpToSearchKey
argument_list|(
name|chosenListView
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|toRightButton
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|availableListView
operator|.
name|selectionModelProperty
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|BooleanBinding
name|nothingSelectedFromChosen
init|=
name|chosenListView
operator|.
name|selectionModelProperty
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|selectedItemProperty
argument_list|()
operator|.
name|isNull
argument_list|()
decl_stmt|;
name|toLeftButton
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|nothingSelectedFromChosen
argument_list|)
expr_stmt|;
name|sortUpButton
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|nothingSelectedFromChosen
argument_list|)
expr_stmt|;
name|sortDownButton
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|nothingSelectedFromChosen
argument_list|)
expr_stmt|;
name|editArea
operator|.
name|setParagraphGraphicFactory
argument_list|(
name|LineNumberFactory
operator|.
name|get
argument_list|(
name|editArea
argument_list|)
argument_list|)
expr_stmt|;
name|editArea
operator|.
name|textProperty
argument_list|()
operator|.
name|addListener
argument_list|(
parameter_list|(
name|obs
parameter_list|,
name|oldText
parameter_list|,
name|newText
parameter_list|)
lambda|->
block|{
name|editArea
operator|.
name|setStyleSpans
argument_list|(
literal|0
argument_list|,
name|computeHighlighting
argument_list|(
name|newText
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|BindingsHelper
operator|.
name|bindBidirectional
argument_list|(
name|editArea
operator|.
name|textProperty
argument_list|()
argument_list|,
name|viewModel
operator|.
name|selectedChosenItemsProperty
argument_list|()
argument_list|,
name|layoutList
lambda|->
block|{
if|if
condition|(
name|layoutList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|editArea
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|layoutList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TextBasedPreviewLayout
condition|)
block|{
name|String
name|previewText
init|=
operator|(
operator|(
name|TextBasedPreviewLayout
operator|)
name|layoutList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getLayoutText
argument_list|()
operator|.
name|replace
argument_list|(
literal|"__NEWLINE__"
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
name|editArea
operator|.
name|replaceText
argument_list|(
name|previewText
argument_list|)
expr_stmt|;
name|editArea
operator|.
name|setStyleSpans
argument_list|(
literal|0
argument_list|,
name|computeHighlighting
argument_list|(
name|previewText
argument_list|)
argument_list|)
expr_stmt|;
name|editArea
operator|.
name|disableProperty
argument_list|()
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editArea
operator|.
name|replaceText
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"CitationStyleLayout cannot be edited."
argument_list|)
argument_list|)
expr_stmt|;
name|editArea
operator|.
name|disableProperty
argument_list|()
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|text
lambda|->
block|{
if|if
condition|(
operator|!
name|viewModel
operator|.
name|selectedChosenItemsProperty
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PreviewLayout
name|item
init|=
name|viewModel
operator|.
name|selectedChosenItemsProperty
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|TextBasedPreviewLayout
condition|)
block|{
operator|(
operator|(
name|TextBasedPreviewLayout
operator|)
name|item
operator|)
operator|.
name|setLayoutText
argument_list|(
name|editArea
operator|.
name|getText
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"__NEWLINE__"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PreviewViewer
operator|)
name|previewPane
operator|.
name|getContent
argument_list|()
operator|)
operator|.
name|setLayout
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItems
argument_list|()
operator|.
name|addListener
argument_list|(
operator|(
name|ListChangeListener
argument_list|<
name|?
super|super
name|PreviewLayout
argument_list|>
operator|)
name|c
lambda|->
name|previewPane
operator|.
name|setContent
argument_list|(
name|viewModel
operator|.
name|getPreviewViewer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ActionFactory
name|factory
init|=
operator|new
name|ActionFactory
argument_list|(
name|Globals
operator|.
name|getKeyPrefs
argument_list|()
argument_list|)
decl_stmt|;
name|ContextMenu
name|contextMenu
init|=
operator|new
name|ContextMenu
argument_list|()
decl_stmt|;
name|contextMenu
operator|.
name|getItems
argument_list|()
operator|.
name|addAll
argument_list|(
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|CUT
argument_list|,
operator|new
name|PreviewTabView
operator|.
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|CUT
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|COPY
argument_list|,
operator|new
name|PreviewTabView
operator|.
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|COPY
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|PASTE
argument_list|,
operator|new
name|PreviewTabView
operator|.
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|PASTE
argument_list|)
argument_list|)
argument_list|,
name|factory
operator|.
name|createMenuItem
argument_list|(
name|StandardActions
operator|.
name|SELECT_ALL
argument_list|,
operator|new
name|PreviewTabView
operator|.
name|EditAction
argument_list|(
name|StandardActions
operator|.
name|SELECT_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|contextMenu
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"context-menu"
argument_list|)
expr_stmt|;
name|editArea
operator|.
name|setContextMenu
argument_list|(
name|contextMenu
argument_list|)
expr_stmt|;
block|}
comment|/**      * XML-Syntax-Highlighting for RichTextFX-Codearea      * created by (c) Carlos Martins (github: @cemartins)      * License: BSD-2-Clause      * see https://github.com/FXMisc/RichTextFX/blob/master/LICENSE      * and: https://github.com/FXMisc/RichTextFX/blob/master/richtextfx-demos/README.md#xml-editor      *      * @param text to parse and highlight      * @return highlighted span for codeArea      */
DECL|method|computeHighlighting (String text)
specifier|private
name|StyleSpans
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|computeHighlighting
parameter_list|(
name|String
name|text
parameter_list|)
block|{
specifier|final
name|Pattern
name|XML_TAG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<ELEMENT>(</?\\h*)(\\w+)([^<>]*)(\\h*/?>))"
operator|+
literal|"|(?<COMMENT><!--[^<>]+-->)"
argument_list|)
decl_stmt|;
specifier|final
name|Pattern
name|ATTRIBUTES
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\w+\\h*)(=)(\\h*\"[^\"]+\")"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|GROUP_OPEN_BRACKET
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|GROUP_ELEMENT_NAME
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|GROUP_ATTRIBUTES_SECTION
init|=
literal|4
decl_stmt|;
specifier|final
name|int
name|GROUP_CLOSE_BRACKET
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|GROUP_ATTRIBUTE_NAME
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|GROUP_EQUAL_SYMBOL
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|GROUP_ATTRIBUTE_VALUE
init|=
literal|3
decl_stmt|;
name|Matcher
name|matcher
init|=
name|XML_TAG
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|lastKwEnd
init|=
literal|0
decl_stmt|;
name|StyleSpansBuilder
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|spansBuilder
init|=
operator|new
name|StyleSpansBuilder
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
operator|-
name|lastKwEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|"COMMENT"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"comment"
argument_list|)
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
operator|-
name|matcher
operator|.
name|start
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|"ELEMENT"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|attributesText
init|=
name|matcher
operator|.
name|group
argument_list|(
name|GROUP_ATTRIBUTES_SECTION
argument_list|)
decl_stmt|;
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"tagmark"
argument_list|)
argument_list|,
name|matcher
operator|.
name|end
argument_list|(
name|GROUP_OPEN_BRACKET
argument_list|)
operator|-
name|matcher
operator|.
name|start
argument_list|(
name|GROUP_OPEN_BRACKET
argument_list|)
argument_list|)
expr_stmt|;
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"anytag"
argument_list|)
argument_list|,
name|matcher
operator|.
name|end
argument_list|(
name|GROUP_ELEMENT_NAME
argument_list|)
operator|-
name|matcher
operator|.
name|end
argument_list|(
name|GROUP_OPEN_BRACKET
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|attributesText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lastKwEnd
operator|=
literal|0
expr_stmt|;
name|Matcher
name|amatcher
init|=
name|ATTRIBUTES
operator|.
name|matcher
argument_list|(
name|attributesText
argument_list|)
decl_stmt|;
while|while
condition|(
name|amatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|amatcher
operator|.
name|start
argument_list|()
operator|-
name|lastKwEnd
argument_list|)
expr_stmt|;
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"attribute"
argument_list|)
argument_list|,
name|amatcher
operator|.
name|end
argument_list|(
name|GROUP_ATTRIBUTE_NAME
argument_list|)
operator|-
name|amatcher
operator|.
name|start
argument_list|(
name|GROUP_ATTRIBUTE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"tagmark"
argument_list|)
argument_list|,
name|amatcher
operator|.
name|end
argument_list|(
name|GROUP_EQUAL_SYMBOL
argument_list|)
operator|-
name|amatcher
operator|.
name|end
argument_list|(
name|GROUP_ATTRIBUTE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"avalue"
argument_list|)
argument_list|,
name|amatcher
operator|.
name|end
argument_list|(
name|GROUP_ATTRIBUTE_VALUE
argument_list|)
operator|-
name|amatcher
operator|.
name|end
argument_list|(
name|GROUP_EQUAL_SYMBOL
argument_list|)
argument_list|)
expr_stmt|;
name|lastKwEnd
operator|=
name|amatcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|attributesText
operator|.
name|length
argument_list|()
operator|>
name|lastKwEnd
condition|)
block|{
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|attributesText
operator|.
name|length
argument_list|()
operator|-
name|lastKwEnd
argument_list|)
expr_stmt|;
block|}
block|}
name|lastKwEnd
operator|=
name|matcher
operator|.
name|end
argument_list|(
name|GROUP_ATTRIBUTES_SECTION
argument_list|)
expr_stmt|;
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"tagmark"
argument_list|)
argument_list|,
name|matcher
operator|.
name|end
argument_list|(
name|GROUP_CLOSE_BRACKET
argument_list|)
operator|-
name|lastKwEnd
argument_list|)
expr_stmt|;
block|}
block|}
name|lastKwEnd
operator|=
name|matcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|spansBuilder
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|lastKwEnd
argument_list|)
expr_stmt|;
return|return
name|spansBuilder
operator|.
name|create
argument_list|()
return|;
block|}
DECL|method|jumpToSearchKey (ListView<PreviewLayout> list, KeyEvent keypressed)
specifier|public
name|void
name|jumpToSearchKey
parameter_list|(
name|ListView
argument_list|<
name|PreviewLayout
argument_list|>
name|list
parameter_list|,
name|KeyEvent
name|keypressed
parameter_list|)
block|{
if|if
condition|(
name|keypressed
operator|.
name|getCharacter
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|PreviewLayout
name|item
range|:
name|list
operator|.
name|getItems
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|keypressed
operator|.
name|getCharacter
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|scrollTo
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getBuilder ()
specifier|public
name|Node
name|getBuilder
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setValues ()
specifier|public
name|void
name|setValues
parameter_list|()
block|{
comment|// Done by bindings
block|}
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|viewModel
operator|.
name|storeSettings
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateSettings ()
specifier|public
name|boolean
name|validateSettings
parameter_list|()
block|{
return|return
name|viewModel
operator|.
name|validateSettings
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTabName ()
specifier|public
name|String
name|getTabName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Entry preview"
argument_list|)
return|;
block|}
DECL|method|toRightButtonAction ()
specifier|public
name|void
name|toRightButtonAction
parameter_list|()
block|{
name|viewModel
operator|.
name|addToChosen
argument_list|()
expr_stmt|;
block|}
DECL|method|toLeftButtonAction ()
specifier|public
name|void
name|toLeftButtonAction
parameter_list|()
block|{
name|viewModel
operator|.
name|removeFromChosen
argument_list|()
expr_stmt|;
block|}
DECL|method|sortUpButtonAction ()
specifier|public
name|void
name|sortUpButtonAction
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|newIndices
init|=
name|viewModel
operator|.
name|selectedInChosenUp
argument_list|(
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|newIndices
control|)
block|{
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sortDownButtonAction ()
specifier|public
name|void
name|sortDownButtonAction
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|newIndices
init|=
name|viewModel
operator|.
name|selectedInChosenDown
argument_list|(
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedIndices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
range|:
name|newIndices
control|)
block|{
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|select
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resetDefaultButtonAction ()
specifier|public
name|void
name|resetDefaultButtonAction
parameter_list|()
block|{
name|viewModel
operator|.
name|resetDefaultStyle
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|chosenListView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// not yet working
block|}
block|}
block|}
end_class

end_unit

