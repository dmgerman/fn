begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|ListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleListProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ComboBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
operator|.
name|CellEditEvent
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Pane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
operator|.
name|JabRefIcons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|util
operator|.
name|ValueTableCellFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|entry
operator|.
name|field
operator|.
name|FieldFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|model
operator|.
name|strings
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_comment
comment|/**  * Preference Tab for XMP.  *  * Allows the user to enable and configure the XMP privacy filter.  */
end_comment

begin_class
DECL|class|XmpPrefsTab
class|class
name|XmpPrefsTab
extends|extends
name|Pane
implements|implements
name|PrefsTab
block|{
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|GridPane
name|builder
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|ListProperty
argument_list|<
name|XMPPrivacyFilter
argument_list|>
name|fields
init|=
operator|new
name|SimpleListProperty
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|privacyFilterCheckBox
specifier|private
specifier|final
name|CheckBox
name|privacyFilterCheckBox
init|=
operator|new
name|CheckBox
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Do not write the following fields to XMP Metadata:"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|tableView
specifier|private
specifier|final
name|TableView
argument_list|<
name|XMPPrivacyFilter
argument_list|>
name|tableView
init|=
operator|new
name|TableView
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Customization of external program paths.      */
DECL|method|XmpPrefsTab (JabRefPreferences prefs)
specifier|public
name|XmpPrefsTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|tableView
operator|.
name|itemsProperty
argument_list|()
operator|.
name|bindBidirectional
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|TableColumn
argument_list|<
name|XMPPrivacyFilter
argument_list|,
name|String
argument_list|>
name|column
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|column
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|TableColumn
argument_list|<
name|XMPPrivacyFilter
argument_list|,
name|String
argument_list|>
name|deleteIconColumn
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|()
decl_stmt|;
name|deleteIconColumn
operator|.
name|setPrefWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|deleteIconColumn
operator|.
name|setCellValueFactory
argument_list|(
name|cellData
lambda|->
name|cellData
operator|.
name|getValue
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|ValueTableCellFactory
argument_list|<
name|XMPPrivacyFilter
argument_list|,
name|String
argument_list|>
argument_list|()
operator|.
name|withGraphic
argument_list|(
name|item
lambda|->
name|JabRefIcons
operator|.
name|DELETE_ENTRY
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
operator|.
name|withOnMouseClickedEvent
argument_list|(
name|item
lambda|->
name|evt
lambda|->
name|delete
argument_list|()
argument_list|)
operator|.
name|install
argument_list|(
name|deleteIconColumn
argument_list|)
expr_stmt|;
name|column
operator|.
name|setOnEditCommit
argument_list|(
parameter_list|(
name|CellEditEvent
argument_list|<
name|XMPPrivacyFilter
argument_list|,
name|String
argument_list|>
name|cell
parameter_list|)
lambda|->
block|{
name|cell
operator|.
name|getRowValue
argument_list|()
operator|.
name|setField
argument_list|(
name|cell
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|tableView
operator|.
name|getColumns
argument_list|()
operator|.
name|setAll
argument_list|(
name|column
argument_list|,
name|deleteIconColumn
argument_list|)
expr_stmt|;
name|tableView
operator|.
name|setColumnResizePolicy
argument_list|(
name|TableView
operator|.
name|CONSTRAINED_RESIZE_POLICY
argument_list|)
expr_stmt|;
name|ComboBox
argument_list|<
name|String
argument_list|>
name|bibtexFields
init|=
operator|new
name|ComboBox
argument_list|<>
argument_list|(
name|FXCollections
operator|.
name|observableArrayList
argument_list|(
name|FieldFactory
operator|.
name|getCommonFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Field
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|bibtexFields
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BorderPane
name|tablePanel
init|=
operator|new
name|BorderPane
argument_list|()
decl_stmt|;
name|ScrollPane
name|scrollPane
init|=
operator|new
name|ScrollPane
argument_list|()
decl_stmt|;
name|scrollPane
operator|.
name|setMaxHeight
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setMaxWidth
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setContent
argument_list|(
name|tableView
argument_list|)
expr_stmt|;
name|tablePanel
operator|.
name|setCenter
argument_list|(
name|scrollPane
argument_list|)
expr_stmt|;
name|Button
name|add
init|=
operator|new
name|Button
argument_list|(
literal|"Add"
argument_list|)
decl_stmt|;
name|add
operator|.
name|setGraphic
argument_list|(
name|JabRefIcons
operator|.
name|ADD
operator|.
name|getGraphicNode
argument_list|()
argument_list|)
expr_stmt|;
name|add
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
name|StringUtil
operator|.
name|isNullOrEmpty
argument_list|(
name|bibtexFields
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
condition|)
block|{
name|XMPPrivacyFilter
name|tableRow
init|=
operator|new
name|XMPPrivacyFilter
argument_list|(
name|bibtexFields
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HBox
name|toolbar
init|=
operator|new
name|HBox
argument_list|(
name|bibtexFields
argument_list|,
name|add
argument_list|)
decl_stmt|;
name|tablePanel
operator|.
name|setBottom
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
comment|// Build Prefs Tabs
name|Label
name|xmpExportPrivacySettings
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"XMP export privacy settings"
argument_list|)
argument_list|)
decl_stmt|;
name|xmpExportPrivacySettings
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"sectionHeader"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|xmpExportPrivacySettings
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|privacyFilterCheckBox
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|tablePanel
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|tableView
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|privacyFilterCheckBox
operator|.
name|selectedProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
name|add
operator|.
name|disableProperty
argument_list|()
operator|.
name|bind
argument_list|(
name|privacyFilterCheckBox
operator|.
name|selectedProperty
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|delete ()
specifier|private
name|void
name|delete
parameter_list|()
block|{
if|if
condition|(
name|tableView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XMPPrivacyFilter
name|tableRow
init|=
name|tableView
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|getSelectedItem
argument_list|()
decl_stmt|;
name|fields
operator|.
name|remove
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBuilder ()
specifier|public
name|Node
name|getBuilder
parameter_list|()
block|{
return|return
name|builder
return|;
block|}
comment|/**      * Load settings from the preferences and initialize the table.      */
annotation|@
name|Override
DECL|method|setValues ()
specifier|public
name|void
name|setValues
parameter_list|()
block|{
name|List
argument_list|<
name|XMPPrivacyFilter
argument_list|>
name|xmpExclusions
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|XMP_PRIVACY_FILTERS
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|XMPPrivacyFilter
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|fields
operator|.
name|setAll
argument_list|(
name|xmpExclusions
argument_list|)
expr_stmt|;
name|privacyFilterCheckBox
operator|.
name|setSelected
argument_list|(
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_XMP_PRIVACY_FILTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store changes to table preferences. This method is called when the user      * clicks Ok.      *      */
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|StringUtil
operator|.
name|isNullOrEmpty
argument_list|(
name|s
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|fields
operator|::
name|remove
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|XMP_PRIVACY_FILTERS
argument_list|,
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|XMPPrivacyFilter
operator|::
name|getField
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|USE_XMP_PRIVACY_FILTER
argument_list|,
name|privacyFilterCheckBox
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateSettings ()
specifier|public
name|boolean
name|validateSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getTabName ()
specifier|public
name|String
name|getTabName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"XMP-metadata"
argument_list|)
return|;
block|}
DECL|class|XMPPrivacyFilter
specifier|private
class|class
name|XMPPrivacyFilter
block|{
DECL|field|field
specifier|private
specifier|final
name|SimpleStringProperty
name|field
decl_stmt|;
DECL|method|XMPPrivacyFilter (String field)
name|XMPPrivacyFilter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
operator|new
name|SimpleStringProperty
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|setField (String field)
specifier|public
name|void
name|setField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|.
name|set
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|getField ()
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|field ()
specifier|public
name|StringProperty
name|field
parameter_list|()
block|{
return|return
name|field
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|field
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

