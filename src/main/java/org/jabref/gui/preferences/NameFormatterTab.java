begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.preferences
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|preferences
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|FXCollections
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|collections
operator|.
name|ObservableList
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|ScrollPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableColumn
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TableView
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|PropertyValueFactory
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|control
operator|.
name|cell
operator|.
name|TextFieldTableCell
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|BorderPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|GridPane
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|HBox
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|layout
operator|.
name|Pane
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|actions
operator|.
name|StandardActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|help
operator|.
name|HelpAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|help
operator|.
name|HelpFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|l10n
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|layout
operator|.
name|format
operator|.
name|NameFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|preferences
operator|.
name|JabRefPreferences
import|;
end_import

begin_class
DECL|class|NameFormatterTab
specifier|public
class|class
name|NameFormatterTab
extends|extends
name|Pane
implements|implements
name|PrefsTab
block|{
DECL|field|prefs
specifier|private
specifier|final
name|JabRefPreferences
name|prefs
decl_stmt|;
DECL|field|tableChanged
specifier|private
name|boolean
name|tableChanged
decl_stmt|;
DECL|field|table
specifier|private
specifier|final
name|TableView
argument_list|<
name|NameFormatterViewModel
argument_list|>
name|table
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|GridPane
name|builder
init|=
operator|new
name|GridPane
argument_list|()
decl_stmt|;
DECL|field|tableRows
specifier|private
specifier|final
name|List
argument_list|<
name|NameFormatterViewModel
argument_list|>
name|tableRows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|ObservableList
argument_list|<
name|NameFormatterViewModel
argument_list|>
name|data
init|=
name|FXCollections
operator|.
name|observableArrayList
argument_list|()
decl_stmt|;
DECL|class|NameFormatterViewModel
specifier|public
specifier|static
class|class
name|NameFormatterViewModel
block|{
DECL|field|name
specifier|private
specifier|final
name|SimpleStringProperty
name|name
decl_stmt|;
DECL|field|format
specifier|private
specifier|final
name|SimpleStringProperty
name|format
decl_stmt|;
DECL|method|NameFormatterViewModel ()
name|NameFormatterViewModel
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|NameFormatterViewModel (String name)
name|NameFormatterViewModel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|NameFormatter
operator|.
name|DEFAULT_FORMAT
argument_list|)
expr_stmt|;
block|}
DECL|method|NameFormatterViewModel (String name, String format)
name|NameFormatterViewModel
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
operator|new
name|SimpleStringProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|=
operator|new
name|SimpleStringProperty
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|.
name|set
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|getFormat ()
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
name|format
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|setFormat (String format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|.
name|set
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tab to create custom Name Formatters      *      */
DECL|method|NameFormatterTab (JabRefPreferences prefs)
specifier|public
name|NameFormatterTab
parameter_list|(
name|JabRefPreferences
name|prefs
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|ActionFactory
name|factory
init|=
operator|new
name|ActionFactory
argument_list|(
name|prefs
operator|.
name|getKeyBindingRepository
argument_list|()
argument_list|)
decl_stmt|;
name|TableColumn
argument_list|<
name|NameFormatterViewModel
argument_list|,
name|String
argument_list|>
name|firstCol
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Formatter name"
argument_list|)
argument_list|)
decl_stmt|;
name|TableColumn
argument_list|<
name|NameFormatterViewModel
argument_list|,
name|String
argument_list|>
name|lastCol
init|=
operator|new
name|TableColumn
argument_list|<>
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Format string"
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|=
operator|new
name|TableView
argument_list|<>
argument_list|()
expr_stmt|;
name|table
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|firstCol
operator|.
name|setCellValueFactory
argument_list|(
operator|new
name|PropertyValueFactory
argument_list|<>
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|firstCol
operator|.
name|setCellFactory
argument_list|(
name|TextFieldTableCell
operator|.
name|forTableColumn
argument_list|()
argument_list|)
expr_stmt|;
name|firstCol
operator|.
name|setOnEditCommit
argument_list|(
parameter_list|(
name|TableColumn
operator|.
name|CellEditEvent
argument_list|<
name|NameFormatterViewModel
argument_list|,
name|String
argument_list|>
name|t
parameter_list|)
lambda|->
block|{
name|t
operator|.
name|getTableView
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
name|t
operator|.
name|getTablePosition
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|t
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|lastCol
operator|.
name|setCellValueFactory
argument_list|(
operator|new
name|PropertyValueFactory
argument_list|<>
argument_list|(
literal|"format"
argument_list|)
argument_list|)
expr_stmt|;
name|lastCol
operator|.
name|setCellFactory
argument_list|(
name|TextFieldTableCell
operator|.
name|forTableColumn
argument_list|()
argument_list|)
expr_stmt|;
name|lastCol
operator|.
name|setOnEditCommit
argument_list|(
parameter_list|(
name|TableColumn
operator|.
name|CellEditEvent
argument_list|<
name|NameFormatterViewModel
argument_list|,
name|String
argument_list|>
name|t
parameter_list|)
lambda|->
block|{
name|t
operator|.
name|getTableView
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
name|t
operator|.
name|getTablePosition
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
operator|.
name|setFormat
argument_list|(
name|t
operator|.
name|getNewValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|firstCol
operator|.
name|setPrefWidth
argument_list|(
literal|140
argument_list|)
expr_stmt|;
name|lastCol
operator|.
name|setPrefWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|table
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|getColumns
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|firstCol
argument_list|,
name|lastCol
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TextField
name|addName
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
name|addName
operator|.
name|setPromptText
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|addName
operator|.
name|setMaxWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|TextField
name|addLast
init|=
operator|new
name|TextField
argument_list|()
decl_stmt|;
name|addLast
operator|.
name|setMaxWidth
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|addLast
operator|.
name|setPromptText
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|BorderPane
name|tabPanel
init|=
operator|new
name|BorderPane
argument_list|()
decl_stmt|;
name|ScrollPane
name|scrollPane
init|=
operator|new
name|ScrollPane
argument_list|()
decl_stmt|;
name|scrollPane
operator|.
name|setMaxHeight
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setMaxWidth
argument_list|(
literal|360
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setContent
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|setCenter
argument_list|(
name|scrollPane
argument_list|)
expr_stmt|;
name|Label
name|insertRows
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Insert rows"
argument_list|)
argument_list|)
decl_stmt|;
name|insertRows
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Button
name|add
init|=
operator|new
name|Button
argument_list|(
literal|"Insert"
argument_list|)
decl_stmt|;
name|add
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|!
name|addName
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|addLast
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameFormatterViewModel
name|tableRow
init|=
operator|new
name|NameFormatterViewModel
argument_list|(
name|addName
operator|.
name|getText
argument_list|()
argument_list|,
name|addLast
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|addName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addLast
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|.
name|add
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
name|tableRows
operator|.
name|add
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|tableChanged
operator|=
literal|true
expr_stmt|;
name|table
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Label
name|deleteRows
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Delete rows"
argument_list|)
argument_list|)
decl_stmt|;
name|deleteRows
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Button
name|delete
init|=
operator|new
name|Button
argument_list|(
literal|"Delete"
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setOnAction
argument_list|(
name|e
lambda|->
block|{
if|if
condition|(
operator|(
name|table
operator|.
name|getFocusModel
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|table
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|tableChanged
operator|=
literal|true
expr_stmt|;
name|int
name|row
init|=
name|table
operator|.
name|getFocusModel
argument_list|()
operator|.
name|getFocusedIndex
argument_list|()
decl_stmt|;
name|NameFormatterViewModel
name|tableRow
init|=
name|tableRows
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|tableRows
operator|.
name|remove
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
name|data
operator|.
name|remove
argument_list|(
name|tableRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|setItems
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Button
name|help
init|=
name|factory
operator|.
name|createIconButton
argument_list|(
name|StandardActions
operator|.
name|HELP
argument_list|,
operator|new
name|HelpAction
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Help on Name Formatting"
argument_list|)
argument_list|,
name|HelpFile
operator|.
name|CUSTOM_EXPORTS_NAME_FORMATTER
argument_list|)
operator|.
name|getCommand
argument_list|()
argument_list|)
decl_stmt|;
name|HBox
name|toolbar
init|=
operator|new
name|HBox
argument_list|()
decl_stmt|;
name|toolbar
operator|.
name|getChildren
argument_list|()
operator|.
name|addAll
argument_list|(
name|addName
argument_list|,
name|addLast
argument_list|,
name|add
argument_list|,
name|delete
argument_list|,
name|help
argument_list|)
expr_stmt|;
name|tabPanel
operator|.
name|setBottom
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
name|Label
name|specialNameFormatters
init|=
operator|new
name|Label
argument_list|(
name|Localization
operator|.
name|lang
argument_list|(
literal|"Special name formatters"
argument_list|)
argument_list|)
decl_stmt|;
name|specialNameFormatters
operator|.
name|getStyleClass
argument_list|()
operator|.
name|add
argument_list|(
literal|"sectionHeader"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|specialNameFormatters
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|add
argument_list|(
name|tabPanel
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBuilder ()
specifier|public
name|Node
name|getBuilder
parameter_list|()
block|{
return|return
name|builder
return|;
block|}
annotation|@
name|Override
DECL|method|setValues ()
specifier|public
name|void
name|setValues
parameter_list|()
block|{
name|tableRows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|NAME_FORMATER_KEY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|formats
init|=
name|prefs
operator|.
name|getStringList
argument_list|(
name|JabRefPreferences
operator|.
name|NAME_FORMATTER_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|formats
operator|.
name|size
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|NameFormatterViewModel
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|formats
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tableRows
operator|.
name|add
argument_list|(
operator|new
name|NameFormatterViewModel
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Store changes to table preferences. This method is called when the user      * clicks Ok.      *      */
annotation|@
name|Override
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
comment|// Now we need to make sense of the contents the user has made to the
comment|// table setup table.
if|if
condition|(
name|tableChanged
condition|)
block|{
comment|// First we remove all rows with empty names.
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|tableRows
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|tableRows
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tableRows
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// Then we make lists
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|formats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tableRows
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NameFormatterViewModel
name|tr
range|:
name|tableRows
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|tr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|formats
operator|.
name|add
argument_list|(
name|tr
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Finally, we store the new preferences.
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|NAME_FORMATER_KEY
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|putStringList
argument_list|(
name|JabRefPreferences
operator|.
name|NAME_FORMATTER_VALUE
argument_list|,
name|formats
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateSettings ()
specifier|public
name|boolean
name|validateSettings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getTabName ()
specifier|public
name|String
name|getTabName
parameter_list|()
block|{
return|return
name|Localization
operator|.
name|lang
argument_list|(
literal|"Name formatter"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

