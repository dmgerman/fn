begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiletype
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
package|;
end_package

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|BooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleBooleanProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|SimpleStringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|beans
operator|.
name|property
operator|.
name|StringProperty
import|;
end_import

begin_import
import|import
name|javafx
operator|.
name|scene
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|logic
operator|.
name|util
operator|.
name|OS
import|;
end_import

begin_class
DECL|class|EditExternalFileTypeViewModel
specifier|public
class|class
name|EditExternalFileTypeViewModel
block|{
DECL|field|extensionProperty
specifier|private
specifier|final
name|StringProperty
name|extensionProperty
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|nameProperty
specifier|private
specifier|final
name|StringProperty
name|nameProperty
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|mimeTypeProperty
specifier|private
specifier|final
name|StringProperty
name|mimeTypeProperty
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|selectedApplicationProperty
specifier|private
specifier|final
name|StringProperty
name|selectedApplicationProperty
init|=
operator|new
name|SimpleStringProperty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|defaultApplicationSelectedProperty
specifier|private
specifier|final
name|BooleanProperty
name|defaultApplicationSelectedProperty
init|=
operator|new
name|SimpleBooleanProperty
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|icon
specifier|private
specifier|final
name|Node
name|icon
decl_stmt|;
DECL|field|fileType
specifier|private
specifier|final
name|CustomExternalFileType
name|fileType
decl_stmt|;
DECL|method|EditExternalFileTypeViewModel (CustomExternalFileType fileType)
specifier|public
name|EditExternalFileTypeViewModel
parameter_list|(
name|CustomExternalFileType
name|fileType
parameter_list|)
block|{
name|this
operator|.
name|fileType
operator|=
name|fileType
expr_stmt|;
name|extensionProperty
operator|.
name|setValue
argument_list|(
name|fileType
operator|.
name|getExtension
argument_list|()
argument_list|)
expr_stmt|;
name|nameProperty
operator|.
name|setValue
argument_list|(
name|fileType
operator|.
name|getField
argument_list|()
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|mimeTypeProperty
operator|.
name|setValue
argument_list|(
name|fileType
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|selectedApplicationProperty
operator|.
name|setValue
argument_list|(
name|fileType
operator|.
name|getOpenWithApplication
argument_list|()
argument_list|)
expr_stmt|;
name|icon
operator|=
name|fileType
operator|.
name|getIcon
argument_list|()
operator|.
name|getGraphicNode
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileType
operator|.
name|getOpenWithApplication
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultApplicationSelectedProperty
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extensionProperty ()
specifier|public
name|StringProperty
name|extensionProperty
parameter_list|()
block|{
return|return
name|extensionProperty
return|;
block|}
DECL|method|nameProperty ()
specifier|public
name|StringProperty
name|nameProperty
parameter_list|()
block|{
return|return
name|nameProperty
return|;
block|}
DECL|method|mimeTypeProperty ()
specifier|public
name|StringProperty
name|mimeTypeProperty
parameter_list|()
block|{
return|return
name|mimeTypeProperty
return|;
block|}
DECL|method|selectedApplicationProperty ()
specifier|public
name|StringProperty
name|selectedApplicationProperty
parameter_list|()
block|{
return|return
name|selectedApplicationProperty
return|;
block|}
DECL|method|defaultApplicationSelectedProperty ()
specifier|public
name|BooleanProperty
name|defaultApplicationSelectedProperty
parameter_list|()
block|{
return|return
name|defaultApplicationSelectedProperty
return|;
block|}
DECL|method|getIcon ()
specifier|public
name|Node
name|getIcon
parameter_list|()
block|{
return|return
name|icon
return|;
block|}
DECL|method|storeSettings ()
specifier|public
name|void
name|storeSettings
parameter_list|()
block|{
name|fileType
operator|.
name|setName
argument_list|(
name|nameProperty
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|fileType
operator|.
name|setMimeType
argument_list|(
name|mimeTypeProperty
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ext
init|=
name|extensionProperty
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ext
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|ext
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'.'
operator|)
condition|)
block|{
name|fileType
operator|.
name|setExtension
argument_list|(
name|ext
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileType
operator|.
name|setExtension
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
name|String
name|application
init|=
name|selectedApplicationProperty
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|OS
operator|.
name|WINDOWS
condition|)
block|{
comment|// On Windows, store application as empty if the "Default" option is selected,
comment|// or if the application name is empty:
if|if
condition|(
name|defaultApplicationSelectedProperty
operator|.
name|getValue
argument_list|()
operator|||
name|application
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fileType
operator|.
name|setOpenWith
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|selectedApplicationProperty
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fileType
operator|.
name|setOpenWith
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fileType
operator|.
name|setOpenWith
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

