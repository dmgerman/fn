begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref.gui.externalfiletype
package|package
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|externalfiletype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|IconTheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabref
operator|.
name|gui
operator|.
name|icon
operator|.
name|JabRefIcon
import|;
end_import

begin_comment
comment|/**  * This class defines a type of external files that can be linked to from JabRef.  * The class contains enough information to provide an icon, a standard extension  * and a link to which application handles files of this type.  */
end_comment

begin_class
DECL|class|CustomExternalFileType
specifier|public
class|class
name|CustomExternalFileType
implements|implements
name|ExternalFileType
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|extension
specifier|private
name|String
name|extension
decl_stmt|;
DECL|field|openWith
specifier|private
name|String
name|openWith
decl_stmt|;
DECL|field|iconName
specifier|private
name|String
name|iconName
decl_stmt|;
DECL|field|mimeType
specifier|private
name|String
name|mimeType
decl_stmt|;
DECL|field|icon
specifier|private
name|JabRefIcon
name|icon
decl_stmt|;
DECL|method|CustomExternalFileType (String name, String extension, String mimeType, String openWith, String iconName, JabRefIcon icon)
specifier|public
name|CustomExternalFileType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|String
name|openWith
parameter_list|,
name|String
name|iconName
parameter_list|,
name|JabRefIcon
name|icon
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|extension
operator|=
name|extension
expr_stmt|;
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
name|this
operator|.
name|openWith
operator|=
name|openWith
expr_stmt|;
name|setIconName
argument_list|(
name|iconName
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
block|}
DECL|method|CustomExternalFileType (ExternalFileType type)
specifier|public
name|CustomExternalFileType
parameter_list|(
name|ExternalFileType
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|getExtension
argument_list|()
argument_list|,
name|type
operator|.
name|getMimeType
argument_list|()
argument_list|,
name|type
operator|.
name|getOpenWithApplication
argument_list|()
argument_list|,
literal|""
argument_list|,
name|type
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct an ExternalFileType from a String array. This is used when      * reading file type definitions from Preferences, where the available data types are      * limited. We assume that the array contains the same values as the main constructor,      * in the same order.      *      * @param val arguments.      */
DECL|method|buildFromArgs (String[] val)
specifier|public
specifier|static
name|ExternalFileType
name|buildFromArgs
parameter_list|(
name|String
index|[]
name|val
parameter_list|)
block|{
if|if
condition|(
operator|(
name|val
operator|==
literal|null
operator|)
operator|||
operator|(
name|val
operator|.
name|length
operator|<
literal|4
operator|)
operator|||
operator|(
name|val
operator|.
name|length
operator|>
literal|5
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot construct ExternalFileType without four elements in String[] argument."
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|val
index|[
literal|0
index|]
decl_stmt|;
name|String
name|extension
init|=
name|val
index|[
literal|1
index|]
decl_stmt|;
name|String
name|openWith
decl_stmt|;
name|String
name|mimeType
decl_stmt|;
name|String
name|iconName
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|length
operator|==
literal|4
condition|)
block|{
comment|// Up to version 2.4b the mime type is not included:
name|mimeType
operator|=
literal|""
expr_stmt|;
name|openWith
operator|=
name|val
index|[
literal|2
index|]
expr_stmt|;
name|iconName
operator|=
name|val
index|[
literal|3
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// When mime type is included, the array length should be 5:
name|mimeType
operator|=
name|val
index|[
literal|2
index|]
expr_stmt|;
name|openWith
operator|=
name|val
index|[
literal|3
index|]
expr_stmt|;
name|iconName
operator|=
name|val
index|[
literal|4
index|]
expr_stmt|;
block|}
comment|// set icon to default first
name|JabRefIcon
name|icon
init|=
name|IconTheme
operator|.
name|JabRefIcons
operator|.
name|FILE
decl_stmt|;
comment|// check whether there is another icon defined for this file type
for|for
control|(
name|ExternalFileType
name|fileType
range|:
name|ExternalFileTypes
operator|.
name|getDefaultExternalFileTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|fileType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|icon
operator|=
name|fileType
operator|.
name|getIcon
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|new
name|CustomExternalFileType
argument_list|(
name|name
argument_list|,
name|extension
argument_list|,
name|mimeType
argument_list|,
name|openWith
argument_list|,
name|iconName
argument_list|,
name|icon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExtension ()
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
if|if
condition|(
name|extension
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|extension
return|;
block|}
DECL|method|setExtension (String extension)
specifier|public
name|void
name|setExtension
parameter_list|(
name|String
name|extension
parameter_list|)
block|{
name|this
operator|.
name|extension
operator|=
name|extension
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMimeType ()
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|mimeType
return|;
block|}
DECL|method|setMimeType (String mimeType)
specifier|public
name|void
name|setMimeType
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|this
operator|.
name|mimeType
operator|=
name|mimeType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOpenWithApplication ()
specifier|public
name|String
name|getOpenWithApplication
parameter_list|()
block|{
if|if
condition|(
name|openWith
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|openWith
return|;
block|}
DECL|method|setOpenWith (String openWith)
specifier|public
name|void
name|setOpenWith
parameter_list|(
name|String
name|openWith
parameter_list|)
block|{
name|this
operator|.
name|openWith
operator|=
name|openWith
expr_stmt|;
block|}
comment|/**      * Get the string associated with this file type's icon.      *      * @return The icon name.      */
DECL|method|getIconName ()
specifier|public
name|String
name|getIconName
parameter_list|()
block|{
return|return
name|iconName
return|;
block|}
comment|/**      * Set the string associated with this file type's icon.      *      * @param name The icon name to use.      */
DECL|method|setIconName (String name)
specifier|public
name|void
name|setIconName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|iconName
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getIcon ()
specifier|public
name|JabRefIcon
name|getIcon
parameter_list|()
block|{
return|return
name|icon
return|;
block|}
DECL|method|setIcon (JabRefIcon icon)
specifier|public
name|void
name|setIcon
parameter_list|(
name|JabRefIcon
name|icon
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|this
operator|.
name|icon
operator|=
name|icon
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
DECL|method|copy ()
specifier|public
name|ExternalFileType
name|copy
parameter_list|()
block|{
return|return
operator|new
name|CustomExternalFileType
argument_list|(
name|name
argument_list|,
name|extension
argument_list|,
name|mimeType
argument_list|,
name|openWith
argument_list|,
name|iconName
argument_list|,
name|icon
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|extension
argument_list|,
name|mimeType
argument_list|,
name|openWith
argument_list|,
name|iconName
argument_list|)
return|;
block|}
comment|/**      * We define two file type objects as equal if their name, extension, openWith and      * iconName are equal.      *      * @param object The file type to compare with.      * @return true if the file types are equal.      */
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|CustomExternalFileType
condition|)
block|{
name|CustomExternalFileType
name|other
init|=
operator|(
name|CustomExternalFileType
operator|)
name|object
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|other
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|extension
argument_list|,
name|other
operator|.
name|extension
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|mimeType
argument_list|,
name|other
operator|.
name|mimeType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|openWith
argument_list|,
name|other
operator|.
name|openWith
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|iconName
argument_list|,
name|other
operator|.
name|iconName
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

