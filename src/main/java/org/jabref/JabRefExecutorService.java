begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.jabref
package|package
name|org
operator|.
name|jabref
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Responsible for managing of all threads (except Swing threads) in JabRef  */
end_comment

begin_class
DECL|class|JabRefExecutorService
specifier|public
class|class
name|JabRefExecutorService
implements|implements
name|Executor
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JabRefExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|JabRefExecutorService
name|INSTANCE
init|=
operator|new
name|JabRefExecutorService
argument_list|()
decl_stmt|;
DECL|field|remoteThread
specifier|private
name|Thread
name|remoteThread
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|r
lambda|->
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"JabRef CachedThreadPool"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|FallbackExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
argument_list|)
decl_stmt|;
DECL|field|lowPriorityExecutorService
specifier|private
specifier|final
name|ExecutorService
name|lowPriorityExecutorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|r
lambda|->
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"JabRef LowPriorityCachedThreadPool"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|FallbackExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
argument_list|)
decl_stmt|;
DECL|field|timer
specifier|private
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
literal|"timer"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
DECL|method|JabRefExecutorService ()
specifier|private
name|JabRefExecutorService
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|execute (Runnable command)
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Received null as command for execution"
argument_list|)
expr_stmt|;
return|return;
block|}
name|executorService
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
DECL|method|executeAndWait (Runnable command)
specifier|public
name|void
name|executeAndWait
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Received null as command for execution"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
name|command
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem executing command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeInterruptableTask (final Runnable runnable)
specifier|public
name|void
name|executeInterruptableTask
parameter_list|(
specifier|final
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|lowPriorityExecutorService
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
DECL|method|executeInterruptableTask (final Runnable runnable, String taskName)
specifier|public
name|void
name|executeInterruptableTask
parameter_list|(
specifier|final
name|Runnable
name|runnable
parameter_list|,
name|String
name|taskName
parameter_list|)
block|{
name|this
operator|.
name|lowPriorityExecutorService
operator|.
name|execute
argument_list|(
operator|new
name|NamedRunnable
argument_list|(
name|taskName
argument_list|,
name|runnable
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|NamedRunnable
class|class
name|NamedRunnable
implements|implements
name|Runnable
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|Runnable
name|task
decl_stmt|;
DECL|method|NamedRunnable (String name, Runnable runnable)
specifier|public
name|NamedRunnable
parameter_list|(
name|String
name|name
parameter_list|,
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|runnable
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|String
name|orgName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|orgName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|executeInterruptableTaskAndWait (Runnable runnable)
specifier|public
name|void
name|executeInterruptableTaskAndWait
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
if|if
condition|(
name|runnable
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Received null as command for execution"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|lowPriorityExecutorService
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
comment|// Ignored
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem executing command"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|manageRemoteThread (Thread thread)
specifier|public
name|void
name|manageRemoteThread
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|remoteThread
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Remote thread is already attached"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|remoteThread
operator|=
name|thread
expr_stmt|;
name|remoteThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopRemoteThread ()
specifier|public
name|void
name|stopRemoteThread
parameter_list|()
block|{
if|if
condition|(
name|remoteThread
operator|!=
literal|null
condition|)
block|{
name|remoteThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|remoteThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|submit (TimerTask timerTask, long millisecondsDelay)
specifier|public
name|void
name|submit
parameter_list|(
name|TimerTask
name|timerTask
parameter_list|,
name|long
name|millisecondsDelay
parameter_list|)
block|{
name|timer
operator|.
name|schedule
argument_list|(
name|timerTask
argument_list|,
name|millisecondsDelay
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdownEverything ()
specifier|public
name|void
name|shutdownEverything
parameter_list|()
block|{
comment|// those threads will be allowed to finish
name|this
operator|.
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//those threads will be interrupted in their current task
name|this
operator|.
name|lowPriorityExecutorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
comment|// kill the remote thread
name|stopRemoteThread
argument_list|()
expr_stmt|;
comment|// timer doesn't need to be canceled as it is run in daemon mode, which ensures that it is stopped if the application is shut down
block|}
block|}
end_class

end_unit

