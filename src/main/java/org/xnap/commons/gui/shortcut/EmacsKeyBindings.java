begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Copyright (C) 2015  Oliver Kopp  *  *  This file is part of JabRef and is based on XNap Commons.  *  This file may be used under the LGPL 2.1 license if used without JabRef.   *  JabRef is free software: you can redistribute it and/or modify  *  it under the terms of the GNU General Public License as published by  *  the Free Software Foundation, either version 3 of the License, or  *  (at your option) any later version.  *  *  JabRef is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with JabRef.  If not, see<http://www.gnu.org/licenses/>.  *  *  *  XNap Commons - EmacsKeyBindings  *  *  Copyright (C) 2005  Steffen Pingel  *  Copyright (C) 2005  Felix Berger  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public  *  License as published by the Free Software Foundation; either  *  version 2.1 of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *  Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  */
end_comment

begin_package
DECL|package|org.xnap.commons.gui.shortcut
package|package
name|org
operator|.
name|xnap
operator|.
name|commons
operator|.
name|gui
operator|.
name|shortcut
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|InputEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|KeyEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JEditorPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|KeyStroke
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|DefaultEditorKit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|JTextComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Keymap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|TextAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jabref
operator|.
name|JabRefPreferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Generic class which activates Emacs keybindings for java input {@link  * JTextComponent}s.  *   * The inner class actions can also be used independently.  */
end_comment

begin_class
DECL|class|EmacsKeyBindings
specifier|public
class|class
name|EmacsKeyBindings
block|{
DECL|field|killLineAction
specifier|private
specifier|static
specifier|final
name|String
name|killLineAction
init|=
literal|"emacs-kill-line"
decl_stmt|;
DECL|field|killRingSaveAction
specifier|private
specifier|static
specifier|final
name|String
name|killRingSaveAction
init|=
literal|"emacs-kill-ring-save"
decl_stmt|;
DECL|field|killRegionAction
specifier|private
specifier|static
specifier|final
name|String
name|killRegionAction
init|=
literal|"emacs-kill-region"
decl_stmt|;
DECL|field|backwardKillWordAction
specifier|private
specifier|static
specifier|final
name|String
name|backwardKillWordAction
init|=
literal|"emacs-backward-kill-word"
decl_stmt|;
DECL|field|capitalizeWordAction
specifier|private
specifier|static
specifier|final
name|String
name|capitalizeWordAction
init|=
literal|"emacs-capitalize-word"
decl_stmt|;
DECL|field|downcaseWordAction
specifier|private
specifier|static
specifier|final
name|String
name|downcaseWordAction
init|=
literal|"emacs-downcase-word"
decl_stmt|;
DECL|field|killWordAction
specifier|private
specifier|static
specifier|final
name|String
name|killWordAction
init|=
literal|"emacs-kill-word"
decl_stmt|;
DECL|field|setMarkCommandAction
specifier|private
specifier|static
specifier|final
name|String
name|setMarkCommandAction
init|=
literal|"emacs-set-mark-command"
decl_stmt|;
DECL|field|yankAction
specifier|private
specifier|static
specifier|final
name|String
name|yankAction
init|=
literal|"emacs-yank"
decl_stmt|;
DECL|field|yankPopAction
specifier|private
specifier|static
specifier|final
name|String
name|yankPopAction
init|=
literal|"emacs-yank-pop"
decl_stmt|;
DECL|field|upcaseWordAction
specifier|private
specifier|static
specifier|final
name|String
name|upcaseWordAction
init|=
literal|"emacs-upcase-word"
decl_stmt|;
DECL|field|EMACS_KEY_BINDINGS_BASE
specifier|private
specifier|static
specifier|final
name|JTextComponent
operator|.
name|KeyBinding
index|[]
name|EMACS_KEY_BINDINGS_BASE
init|=
block|{
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_E
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|endLineAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_D
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|deleteNextCharAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_N
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|downAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_P
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|upAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_B
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|previousWordAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_LESS
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|beginAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_LESS
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
operator|+
name|InputEvent
operator|.
name|SHIFT_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|endAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_F
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|nextWordAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_B
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|backwardAction
argument_list|)
block|,
comment|// CTRL+V and ALT+V are disabled as CTRL+V is also "paste"
comment|//		new JTextComponent.
comment|//			KeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_V,
comment|//											  InputEvent.CTRL_MASK),
comment|//					   DefaultEditorKit.pageDownAction),
comment|//		new JTextComponent.
comment|//			KeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_V,
comment|//											  InputEvent.ALT_MASK),
comment|//					   DefaultEditorKit.pageUpAction),
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_D
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|killWordAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_BACK_SPACE
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|backwardKillWordAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_SPACE
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|setMarkCommandAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_W
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|killRingSaveAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_W
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|killRegionAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_K
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|killLineAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_Y
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|yankAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_Y
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|yankPopAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_C
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|capitalizeWordAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_L
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|downcaseWordAction
argument_list|)
block|,
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_U
argument_list|,
name|InputEvent
operator|.
name|ALT_MASK
argument_list|)
argument_list|,
name|EmacsKeyBindings
operator|.
name|upcaseWordAction
argument_list|)
block|,     }
decl_stmt|;
DECL|field|EMACS_KEY_BINDING_C_A
specifier|private
specifier|static
specifier|final
name|JTextComponent
operator|.
name|KeyBinding
name|EMACS_KEY_BINDING_C_A
init|=
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_A
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|beginLineAction
argument_list|)
decl_stmt|;
DECL|field|EMACS_KEY_BINDING_C_F
specifier|private
specifier|static
specifier|final
name|JTextComponent
operator|.
name|KeyBinding
name|EMACS_KEY_BINDING_C_F
init|=
operator|new
name|JTextComponent
operator|.
name|KeyBinding
argument_list|(
name|KeyStroke
operator|.
name|getKeyStroke
argument_list|(
name|KeyEvent
operator|.
name|VK_F
argument_list|,
name|InputEvent
operator|.
name|CTRL_MASK
argument_list|)
argument_list|,
name|DefaultEditorKit
operator|.
name|forwardAction
argument_list|)
decl_stmt|;
DECL|field|EMACS_ACTIONS
specifier|private
specifier|static
specifier|final
name|TextAction
index|[]
name|EMACS_ACTIONS
init|=
block|{
operator|new
name|KillWordAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|killWordAction
argument_list|)
block|,
operator|new
name|BackwardKillWordAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|backwardKillWordAction
argument_list|)
block|,
operator|new
name|SetMarkCommandAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|setMarkCommandAction
argument_list|)
block|,
operator|new
name|KillRingSaveAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|killRingSaveAction
argument_list|)
block|,
operator|new
name|KillRegionAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|killRegionAction
argument_list|)
block|,
operator|new
name|KillLineAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|killLineAction
argument_list|)
block|,
operator|new
name|YankAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|yankAction
argument_list|)
block|,
operator|new
name|YankPopAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|yankPopAction
argument_list|)
block|,
operator|new
name|CapitalizeWordAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|capitalizeWordAction
argument_list|)
block|,
operator|new
name|DowncaseWordAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|downcaseWordAction
argument_list|)
block|,
operator|new
name|UpcaseWordAction
argument_list|(
name|EmacsKeyBindings
operator|.
name|upcaseWordAction
argument_list|)
block|}
decl_stmt|;
comment|// components to modify
DECL|field|JTCS
specifier|private
specifier|static
specifier|final
name|JTextComponent
index|[]
name|JTCS
init|=
operator|new
name|JTextComponent
index|[]
block|{
operator|new
name|JTextArea
argument_list|()
block|,
operator|new
name|JTextPane
argument_list|()
block|,
operator|new
name|JTextField
argument_list|()
block|,
operator|new
name|JEditorPane
argument_list|()
block|,     }
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|EmacsKeyBindings
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Loads the emacs keybindings for all common<code>JTextComponent</code>s.      *       * The shared keymap instances of the concrete subclasses of       * {@link JTextComponent} are fed with the keybindings.      *      * The original keybindings are stored in a backup array.      */
DECL|method|load ()
specifier|public
specifier|static
name|void
name|load
parameter_list|()
block|{
name|EmacsKeyBindings
operator|.
name|createBackup
argument_list|()
expr_stmt|;
name|EmacsKeyBindings
operator|.
name|loadEmacsKeyBindings
argument_list|()
expr_stmt|;
block|}
DECL|method|createBackup ()
specifier|private
specifier|static
name|void
name|createBackup
parameter_list|()
block|{
name|Keymap
name|oldBackup
init|=
name|JTextComponent
operator|.
name|getKeymap
argument_list|(
name|EmacsKeyBindings
operator|.
name|JTCS
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldBackup
operator|!=
literal|null
condition|)
block|{
comment|// if there is already a backup, do not create a new backup
return|return;
block|}
for|for
control|(
name|JTextComponent
name|JTC
range|:
name|EmacsKeyBindings
operator|.
name|JTCS
control|)
block|{
name|Keymap
name|orig
init|=
name|JTC
operator|.
name|getKeymap
argument_list|()
decl_stmt|;
name|Keymap
name|backup
init|=
name|JTextComponent
operator|.
name|addKeymap
argument_list|(
name|JTC
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Action
index|[]
name|bound
init|=
name|orig
operator|.
name|getBoundActions
argument_list|()
decl_stmt|;
for|for
control|(
name|Action
name|aBound
range|:
name|bound
control|)
block|{
name|KeyStroke
index|[]
name|strokes
init|=
name|orig
operator|.
name|getKeyStrokesForAction
argument_list|(
name|aBound
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyStroke
name|stroke
range|:
name|strokes
control|)
block|{
name|backup
operator|.
name|addActionForKeyStroke
argument_list|(
name|stroke
argument_list|,
name|aBound
argument_list|)
expr_stmt|;
block|}
block|}
name|backup
operator|.
name|setDefaultAction
argument_list|(
name|orig
operator|.
name|getDefaultAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Restores the original keybindings for the concrete subclasses of      * {@link JTextComponent}.      *      */
DECL|method|unload ()
specifier|public
specifier|static
name|void
name|unload
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|EmacsKeyBindings
operator|.
name|JTCS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Keymap
name|backup
init|=
name|JTextComponent
operator|.
name|getKeymap
argument_list|(
name|EmacsKeyBindings
operator|.
name|JTCS
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|backup
operator|!=
literal|null
condition|)
block|{
name|Keymap
name|current
init|=
name|EmacsKeyBindings
operator|.
name|JTCS
index|[
name|i
index|]
operator|.
name|getKeymap
argument_list|()
decl_stmt|;
name|current
operator|.
name|removeBindings
argument_list|()
expr_stmt|;
name|Action
index|[]
name|bound
init|=
name|backup
operator|.
name|getBoundActions
argument_list|()
decl_stmt|;
for|for
control|(
name|Action
name|aBound
range|:
name|bound
control|)
block|{
name|KeyStroke
index|[]
name|strokes
init|=
name|backup
operator|.
name|getKeyStrokesForAction
argument_list|(
name|bound
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyStroke
name|stroke
range|:
name|strokes
control|)
block|{
name|current
operator|.
name|addActionForKeyStroke
argument_list|(
name|stroke
argument_list|,
name|aBound
argument_list|)
expr_stmt|;
block|}
block|}
name|current
operator|.
name|setDefaultAction
argument_list|(
name|backup
operator|.
name|getDefaultAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Activates Emacs keybindings for all text components extending {@link      * JTextComponent}.      */
DECL|method|loadEmacsKeyBindings ()
specifier|private
specifier|static
name|void
name|loadEmacsKeyBindings
parameter_list|()
block|{
name|EmacsKeyBindings
operator|.
name|logger
operator|.
name|debug
argument_list|(
literal|"Loading emacs keybindings"
argument_list|)
expr_stmt|;
for|for
control|(
name|JTextComponent
name|JTC
range|:
name|EmacsKeyBindings
operator|.
name|JTCS
control|)
block|{
name|Action
index|[]
name|origActions
init|=
name|JTC
operator|.
name|getActions
argument_list|()
decl_stmt|;
name|Action
index|[]
name|actions
init|=
operator|new
name|Action
index|[
name|origActions
operator|.
name|length
operator|+
name|EmacsKeyBindings
operator|.
name|EMACS_ACTIONS
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|origActions
argument_list|,
literal|0
argument_list|,
name|actions
argument_list|,
literal|0
argument_list|,
name|origActions
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|EmacsKeyBindings
operator|.
name|EMACS_ACTIONS
argument_list|,
literal|0
argument_list|,
name|actions
argument_list|,
name|origActions
operator|.
name|length
argument_list|,
name|EmacsKeyBindings
operator|.
name|EMACS_ACTIONS
operator|.
name|length
argument_list|)
expr_stmt|;
name|Keymap
name|k
init|=
name|JTC
operator|.
name|getKeymap
argument_list|()
decl_stmt|;
name|JTextComponent
operator|.
name|KeyBinding
index|[]
name|keybindings
decl_stmt|;
name|boolean
name|rebindCA
init|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CA
argument_list|)
decl_stmt|;
name|boolean
name|rebindCF
init|=
name|JabRefPreferences
operator|.
name|getInstance
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|JabRefPreferences
operator|.
name|EDITOR_EMACS_KEYBINDINGS_REBIND_CF
argument_list|)
decl_stmt|;
if|if
condition|(
name|rebindCA
operator|||
name|rebindCF
condition|)
block|{
comment|// if we additionally rebind C-a or C-f, we have to add the shortcuts to EmacsKeyBindings.EMACS_KEY_BINDINGS_BASE
comment|// determine size of new array and position of the new key bindings in the array
name|int
name|size
init|=
name|EmacsKeyBindings
operator|.
name|EMACS_KEY_BINDINGS_BASE
operator|.
name|length
decl_stmt|;
name|int
name|CAPos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|CFPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|rebindCA
condition|)
block|{
name|CAPos
operator|=
name|size
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|rebindCF
condition|)
block|{
name|CFPos
operator|=
name|size
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
comment|// generate new array
name|keybindings
operator|=
operator|new
name|JTextComponent
operator|.
name|KeyBinding
index|[
name|size
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|EmacsKeyBindings
operator|.
name|EMACS_KEY_BINDINGS_BASE
argument_list|,
literal|0
argument_list|,
name|keybindings
argument_list|,
literal|0
argument_list|,
name|EmacsKeyBindings
operator|.
name|EMACS_KEY_BINDINGS_BASE
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|rebindCA
condition|)
block|{
name|keybindings
index|[
name|CAPos
index|]
operator|=
name|EmacsKeyBindings
operator|.
name|EMACS_KEY_BINDING_C_A
expr_stmt|;
block|}
if|if
condition|(
name|rebindCF
condition|)
block|{
name|keybindings
index|[
name|CFPos
index|]
operator|=
name|EmacsKeyBindings
operator|.
name|EMACS_KEY_BINDING_C_F
expr_stmt|;
block|}
block|}
else|else
block|{
name|keybindings
operator|=
name|EmacsKeyBindings
operator|.
name|EMACS_KEY_BINDINGS_BASE
expr_stmt|;
block|}
name|JTextComponent
operator|.
name|loadKeymap
argument_list|(
name|k
argument_list|,
name|keybindings
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This action kills the next word.      *       * It removes the next word on the right side of the cursor from the active      * text component and adds it to the clipboard.       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|KillWordAction
specifier|public
specifier|static
class|class
name|KillWordAction
extends|extends
name|TextAction
block|{
DECL|method|KillWordAction (String nm)
specifier|public
name|KillWordAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|offs
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|offs
argument_list|)
expr_stmt|;
name|offs
operator|=
name|EmacsKeyBindings
operator|.
name|getWordEnd
argument_list|(
name|jtc
argument_list|,
name|offs
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|offs
argument_list|)
expr_stmt|;
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|jtc
operator|.
name|getSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|cut
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This action kills the previous word.      *       * It removes the previous word on the left side of the cursor from the       * active text component and adds it to the clipboard.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|BackwardKillWordAction
specifier|public
specifier|static
class|class
name|BackwardKillWordAction
extends|extends
name|TextAction
block|{
DECL|method|BackwardKillWordAction (String nm)
specifier|public
name|BackwardKillWordAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|offs
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|offs
argument_list|)
expr_stmt|;
name|offs
operator|=
name|Utilities
operator|.
name|getPreviousWord
argument_list|(
name|jtc
argument_list|,
name|offs
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|offs
argument_list|)
expr_stmt|;
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|jtc
operator|.
name|getSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|cut
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This action copies the marked region and stores it in the killring.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|KillRingSaveAction
specifier|public
specifier|static
class|class
name|KillRingSaveAction
extends|extends
name|TextAction
block|{
DECL|method|KillRingSaveAction (String nm)
specifier|public
name|KillRingSaveAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|EmacsKeyBindings
operator|.
name|doCopyOrCut
argument_list|(
name|jtc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This action Kills the marked region and stores it in the killring.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|KillRegionAction
specifier|public
specifier|static
class|class
name|KillRegionAction
extends|extends
name|TextAction
block|{
DECL|method|KillRegionAction (String nm)
specifier|public
name|KillRegionAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|EmacsKeyBindings
operator|.
name|doCopyOrCut
argument_list|(
name|jtc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doCopyOrCut (JTextComponent jtc, boolean copy)
specifier|private
specifier|static
name|void
name|doCopyOrCut
parameter_list|(
name|JTextComponent
name|jtc
parameter_list|,
name|boolean
name|copy
parameter_list|)
block|{
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
name|int
name|caretPosition
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|jtc
operator|.
name|getSelectedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
comment|// user has manually marked a text without using CTRL+W
comment|// we obey that selection and copy it.
block|}
elseif|else
if|if
condition|(
name|SetMarkCommandAction
operator|.
name|isMarked
argument_list|(
name|jtc
argument_list|)
condition|)
block|{
name|int
name|beginPos
init|=
name|caretPosition
decl_stmt|;
name|int
name|endPos
init|=
name|SetMarkCommandAction
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|beginPos
operator|>
name|endPos
condition|)
block|{
name|int
name|tmp
init|=
name|endPos
decl_stmt|;
name|endPos
operator|=
name|beginPos
expr_stmt|;
name|beginPos
operator|=
name|tmp
expr_stmt|;
block|}
name|jtc
operator|.
name|select
argument_list|(
name|beginPos
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
name|SetMarkCommandAction
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|text
operator|=
name|jtc
operator|.
name|getSelectedText
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|copy
condition|)
block|{
name|jtc
operator|.
name|copy
argument_list|()
expr_stmt|;
comment|// clear the selection
name|jtc
operator|.
name|select
argument_list|(
name|caretPosition
argument_list|,
name|caretPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|newCaretPos
init|=
name|jtc
operator|.
name|getSelectionStart
argument_list|()
decl_stmt|;
name|jtc
operator|.
name|cut
argument_list|()
expr_stmt|;
comment|// put the cursor to the beginning of the text to cut
name|jtc
operator|.
name|setCaretPosition
argument_list|(
name|newCaretPos
argument_list|)
expr_stmt|;
block|}
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This actin kills text up to the end of the current line and stores it in       * the killring.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|KillLineAction
specifier|public
specifier|static
class|class
name|KillLineAction
extends|extends
name|TextAction
block|{
DECL|method|KillLineAction (String nm)
specifier|public
name|KillLineAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|start
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|Utilities
operator|.
name|getRowEnd
argument_list|(
name|jtc
argument_list|,
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|start
operator|==
name|end
operator|)
operator|&&
name|jtc
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
name|jtc
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|remove
argument_list|(
name|end
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|jtc
operator|.
name|getSelectedText
argument_list|()
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|cut
argument_list|()
expr_stmt|;
comment|// jtc.replaceSelection("");
block|}
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This action sets a beginning mark for a selection.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|SetMarkCommandAction
specifier|public
specifier|static
class|class
name|SetMarkCommandAction
extends|extends
name|TextAction
block|{
DECL|field|position
specifier|private
specifier|static
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jtc
specifier|private
specifier|static
name|JTextComponent
name|jtc
decl_stmt|;
DECL|method|SetMarkCommandAction (String nm)
specifier|public
name|SetMarkCommandAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent e)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|e
parameter_list|)
block|{
name|SetMarkCommandAction
operator|.
name|jtc
operator|=
name|getTextComponent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|SetMarkCommandAction
operator|.
name|jtc
operator|!=
literal|null
condition|)
block|{
name|SetMarkCommandAction
operator|.
name|position
operator|=
name|SetMarkCommandAction
operator|.
name|jtc
operator|.
name|getCaretPosition
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isMarked (JTextComponent jt)
specifier|public
specifier|static
name|boolean
name|isMarked
parameter_list|(
name|JTextComponent
name|jt
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SetMarkCommandAction
operator|.
name|jtc
operator|==
name|jt
operator|)
operator|&&
operator|(
name|SetMarkCommandAction
operator|.
name|position
operator|!=
operator|-
literal|1
operator|)
operator|)
return|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|SetMarkCommandAction
operator|.
name|jtc
operator|=
literal|null
expr_stmt|;
name|SetMarkCommandAction
operator|.
name|position
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|getCaretPosition ()
specifier|public
specifier|static
name|int
name|getCaretPosition
parameter_list|()
block|{
return|return
name|SetMarkCommandAction
operator|.
name|position
return|;
block|}
block|}
comment|/**      * This action pastes text from the killring.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|YankAction
specifier|public
specifier|static
class|class
name|YankAction
extends|extends
name|TextAction
block|{
DECL|field|start
specifier|public
specifier|static
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|end
specifier|public
specifier|static
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|YankAction (String nm)
specifier|public
name|YankAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|YankAction
operator|.
name|start
operator|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
expr_stmt|;
name|jtc
operator|.
name|paste
argument_list|()
expr_stmt|;
name|YankAction
operator|.
name|end
operator|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
expr_stmt|;
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|add
argument_list|(
name|jtc
operator|.
name|getText
argument_list|(
name|YankAction
operator|.
name|start
argument_list|,
name|YankAction
operator|.
name|end
argument_list|)
argument_list|)
expr_stmt|;
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurrentTextComponent
argument_list|(
name|jtc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
block|}
comment|/**      * This action pastes an element from the killring cycling through it.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|YankPopAction
specifier|public
specifier|static
class|class
name|YankPopAction
extends|extends
name|TextAction
block|{
DECL|method|YankPopAction (String nm)
specifier|public
name|YankPopAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|boolean
name|jtcNotNull
init|=
operator|(
name|jtc
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|jtcIsCurrentTextComponent
init|=
operator|(
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurrentTextComponent
argument_list|()
operator|==
name|jtc
operator|)
decl_stmt|;
name|boolean
name|caretPositionIsEndOfLastYank
init|=
operator|(
name|jtc
operator|.
name|getCaretPosition
argument_list|()
operator|==
name|YankAction
operator|.
name|end
operator|)
decl_stmt|;
name|boolean
name|killRingNotEmpty
init|=
operator|(
operator|!
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|jtcNotNull
operator|&&
name|jtcIsCurrentTextComponent
operator|&&
name|caretPositionIsEndOfLastYank
operator|&&
name|killRingNotEmpty
condition|)
block|{
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|YankAction
operator|.
name|start
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|YankAction
operator|.
name|end
argument_list|)
expr_stmt|;
name|String
name|toYank
init|=
name|KillRing
operator|.
name|getInstance
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|toYank
operator|!=
literal|null
condition|)
block|{
name|jtc
operator|.
name|replaceSelection
argument_list|(
name|toYank
argument_list|)
expr_stmt|;
name|YankAction
operator|.
name|end
operator|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Manages all killed (cut) text pieces in a ring which is accessible      * through {@link YankPopAction}.      *<p>      * Also provides an unmodifiable copy of all cut pieces.       */
DECL|class|KillRing
specifier|public
specifier|static
class|class
name|KillRing
block|{
DECL|field|jtc
specifier|private
name|JTextComponent
name|jtc
decl_stmt|;
DECL|field|ring
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|String
argument_list|>
name|ring
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|iter
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|ring
operator|.
name|iterator
argument_list|()
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
specifier|final
name|KillRing
name|instance
init|=
operator|new
name|KillRing
argument_list|()
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|KillRing
name|getInstance
parameter_list|()
block|{
return|return
name|KillRing
operator|.
name|instance
return|;
block|}
DECL|method|setCurrentTextComponent (JTextComponent jtc)
name|void
name|setCurrentTextComponent
parameter_list|(
name|JTextComponent
name|jtc
parameter_list|)
block|{
name|this
operator|.
name|jtc
operator|=
name|jtc
expr_stmt|;
block|}
DECL|method|getCurrentTextComponent ()
name|JTextComponent
name|getCurrentTextComponent
parameter_list|()
block|{
return|return
name|jtc
return|;
block|}
comment|/**          * Adds text to the front of the kill ring.          *<p>          * Deviating from the Emacs implementation we make sure the           * exact same text is not somewhere else in the ring.          */
DECL|method|add (String text)
name|void
name|add
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ring
operator|.
name|remove
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|ring
operator|.
name|addFirst
argument_list|(
name|text
argument_list|)
expr_stmt|;
while|while
condition|(
name|ring
operator|.
name|size
argument_list|()
operator|>
literal|60
condition|)
block|{
name|ring
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
name|iter
operator|=
name|ring
operator|.
name|iterator
argument_list|()
expr_stmt|;
comment|// skip first entry, the one we just added
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|/**          * Returns an unmodifiable version of the ring list which contains          * the killed texts.          * @return the content of the kill ring          */
DECL|method|getRing ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRing
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|ring
argument_list|)
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|ring
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**          * Returns the next text element which is to be yank-popped.          * @return<code>null</code> if the ring is empty          */
DECL|method|next ()
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|ring
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
name|iter
operator|=
name|ring
operator|.
name|iterator
argument_list|()
expr_stmt|;
comment|// guaranteed to not throw an exception, since ring is not empty
return|return
name|iter
operator|.
name|next
argument_list|()
return|;
block|}
block|}
block|}
comment|/**      * This action capitalizes the next word on the right side of the caret.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|CapitalizeWordAction
specifier|public
specifier|static
class|class
name|CapitalizeWordAction
extends|extends
name|TextAction
block|{
DECL|method|CapitalizeWordAction (String nm)
specifier|public
name|CapitalizeWordAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
comment|/**          * At first the same code as in {@link          * EmacsKeyBindings.DowncaseWordAction} is performed, to ensure the          * word is in lower case, then the first letter is capialized.          */
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|/* downcase code */
name|int
name|start
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|EmacsKeyBindings
operator|.
name|getWordEnd
argument_list|(
name|jtc
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|String
name|word
init|=
name|jtc
operator|.
name|getText
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|jtc
operator|.
name|replaceSelection
argument_list|(
name|word
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
comment|/* actual capitalize code */
name|int
name|offs
init|=
name|Utilities
operator|.
name|getWordStart
argument_list|(
name|jtc
argument_list|,
name|start
argument_list|)
decl_stmt|;
comment|// get first letter
name|String
name|c
init|=
name|jtc
operator|.
name|getText
argument_list|(
name|offs
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// we're at the end of the previous word
if|if
condition|(
name|c
operator|.
name|equals
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
comment|/* ugly java workaround to get the beginning of the                            word.  */
name|offs
operator|=
name|Utilities
operator|.
name|getWordStart
argument_list|(
name|jtc
argument_list|,
operator|++
name|offs
argument_list|)
expr_stmt|;
name|c
operator|=
name|jtc
operator|.
name|getText
argument_list|(
name|offs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|offs
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|offs
operator|+
literal|1
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|replaceSelection
argument_list|(
name|c
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|end
operator|=
name|Utilities
operator|.
name|getWordEnd
argument_list|(
name|jtc
argument_list|,
name|offs
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setCaretPosition
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This action renders all characters of the next word to lowercase.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|DowncaseWordAction
specifier|public
specifier|static
class|class
name|DowncaseWordAction
extends|extends
name|TextAction
block|{
DECL|method|DowncaseWordAction (String nm)
specifier|public
name|DowncaseWordAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|start
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|EmacsKeyBindings
operator|.
name|getWordEnd
argument_list|(
name|jtc
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|String
name|word
init|=
name|jtc
operator|.
name|getText
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|jtc
operator|.
name|replaceSelection
argument_list|(
name|word
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setCaretPosition
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * This action renders all characters of the next word to upppercase.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|UpcaseWordAction
specifier|public
specifier|static
class|class
name|UpcaseWordAction
extends|extends
name|TextAction
block|{
DECL|method|UpcaseWordAction (String nm)
specifier|public
name|UpcaseWordAction
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|super
argument_list|(
name|nm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|actionPerformed (ActionEvent event)
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|event
parameter_list|)
block|{
name|JTextComponent
name|jtc
init|=
name|getTextComponent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|jtc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|start
init|=
name|jtc
operator|.
name|getCaretPosition
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|EmacsKeyBindings
operator|.
name|getWordEnd
argument_list|(
name|jtc
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|jtc
operator|.
name|setSelectionStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setSelectionEnd
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|String
name|word
init|=
name|jtc
operator|.
name|getText
argument_list|(
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
decl_stmt|;
name|jtc
operator|.
name|replaceSelection
argument_list|(
name|word
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|jtc
operator|.
name|setCaretPosition
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|jtc
operator|.
name|getToolkit
argument_list|()
operator|.
name|beep
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getWordEnd (JTextComponent jtc, int start)
specifier|private
specifier|static
name|int
name|getWordEnd
parameter_list|(
name|JTextComponent
name|jtc
parameter_list|,
name|int
name|start
parameter_list|)
throws|throws
name|BadLocationException
block|{
try|try
block|{
return|return
name|Utilities
operator|.
name|getNextWord
argument_list|(
name|jtc
argument_list|,
name|start
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|ble
parameter_list|)
block|{
name|int
name|end
init|=
name|jtc
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|end
condition|)
block|{
return|return
name|end
return|;
block|}
else|else
block|{
throw|throw
name|ble
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

