begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|spl
package|package
name|spl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sciplore
operator|.
name|beans
operator|.
name|Abstract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sciplore
operator|.
name|beans
operator|.
name|Author
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sciplore
operator|.
name|beans
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sciplore
operator|.
name|formatter
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sciplore
operator|.
name|formatter
operator|.
name|SimpleTypeElementBean
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: Christoph Arbeit  * Date: 10.09.2010  * Time: 20:02:51  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
DECL|class|DocumentWrapper
class|class
name|DocumentWrapper
block|{
DECL|field|xmlDocument
specifier|private
name|Document
name|xmlDocument
decl_stmt|;
DECL|method|DocumentWrapper (Document xmlDocument)
specifier|public
name|DocumentWrapper
parameter_list|(
name|Document
name|xmlDocument
parameter_list|)
block|{
name|this
operator|.
name|xmlDocument
operator|=
name|xmlDocument
expr_stmt|;
block|}
DECL|method|getXmlDocument ()
specifier|public
name|Document
name|getXmlDocument
parameter_list|()
block|{
return|return
name|xmlDocument
return|;
block|}
DECL|method|setXmlDocument (Document xmlDocument)
specifier|public
name|void
name|setXmlDocument
parameter_list|(
name|Document
name|xmlDocument
parameter_list|)
block|{
name|this
operator|.
name|xmlDocument
operator|=
name|xmlDocument
expr_stmt|;
block|}
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|hasTitle
argument_list|()
condition|)
block|{
return|return
name|xmlDocument
operator|.
name|getTitle
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|hasTitle ()
specifier|private
name|boolean
name|hasTitle
parameter_list|()
block|{
return|return
name|xmlDocument
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
name|xmlDocument
operator|.
name|getTitle
argument_list|()
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|xmlDocument
operator|.
name|getTitle
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getAbstract ()
specifier|public
name|String
name|getAbstract
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|hasAbstract
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Abstract
operator|)
name|xmlDocument
operator|.
name|getAbstract
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|hasAbstract ()
specifier|private
name|boolean
name|hasAbstract
parameter_list|()
block|{
return|return
name|xmlDocument
operator|.
name|getAbstract
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Abstract
operator|)
name|xmlDocument
operator|.
name|getAbstract
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|Abstract
operator|)
name|xmlDocument
operator|.
name|getAbstract
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getAuthors (String seperator)
specifier|public
name|String
name|getAuthors
parameter_list|(
name|String
name|seperator
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|hasAuthors
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bean
argument_list|>
name|authors
init|=
name|xmlDocument
operator|.
name|getAuthors
argument_list|()
operator|.
name|getCollection
argument_list|()
decl_stmt|;
name|authors
operator|=
name|DocumentsWrapper
operator|.
name|sortAuthors
argument_list|(
name|authors
argument_list|)
expr_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Bean
name|author
range|:
name|authors
control|)
block|{
if|if
condition|(
name|i
operator|<
name|authors
operator|.
name|size
argument_list|()
condition|)
block|{
name|value
operator|=
name|value
operator|+
name|getNameComplete
argument_list|(
operator|(
name|Author
operator|)
name|author
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|+
literal|' '
operator|+
name|seperator
operator|+
literal|' '
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|value
operator|+
name|getNameComplete
argument_list|(
operator|(
name|Author
operator|)
name|author
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|hasAuthors ()
specifier|private
name|boolean
name|hasAuthors
parameter_list|()
block|{
return|return
name|xmlDocument
operator|.
name|getAuthors
argument_list|()
operator|!=
literal|null
operator|&&
name|xmlDocument
operator|.
name|getAuthors
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|xmlDocument
operator|.
name|getAuthors
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/* public String getKeyWords(){         if(this.hasKeyWords()){             List<XmlKeyword> keywords = xmlDocument.getKeywords().getKeywords();             String value = "";             int i = 1;             for(XmlKeyword keyword : keywords){                 if(i< keywords.size()){                     value = value + keyword.getValue();                     value = value + ", ";                 }                 else{                     value = value + keyword.getValue();                 }                 i++;             }             return value;         }         else{             return "";         }     }      public boolean hasKeyWords(){         return (xmlDocument.getKeywords() != null&& xmlDocument.getKeywords().getKeywords() != null&& !xmlDocument.getKeywords().getKeywords().isEmpty());     }     */
DECL|method|getDoi ()
specifier|public
name|String
name|getDoi
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|hasDoi
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getDoi
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|hasDoi ()
specifier|private
name|boolean
name|hasDoi
parameter_list|()
block|{
return|return
name|xmlDocument
operator|.
name|getDoi
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getDoi
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getDoi
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/*         public String getPages(){             if(this.hasPages()){                 return xmlDocument.getPages().getValue();             }             else{                 return "";             }         }          public boolean hasPages(){             return (xmlDocument.getPages() != null&& xmlDocument.getPages().getValue() != null&& !xmlDocument.getPages().getValue().isEmpty());         }          public String getVolume(){             if(this.hasVolume()){                 return xmlDocument.getVolume().getValue();             }             else{                 return "";             }         }          public boolean hasVolume(){             return (xmlDocument.getVolume() != null&& xmlDocument.getVolume().getValue() != null&& !xmlDocument.getVolume().getValue().isEmpty());         }          public String getNumber(){             if(this.hasNumber()){                 return xmlDocument.getNumber().getValue();             }             else{                 return "";             }         }          public boolean hasNumber(){             return (xmlDocument.getNumber() != null&& xmlDocument.getNumber().getValue() != null&& !xmlDocument.getNumber().getValue().isEmpty());         }     */
DECL|method|getYear ()
specifier|public
name|String
name|getYear
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|hasYear
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getYear
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
DECL|method|hasYear ()
specifier|private
name|boolean
name|hasYear
parameter_list|()
block|{
return|return
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getYear
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getYear
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|getSimpleTypeValue
argument_list|(
name|xmlDocument
operator|.
name|getYear
argument_list|()
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
return|;
block|}
comment|/*          public String getMonth(){             if(this.hasMonth()){                 return xmlDocument.getPublishdate().getMonth();             }             else{                 return "";             }         }          public boolean hasMonth(){             return (xmlDocument.getPublishdate() != null&& xmlDocument.getPublishdate().getMonth() != null&& !xmlDocument.getPublishdate().getMonth().isEmpty());         }          public String getDay(){             if(this.hasDay()){                 return xmlDocument.getPublishdate().getDay();             }             else{                 return "";             }         }          public boolean hasDay(){             return (xmlDocument.getPublishdate() != null&& xmlDocument.getPublishdate().getDay() != null&& !xmlDocument.getPublishdate().getDay().isEmpty());         }              	/*         public String getVenue() {             if(this.hasVenue()){                 return xmlDocument.getVenue().getValue();             }             else{                 return "";             }         }          public boolean hasVenue(){             return (xmlDocument.getVenue() != null&& xmlDocument.getVenue().getValue() != null&& !xmlDocument.getVenue().getValue().isEmpty());         }*/
DECL|method|getNameComplete (Author author)
specifier|private
name|String
name|getNameComplete
parameter_list|(
name|Author
name|author
parameter_list|)
block|{
if|if
condition|(
name|author
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|result
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_First
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|+
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_First
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|' '
expr_stmt|;
block|}
if|if
condition|(
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Middle
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|+
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Middle
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|' '
expr_stmt|;
block|}
if|if
condition|(
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Last_Prefix
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|+
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Last_Prefix
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|' '
expr_stmt|;
block|}
if|if
condition|(
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Last
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|+
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Last
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|' '
expr_stmt|;
block|}
if|if
condition|(
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Last_Suffix
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|result
operator|+
name|getSimpleTypeValue
argument_list|(
name|author
operator|.
name|getName_Last_Suffix
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|+
literal|' '
expr_stmt|;
block|}
return|return
name|result
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|getSimpleTypeValue (Bean bean)
specifier|private
name|String
name|getSimpleTypeValue
parameter_list|(
name|Bean
name|bean
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|bean
operator|instanceof
name|SimpleTypeElementBean
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SimpleTypeElementBean
name|simpleTypeElementBean
init|=
operator|(
name|SimpleTypeElementBean
operator|)
name|bean
decl_stmt|;
if|if
condition|(
name|simpleTypeElementBean
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|simpleTypeElementBean
operator|.
name|getValue
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"null"
argument_list|)
operator|||
name|simpleTypeElementBean
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|simpleTypeElementBean
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

