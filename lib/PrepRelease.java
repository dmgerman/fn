begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This little program traverses the file structure from the current  * directory, and removes all CVS directories and all files starting  * with ".#" or ending with "~", e.g. backup files. This is to make the  * source tree ready for release.  */
end_comment

begin_class
DECL|class|PrepRelease
specifier|public
class|class
name|PrepRelease
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|File
name|start
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|start
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|traverse
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
DECL|method|traverse (File f)
specifier|private
specifier|static
name|void
name|traverse
parameter_list|(
name|File
name|f
parameter_list|)
block|{
comment|//System.out.println(f.getPath());
name|File
index|[]
name|fs
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CVS"
argument_list|)
condition|)
block|{
name|delete
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fs
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting dir: "
operator|+
name|fs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|traverse
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"~"
argument_list|)
operator|||
name|fs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|".#"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting: "
operator|+
name|fs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|fs
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|delete (File f)
specifier|private
specifier|static
name|void
name|delete
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|File
index|[]
name|fs
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting: "
operator|+
name|fs
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
index|[
name|i
index|]
operator|.
name|isDirectory
argument_list|()
condition|)
name|delete
argument_list|(
name|fs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|fs
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

