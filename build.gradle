// must appear before any plugins blocks - see http://gradle.org/docs/2.4/userguide/plugins.html#sec:plugins_block
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

plugins {
    //The format plugin is currently not used
    //id "com.github.youribonnaffe.gradle.format" version "1.2"

    id "eu.appsatori.fatjar" version "0.3"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "application"
apply plugin: "project-report"
apply plugin: "sonar-runner"
apply plugin: "maven"

/* disabled, because currently unused
format {
    configurationFile = file('formatter_settings.xml')
    // default: reformat main and test
    //files = sourceSets.main.java
}
*/

fatJar {
    classifier 'fat'
    manifest {
        attributes 'Main-Class': "net.sf.jabref.JabRefMain"
    }
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
    }
}

group = "net.sf.jabref"
version = "2.11dev"

repositories {
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/main/gen"]
        }
    }
}

configurations {
    antlr3
    antlr4
}

dependencies {

    // jgoodies
    compile 'com.jgoodies:jgoodies-common:1.7.0'
    compile 'com.jgoodies:jgoodies-forms:1.7.2'
    compile 'com.jgoodies:jgoodies-looks:2.5.3'
    
    compile 'org.swinglabs.swingx:swingx-core:1.6.5-1'

    compile 'org.apache.pdfbox:pdfbox:1.8.10'
    compile 'org.apache.pdfbox:fontbox:1.8.10'
    compile 'org.apache.pdfbox:jempbox:1.8.10'

    compile 'commons-cli:commons-cli:1.3.1'

    compile 'org.openoffice:juh:3.2.1'
    compile 'org.openoffice:jurt:3.2.1'
    compile 'org.openoffice:ridl:3.2.1'
    compile 'org.openoffice:unoil:3.2.1'

    antlr3 'org.antlr:antlr:3.5.2'
    compile 'org.antlr:antlr-runtime:3.5.2'

    antlr4 'org.antlr:antlr4:4.5.1'
    compile 'org.antlr:antlr4-runtime:4.5.1'

    compile 'mysql:mysql-connector-java:5.1.36'
    compile 'org.postgresql:postgresql:9.4-1201-jdbc41'

    compile 'net.java.dev.glazedlists:glazedlists_java15:1.9.1'
    compile fileTree(dir: 'lib', includes: ['microba.jar', 'spin.jar'])

    compile 'net.java.dev.jna:jna:4.1.0'

    compile 'com.google.guava:guava:18.0'

    compile 'commons-logging:commons-logging:1.2'

    compile 'junit:junit:4.12'
}

sourceCompatibility = 1.8
mainClassName = "net.sf.jabref.JabRefMain"

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

compileJava {
    // files are all encoded using UTF-8
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:none"
}
compileJava.dependsOn "generateSource"

compileTestJava {
    // files are all encoded using UTF-8
    options.encoding = 'UTF-8'
}

javadoc {
    options {
        // files are all encoded using UTF-8
        encoding = 'UTF-8'
        version = true
        author = true
    }
}

// jabref specific tasks
task generateSource(dependsOn: ["generateBstGrammarSource", "generateSearchGrammarSource"]) {
    group = 'JabRef'
    description 'Generates all Java source files.'
}

task generateBstGrammarSource(type: JavaExec) {
    group 'JabRef'
    description 'Generates BstLexer.java and BstParser.java from the Bst.g grammar file using antlr3.'

    File antlrSource = file('src/main/antlr3/net/sf/jabref/bst/Bst.g')

    inputs.file antlrSource
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstLexer.java')
    outputs.file file('src/main/gen/net/sf/jabref/bst/BstParser.java')

    main = 'org.antlr.Tool'
    classpath = configurations.antlr3
    args = ["-o", file('src/main/gen/net/sf/jabref/bst/'), antlrSource]
}

task generateSearchGrammarSource(type: JavaExec) {
    String grammarFile = "Search"

    group 'JabRef'
    description "Generates java files for ${grammarFile}.g antlr4."

    String packagePath = "net/sf/jabref/search"
    File antlrPath = file("src/main/antlr4")
    File genPath = file("src/main/gen")

    File antlrSource = file("$antlrPath/$packagePath/${grammarFile}.g4")
    File destinationDir = file("$genPath/$packagePath")

    inputs.file antlrSource
    outputs.file file("$destinationDir/${grammarFile}Parser.java")
    outputs.file file("$destinationDir/${grammarFile}Lexer.java")
    outputs.file file("$destinationDir/${grammarFile}Visitor.java")
    outputs.file file("$destinationDir/${grammarFile}BaseVisitor.java")
    outputs.file file("$destinationDir/${grammarFile}.tokens")
    outputs.file file("$destinationDir/${grammarFile}Lexer.tokens")

    main = 'org.antlr.v4.Tool'
    classpath = configurations.antlr4
    args = ["-o", destinationDir, "-visitor", "-no-listener", "-package", "net.sf.jabref.search", antlrSource]
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// release tasks
task release(dependsOn: ["releaseWindows", "releaseLinux"]) {
    group = 'JabRef'
    description 'Creates a release for all target platforms.'
}

//win: depends="clean, non_osx, win.installer, macbundle, bzip2src, zipsrc"
task releaseWindows(dependsOn: ["clean", "copyOSXAdapter"]) {
    group = 'JabRef'
    description "Creates a Windows release. Creates all distribution files in ${buildDir}"

    // if ()) {
    // throw new GradleException("rpmbuild does not exist") }
}

//linux: depends="clean, non_osx, win.installer.linux, macbundle, bzip2src, zipsrc"
task releaseLinux(dependsOn: ["clean", "copyOSXAdapter"]) {
    group = 'JabRef'
    description "Creates a Linux release. Creates all distribution files in ${buildDir}"
}

// release helper
task copyOSXAdapter(type: Copy) {
    description "Copies a compiled version of MacAdapter for non-OSX platforms"

    from("${projectDir}/osx")
    into("${buildDir}/classes/osx")
}

import org.gradle.internal.os.OperatingSystem;

task zipSource(type:Exec) {
    if(OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', "git -c core.autocrlf=false -c core.eol=lf archive HEAD --format=zip > ${buildDir}/JabRef-${version}-src.zip"
    } else {
        commandLine "./git -c core.autocrlf=false -c core.eol=lf archive HEAD --format=zip > ${buildDir}/JabRef-${version}-src.zip"
    }
}

task tarSource(type:Exec) {
    if(OperatingSystem.current().isWindows()) {
        commandLine 'cmd', '/c', "git -c core.autocrlf=false -c core.eol=lf archive HEAD > ${buildDir}/JabRef-${version}-src.tar.gz"
    } else {
        commandLine "./git -c core.autocrlf=false -c core.eol=lf archive HEAD > ${buildDir}/JabRef-${version}-src.tar.gz"
    }
}
