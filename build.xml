<?xml version="1.0"?>
<project name="JabRef" default="jars" basedir=".">

	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        PROPERTY SETUP
     +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<!-- some version information -->
	<property name="jabref.version.full" value="2.11.4.0" /> <!-- a version number with 4 places. Required by launch4j -->
	<property name="jabref.year" value="2015" />
	<property name="jabref.placeholder.version" value="@version@" />
	<property name="jabref.placeholder.year" value="@year@" />
	<!-- used by replace task -->

	<!-- Set the properties for intermediate directory -->
	<property name="build.jar" value="JabRef-${jabref.version}.jar" />
	<property name="build.dir" value="buildant" />
	<property name="build.classes" value="${build.dir}/classes" />
	<property name="build.tmp" value="${build.dir}/tmp" />
	<property name="build.classes.osx" value="${build.dir}/classes/osx/macadapter" />
	<property name="build.lib" value="${build.dir}/lib" />
	<property name="build.win" value="${build.dir}/windows" />
	<property name="build.images" value="${build.dir}/images" />
	<property name="build.resource" value="${build.dir}/resource" />
	<property name="build.help" value="${build.dir}/help" />
	<property name="build.extensions" value="${build.dir}/extensions" />
	<property name="build.extension-javadocs" value="${build.extensions}/API" />
	<property name="build.extension-layout" value="${build.extensions}/layout" />
	<property name="build.openoffice.meta" value="${build.resource}/openoffice" />

	<!-- Set the properties for source directories -->
	<property name="resources.dir" value="src/main/resources" />
	<property name="plugin.dir" value="${resources.dir}/plugins/" />
	<property name="txt.dir" value="." />
	<property name="java.dir" value="src/main/java" />
    <property name="gen.dir" value="src/main/gen" />
	<property name="osx.dir" value="${resources.dir}/osx" />
	<property name="win.installer.dir" value="${resources.dir}/windows/nsis" />
	<property name="resource.dir" value="${resources.dir}/resource" />
	<property name="images.dir" value="${resources.dir}/images" />
	<property name="help.dir" value="${resources.dir}/help" />
	<property name="extensions.dir" value="${resources.dir}/extensions" />
	<property name="layout.dir" value="${resources.dir}/resource/layout" />
	<property name="lib.dir" value="lib" />
	<property name="buildres.dir" value="buildres" />

	<property name="osxbin.dir" value="osx" />

	<!-- Build classpath -->
	<filelist id="jars" />
	<path id="classpath">
		<pathelement path="${build.classes}" />
		<pathelement path="${build.dir}" />
		<filelist refid="jars" />
	</path>

	<target name="jars" depends="build, unjarlib" description="Jars up project">
		<mkdir dir="${build.lib}" />

		<mkdir dir="${build.tmp}" />
		<jar destfile="${build.lib}/${build.jar}" >

			<fileset dir="${build.classes}" />
			<fileset dir="${build.tmp}" />
			<fileset dir="${build.dir}">
				<include name="images/**" />
				<include name="help/**" />
				<include name="resource/**" />
			</fileset>

			<!-- Add Plugins -->
			<fileset dir="${resources.dir}">
				<include name="plugins/**" />
			</fileset>
			<fileset dir="${txt.dir}">
				<include name="LICENSE" />
				<include name="README.md" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="net.sf.jabref.JabRefMain" />
                <attribute name="Class-Path" value="." />
			</manifest>
		</jar>

	</target>

	<!-- copy all necessary files and insert version informations -->
	<target name="build" depends="compile, buildinfos" description="Build project">

		<mkdir dir="${build.resource}" />

		<copy todir="${build.resource}">
			<fileset dir="${resource.dir}">
				<include name="**" />
			</fileset>
		</copy>
		<mkdir dir="${build.images}" />
		<copy todir="${build.images}">
			<fileset dir="${images.dir}">
				<include name="**" />
			</fileset>
		</copy>

		<mkdir dir="${build.help}" />
		<copy todir="${build.help}">
			<fileset dir="${help.dir}" />
		</copy>

		<!-- Insert version informations -->
		<replace dir="${build.help}">
		    <replacefilter
			    token="${jabref.placeholder.version}"
				value="${jabref.version}" />
		    <replacefilter
			    token="${jabref.placeholder.year}"
				value="${jabref.year}" />
			<include name="**/About.html" />
		</replace>
		<replace dir="${build.openoffice.meta}" token="${jabref.placeholder.version}" value="${jabref.version}">
			<include name="meta.xml" />
		</replace>

	</target>

	<!-- generate and save some build infos !!! necessary for dynamic build infos !!! -->
	<!-- todo : replace it by the replace task :-),
          src/resource/build.properties = template
          build/resource/build.properties = real info file
	-->
	<target name="buildinfos">
		<tstamp />
		<!-- get date -->
		<buildnumber />
		<!-- generate new build number -> build.number -->
		<echo message="build number = ${build.number}" />
		<!-- write the file, please do not edit this lines -->
		<echo file="${resource.dir}/build.properties">builddate=${TODAY}
build=${build.number}
version=${jabref.version}</echo>
	</target>

	<target name="unjarlib" description="Unpacks jars from lib directory into temp directory">
		<mkdir dir="${build.tmp}" />
		<unjar dest="${build.tmp}">
			<filelist refid="jars" />
		</unjar>
		<!-- rename the microba license file -->
		<move file="${build.tmp}/license.txt" tofile="${build.tmp}/microba-license.txt" />
	</target>

	<target name="macbundle" depends="jars" description="creates a bundle made for the Oracle Apple JVM (1.8+)">
		<taskdef
			name="bundleapp"
			classname="com.oracle.appbundler.AppBundlerTask"
			classpath="${buildres.dir}/appbundler-1.0.jar" />
		<bundleapp
			name="JabRef"
			mainclassname="net.sf.jabref.JabRef"
			outputdirectory="${build.lib}"
			displayname="JabRef"
			identifier="jabref.JabRef"
			icon="${images.dir}/JabRef-Logo.icns"
			shortversion="${jabref.version}">
			<classpath file="${build.lib}/JabRef-${jabref.version}.jar" />	
			<!-- Memory options apparently break the bundle 
			<option value="-Xms128m -Xmx512m" /> -->
		</bundleapp>
		<!-- We still need to hack the Info.plist to enable high resolution for Retina displays -->
		<replace file="${build.lib}/JabRef.app/Contents/Info.plist" 
			token="&lt;key&gt;JVMOptions&lt;/key&gt;"
			value="&lt;key&gt;NSHighResolutionCapable&lt;/key&gt;&#10;
	&lt;true/&gt;&#10;&lt;key&gt;JVMOptions&lt;/key&gt;"/>
		<!-- We also need to add native support for bib files in the Info.plist -->
		<replace file="${build.lib}/JabRef.app/Contents/Info.plist" 
		token="&lt;key&gt;JVMOptions&lt;/key&gt;"
		value="&lt;key&gt;CFBundleDocumentTypes&lt;/key&gt;&#10;
	&lt;array&gt;&#10;
		&lt;dict&gt;&#10;
			&lt;key&gt;CFBundleTypeName&lt;/key&gt;&#10;
			&lt;string&gt;BibTeX file&lt;/string&gt;&#10;
			&lt;key&gt;CFBundleTypeRole&lt;/key&gt;&#10;
			&lt;string&gt;Editor&lt;/string&gt;&#10;
			&lt;key&gt;CFBundleTypeIconFile&lt;/key&gt;&#10;
			&lt;string&gt;JabRef-Logo.icns&lt;/string&gt;&#10;
			&lt;key&gt;CFBundleTypeExtensions&lt;/key&gt;&#10;
			&lt;array&gt;&#10;
				&lt;string&gt;bib&lt;/string&gt;&#10;
			&lt;/array&gt;&#10;
		&lt;/dict&gt;&#10;
	&lt;/array&gt;&#10;
	&lt;key&gt;JVMOptions&lt;/key&gt;"/>
		<zip basedir="${build.lib}"
			destfile="${build.lib}/JabRef-${jabref.version}-OSX.zip"
			excludes="JabRef.app/Contents/MacOS/JavaAppLauncher"
			includes="JabRef.app/"
			level="9">
			<zipfileset dir="${build.lib}" includes="JabRef.app/Contents/MacOS/JavaAppLauncher" filemode="755" />
		</zip>
	</target>

	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	<!-- Build Windows Installer                                                    -->
	<!--                                                                            -->
	<!-- Don't forget to set nsis.executable and launch4j.dir properties            -->
	<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

	<!-- Load user dependent properties. Has to happen before setting the properties here -->
	<!-- For instance to redefine the NSIS-compiler write
		nsis.executable="d:\\prog\\dev\\NSIS\\makensis.exe"
	  -->
	<property file="user.properties" />

	<property name="nsis.executable" value="C:\Program files\NSIS\makensis.exe"/>
	<property name="nsis.executable.linux" value="makensis"/>
	<property name="launch4j.dir" location="/opt/launch4j" />

	<target name="win.installer" description="Copy files in place to be used by the installer" depends="win.installer.step1, win.installer.step2.win, win.installer.step3">
	</target>

	<target name="win.installer.linux" description="Copy files in place to be used by the installer" depends="win.installer.step1, win.installer.step2.linux, win.installer.step3">
		<delete dir="${win.installer.dir}/dist" />
	</target>

	<target name="win.installer.step1" description="Gather everything that will go into the installer in dist">
		<mkdir dir="${win.installer.dir}/dist" />

		<copy file="${build.lib}/${build.jar}" todir="${win.installer.dir}/dist" />

		<available property="win.installer.jar.available" file="${win.installer.dir}/dist/${build.jar}" />

		<fail unless="win.installer.jar.available" message="Did not find jar: ${build.jar}" />

		<copy todir="${win.installer.dir}/dist">
			<fileset dir="${txt.dir}">
				<include name="LICENSE" />
				<include name="README.md" />
			</fileset>
		</copy>

	</target>

	<target name="win.installer.step3">
		<move file="${win.installer.dir}/JabRefSetup.exe" tofile="${build.lib}/JabRef-${jabref.version}-setup.exe" />
		<delete dir="${win.installer.dir}/dist" />
	</target>

</project>
